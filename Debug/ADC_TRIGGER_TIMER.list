
ADC_TRIGGER_TIMER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008378  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08008548  08008548  00018548  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800898c  0800898c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800898c  0800898c  0001898c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008994  08008994  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008994  08008994  00018994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008998  08008998  00018998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800899c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  200001e0  08008b7c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  08008b7c  0002034c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011240  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025dd  00000000  00000000  00031450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  00033a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e50  00000000  00000000  00034978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000243f6  00000000  00000000  000357c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000133f5  00000000  00000000  00059bbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000deeca  00000000  00000000  0006cfb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014be7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005220  00000000  00000000  0014bed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008530 	.word	0x08008530

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	08008530 	.word	0x08008530

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c60:	f000 b9aa 	b.w	8000fb8 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f83c 	bl	8000ce8 <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__aeabi_d2lz>:
 8000c7c:	b538      	push	{r3, r4, r5, lr}
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2300      	movs	r3, #0
 8000c82:	4604      	mov	r4, r0
 8000c84:	460d      	mov	r5, r1
 8000c86:	f7ff ff49 	bl	8000b1c <__aeabi_dcmplt>
 8000c8a:	b928      	cbnz	r0, 8000c98 <__aeabi_d2lz+0x1c>
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	4629      	mov	r1, r5
 8000c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c94:	f000 b80a 	b.w	8000cac <__aeabi_d2ulz>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c9e:	f000 f805 	bl	8000cac <__aeabi_d2ulz>
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	bd38      	pop	{r3, r4, r5, pc}
 8000caa:	bf00      	nop

08000cac <__aeabi_d2ulz>:
 8000cac:	b5d0      	push	{r4, r6, r7, lr}
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <__aeabi_d2ulz+0x34>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4606      	mov	r6, r0
 8000cb4:	460f      	mov	r7, r1
 8000cb6:	f7ff fcbf 	bl	8000638 <__aeabi_dmul>
 8000cba:	f7ff ff57 	bl	8000b6c <__aeabi_d2uiz>
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	f7ff fc40 	bl	8000544 <__aeabi_ui2d>
 8000cc4:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <__aeabi_d2ulz+0x38>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f7ff fcb6 	bl	8000638 <__aeabi_dmul>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	460b      	mov	r3, r1
 8000cd0:	4630      	mov	r0, r6
 8000cd2:	4639      	mov	r1, r7
 8000cd4:	f7ff faf8 	bl	80002c8 <__aeabi_dsub>
 8000cd8:	f7ff ff48 	bl	8000b6c <__aeabi_d2uiz>
 8000cdc:	4621      	mov	r1, r4
 8000cde:	bdd0      	pop	{r4, r6, r7, pc}
 8000ce0:	3df00000 	.word	0x3df00000
 8000ce4:	41f00000 	.word	0x41f00000

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	468e      	mov	lr, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14d      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4694      	mov	ip, r2
 8000cfa:	d969      	bls.n	8000dd0 <__udivmoddi4+0xe8>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b152      	cbz	r2, 8000d18 <__udivmoddi4+0x30>
 8000d02:	fa01 f302 	lsl.w	r3, r1, r2
 8000d06:	f1c2 0120 	rsb	r1, r2, #32
 8000d0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d12:	ea41 0e03 	orr.w	lr, r1, r3
 8000d16:	4094      	lsls	r4, r2
 8000d18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d1c:	0c21      	lsrs	r1, r4, #16
 8000d1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d22:	fa1f f78c 	uxth.w	r7, ip
 8000d26:	fb08 e316 	mls	r3, r8, r6, lr
 8000d2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d2e:	fb06 f107 	mul.w	r1, r6, r7
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d3e:	f080 811f 	bcs.w	8000f80 <__udivmoddi4+0x298>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 811c 	bls.w	8000f80 <__udivmoddi4+0x298>
 8000d48:	3e02      	subs	r6, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a5b      	subs	r3, r3, r1
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3310 	mls	r3, r8, r0, r3
 8000d58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d5c:	fb00 f707 	mul.w	r7, r0, r7
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x92>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6c:	f080 810a 	bcs.w	8000f84 <__udivmoddi4+0x29c>
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	f240 8107 	bls.w	8000f84 <__udivmoddi4+0x29c>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7e:	1be4      	subs	r4, r4, r7
 8000d80:	2600      	movs	r6, #0
 8000d82:	b11d      	cbz	r5, 8000d8c <__udivmoddi4+0xa4>
 8000d84:	40d4      	lsrs	r4, r2
 8000d86:	2300      	movs	r3, #0
 8000d88:	e9c5 4300 	strd	r4, r3, [r5]
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d909      	bls.n	8000daa <__udivmoddi4+0xc2>
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	f000 80ef 	beq.w	8000f7a <__udivmoddi4+0x292>
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000da2:	4630      	mov	r0, r6
 8000da4:	4631      	mov	r1, r6
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	fab3 f683 	clz	r6, r3
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d14a      	bne.n	8000e48 <__udivmoddi4+0x160>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d302      	bcc.n	8000dbc <__udivmoddi4+0xd4>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	f200 80f9 	bhi.w	8000fae <__udivmoddi4+0x2c6>
 8000dbc:	1a84      	subs	r4, r0, r2
 8000dbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	469e      	mov	lr, r3
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	d0e0      	beq.n	8000d8c <__udivmoddi4+0xa4>
 8000dca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dce:	e7dd      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000dd0:	b902      	cbnz	r2, 8000dd4 <__udivmoddi4+0xec>
 8000dd2:	deff      	udf	#255	; 0xff
 8000dd4:	fab2 f282 	clz	r2, r2
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	f040 8092 	bne.w	8000f02 <__udivmoddi4+0x21a>
 8000dde:	eba1 010c 	sub.w	r1, r1, ip
 8000de2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de6:	fa1f fe8c 	uxth.w	lr, ip
 8000dea:	2601      	movs	r6, #1
 8000dec:	0c20      	lsrs	r0, r4, #16
 8000dee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000df2:	fb07 1113 	mls	r1, r7, r3, r1
 8000df6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfa:	fb0e f003 	mul.w	r0, lr, r3
 8000dfe:	4288      	cmp	r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x12c>
 8000e02:	eb1c 0101 	adds.w	r1, ip, r1
 8000e06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x12a>
 8000e0c:	4288      	cmp	r0, r1
 8000e0e:	f200 80cb 	bhi.w	8000fa8 <__udivmoddi4+0x2c0>
 8000e12:	4643      	mov	r3, r8
 8000e14:	1a09      	subs	r1, r1, r0
 8000e16:	b2a4      	uxth	r4, r4
 8000e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e24:	fb0e fe00 	mul.w	lr, lr, r0
 8000e28:	45a6      	cmp	lr, r4
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x156>
 8000e2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e34:	d202      	bcs.n	8000e3c <__udivmoddi4+0x154>
 8000e36:	45a6      	cmp	lr, r4
 8000e38:	f200 80bb 	bhi.w	8000fb2 <__udivmoddi4+0x2ca>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	eba4 040e 	sub.w	r4, r4, lr
 8000e42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e46:	e79c      	b.n	8000d82 <__udivmoddi4+0x9a>
 8000e48:	f1c6 0720 	rsb	r7, r6, #32
 8000e4c:	40b3      	lsls	r3, r6
 8000e4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e56:	fa20 f407 	lsr.w	r4, r0, r7
 8000e5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5e:	431c      	orrs	r4, r3
 8000e60:	40f9      	lsrs	r1, r7
 8000e62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e66:	fa00 f306 	lsl.w	r3, r0, r6
 8000e6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e6e:	0c20      	lsrs	r0, r4, #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fb09 1118 	mls	r1, r9, r8, r1
 8000e78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e80:	4288      	cmp	r0, r1
 8000e82:	fa02 f206 	lsl.w	r2, r2, r6
 8000e86:	d90b      	bls.n	8000ea0 <__udivmoddi4+0x1b8>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e90:	f080 8088 	bcs.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e94:	4288      	cmp	r0, r1
 8000e96:	f240 8085 	bls.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ea8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eb0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eb4:	458e      	cmp	lr, r1
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x1e2>
 8000eb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ebc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ec0:	d26c      	bcs.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec2:	458e      	cmp	lr, r1
 8000ec4:	d96a      	bls.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	4461      	add	r1, ip
 8000eca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ece:	fba0 9402 	umull	r9, r4, r0, r2
 8000ed2:	eba1 010e 	sub.w	r1, r1, lr
 8000ed6:	42a1      	cmp	r1, r4
 8000ed8:	46c8      	mov	r8, r9
 8000eda:	46a6      	mov	lr, r4
 8000edc:	d356      	bcc.n	8000f8c <__udivmoddi4+0x2a4>
 8000ede:	d053      	beq.n	8000f88 <__udivmoddi4+0x2a0>
 8000ee0:	b15d      	cbz	r5, 8000efa <__udivmoddi4+0x212>
 8000ee2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ee6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eea:	fa01 f707 	lsl.w	r7, r1, r7
 8000eee:	fa22 f306 	lsr.w	r3, r2, r6
 8000ef2:	40f1      	lsrs	r1, r6
 8000ef4:	431f      	orrs	r7, r3
 8000ef6:	e9c5 7100 	strd	r7, r1, [r5]
 8000efa:	2600      	movs	r6, #0
 8000efc:	4631      	mov	r1, r6
 8000efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f02:	f1c2 0320 	rsb	r3, r2, #32
 8000f06:	40d8      	lsrs	r0, r3
 8000f08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f10:	4091      	lsls	r1, r2
 8000f12:	4301      	orrs	r1, r0
 8000f14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f18:	fa1f fe8c 	uxth.w	lr, ip
 8000f1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f20:	fb07 3610 	mls	r6, r7, r0, r3
 8000f24:	0c0b      	lsrs	r3, r1, #16
 8000f26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f2e:	429e      	cmp	r6, r3
 8000f30:	fa04 f402 	lsl.w	r4, r4, r2
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x260>
 8000f36:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f3e:	d22f      	bcs.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f40:	429e      	cmp	r6, r3
 8000f42:	d92d      	bls.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f44:	3802      	subs	r0, #2
 8000f46:	4463      	add	r3, ip
 8000f48:	1b9b      	subs	r3, r3, r6
 8000f4a:	b289      	uxth	r1, r1
 8000f4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f50:	fb07 3316 	mls	r3, r7, r6, r3
 8000f54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f58:	fb06 f30e 	mul.w	r3, r6, lr
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x28a>
 8000f60:	eb1c 0101 	adds.w	r1, ip, r1
 8000f64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f68:	d216      	bcs.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	d914      	bls.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6e:	3e02      	subs	r6, #2
 8000f70:	4461      	add	r1, ip
 8000f72:	1ac9      	subs	r1, r1, r3
 8000f74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f78:	e738      	b.n	8000dec <__udivmoddi4+0x104>
 8000f7a:	462e      	mov	r6, r5
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	e705      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000f80:	4606      	mov	r6, r0
 8000f82:	e6e3      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f84:	4618      	mov	r0, r3
 8000f86:	e6f8      	b.n	8000d7a <__udivmoddi4+0x92>
 8000f88:	454b      	cmp	r3, r9
 8000f8a:	d2a9      	bcs.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f94:	3801      	subs	r0, #1
 8000f96:	e7a3      	b.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f98:	4646      	mov	r6, r8
 8000f9a:	e7ea      	b.n	8000f72 <__udivmoddi4+0x28a>
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	e794      	b.n	8000eca <__udivmoddi4+0x1e2>
 8000fa0:	4640      	mov	r0, r8
 8000fa2:	e7d1      	b.n	8000f48 <__udivmoddi4+0x260>
 8000fa4:	46d0      	mov	r8, sl
 8000fa6:	e77b      	b.n	8000ea0 <__udivmoddi4+0x1b8>
 8000fa8:	3b02      	subs	r3, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	e732      	b.n	8000e14 <__udivmoddi4+0x12c>
 8000fae:	4630      	mov	r0, r6
 8000fb0:	e709      	b.n	8000dc6 <__udivmoddi4+0xde>
 8000fb2:	4464      	add	r4, ip
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	e742      	b.n	8000e3e <__udivmoddi4+0x156>

08000fb8 <__aeabi_idiv0>:
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	0000      	movs	r0, r0
	...

08000fc0 <HAL_UART_RxCpltCallback>:
char volts[5];
float fvolts = 0;
float fadc_volts = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

	if(rx_data == '\n')
 8000fc8:	4b39      	ldr	r3, [pc, #228]	; (80010b0 <HAL_UART_RxCpltCallback+0xf0>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b0a      	cmp	r3, #10
 8000fce:	d153      	bne.n	8001078 <HAL_UART_RxCpltCallback+0xb8>
	{
		data_buffer[count++]='\n';
 8000fd0:	4b38      	ldr	r3, [pc, #224]	; (80010b4 <HAL_UART_RxCpltCallback+0xf4>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	1c5a      	adds	r2, r3, #1
 8000fd6:	b2d1      	uxtb	r1, r2
 8000fd8:	4a36      	ldr	r2, [pc, #216]	; (80010b4 <HAL_UART_RxCpltCallback+0xf4>)
 8000fda:	7011      	strb	r1, [r2, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b36      	ldr	r3, [pc, #216]	; (80010b8 <HAL_UART_RxCpltCallback+0xf8>)
 8000fe0:	210a      	movs	r1, #10
 8000fe2:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(huart,data_buffer,count,HAL_MAX_DELAY);
 8000fe4:	4b33      	ldr	r3, [pc, #204]	; (80010b4 <HAL_UART_RxCpltCallback+0xf4>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	f04f 33ff 	mov.w	r3, #4294967295
 8000fee:	4932      	ldr	r1, [pc, #200]	; (80010b8 <HAL_UART_RxCpltCallback+0xf8>)
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f003 fb78 	bl	80046e6 <HAL_UART_Transmit>
		strcpy(volts, data_buffer);
 8000ff6:	4930      	ldr	r1, [pc, #192]	; (80010b8 <HAL_UART_RxCpltCallback+0xf8>)
 8000ff8:	4830      	ldr	r0, [pc, #192]	; (80010bc <HAL_UART_RxCpltCallback+0xfc>)
 8000ffa:	f004 fbd5 	bl	80057a8 <strcpy>
		memset(data_buffer, 0, count);
 8000ffe:	4b2d      	ldr	r3, [pc, #180]	; (80010b4 <HAL_UART_RxCpltCallback+0xf4>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	461a      	mov	r2, r3
 8001004:	2100      	movs	r1, #0
 8001006:	482c      	ldr	r0, [pc, #176]	; (80010b8 <HAL_UART_RxCpltCallback+0xf8>)
 8001008:	f004 fbc6 	bl	8005798 <memset>
		count = 0;
 800100c:	4b29      	ldr	r3, [pc, #164]	; (80010b4 <HAL_UART_RxCpltCallback+0xf4>)
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
		fvolts = atof(volts);
 8001012:	482a      	ldr	r0, [pc, #168]	; (80010bc <HAL_UART_RxCpltCallback+0xfc>)
 8001014:	f004 fb92 	bl	800573c <atof>
 8001018:	ec53 2b10 	vmov	r2, r3, d0
 800101c:	4610      	mov	r0, r2
 800101e:	4619      	mov	r1, r3
 8001020:	f7ff fdc4 	bl	8000bac <__aeabi_d2f>
 8001024:	4603      	mov	r3, r0
 8001026:	4a26      	ldr	r2, [pc, #152]	; (80010c0 <HAL_UART_RxCpltCallback+0x100>)
 8001028:	6013      	str	r3, [r2, #0]
		fvolts = (fvolts/3.3)*RANGE_PWM;
 800102a:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <HAL_UART_RxCpltCallback+0x100>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff faaa 	bl	8000588 <__aeabi_f2d>
 8001034:	a31a      	add	r3, pc, #104	; (adr r3, 80010a0 <HAL_UART_RxCpltCallback+0xe0>)
 8001036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103a:	f7ff fc27 	bl	800088c <__aeabi_ddiv>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	4610      	mov	r0, r2
 8001044:	4619      	mov	r1, r3
 8001046:	a318      	add	r3, pc, #96	; (adr r3, 80010a8 <HAL_UART_RxCpltCallback+0xe8>)
 8001048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104c:	f7ff faf4 	bl	8000638 <__aeabi_dmul>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4610      	mov	r0, r2
 8001056:	4619      	mov	r1, r3
 8001058:	f7ff fda8 	bl	8000bac <__aeabi_d2f>
 800105c:	4603      	mov	r3, r0
 800105e:	4a18      	ldr	r2, [pc, #96]	; (80010c0 <HAL_UART_RxCpltCallback+0x100>)
 8001060:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (uint32_t) fvolts);
 8001062:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <HAL_UART_RxCpltCallback+0x100>)
 8001064:	edd3 7a00 	vldr	s15, [r3]
 8001068:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <HAL_UART_RxCpltCallback+0x104>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001070:	ee17 2a90 	vmov	r2, s15
 8001074:	635a      	str	r2, [r3, #52]	; 0x34
 8001076:	e00a      	b.n	800108e <HAL_UART_RxCpltCallback+0xce>
	}
	else
	{
		data_buffer[count++] = rx_data;
 8001078:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <HAL_UART_RxCpltCallback+0xf4>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	1c5a      	adds	r2, r3, #1
 800107e:	b2d1      	uxtb	r1, r2
 8001080:	4a0c      	ldr	r2, [pc, #48]	; (80010b4 <HAL_UART_RxCpltCallback+0xf4>)
 8001082:	7011      	strb	r1, [r2, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <HAL_UART_RxCpltCallback+0xf0>)
 8001088:	7819      	ldrb	r1, [r3, #0]
 800108a:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <HAL_UART_RxCpltCallback+0xf8>)
 800108c:	5499      	strb	r1, [r3, r2]
	}
	HAL_UART_Receive_IT(&huart2,&rx_data,1);
 800108e:	2201      	movs	r2, #1
 8001090:	4907      	ldr	r1, [pc, #28]	; (80010b0 <HAL_UART_RxCpltCallback+0xf0>)
 8001092:	480d      	ldr	r0, [pc, #52]	; (80010c8 <HAL_UART_RxCpltCallback+0x108>)
 8001094:	f003 fbb9 	bl	800480a <HAL_UART_Receive_IT>
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	66666666 	.word	0x66666666
 80010a4:	400a6666 	.word	0x400a6666
 80010a8:	00000000 	.word	0x00000000
 80010ac:	40d193c0 	.word	0x40d193c0
 80010b0:	20000318 	.word	0x20000318
 80010b4:	20000319 	.word	0x20000319
 80010b8:	2000031c 	.word	0x2000031c
 80010bc:	20000324 	.word	0x20000324
 80010c0:	2000032c 	.word	0x2000032c
 80010c4:	2000028c 	.word	0x2000028c
 80010c8:	200002d4 	.word	0x200002d4
 80010cc:	00000000 	.word	0x00000000

080010d0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	fadc_volts = HAL_ADC_GetValue(&hadc1)*1.0/4095 * 3.3;
 80010d8:	4817      	ldr	r0, [pc, #92]	; (8001138 <HAL_ADC_ConvCpltCallback+0x68>)
 80010da:	f000 ffe1 	bl	80020a0 <HAL_ADC_GetValue>
 80010de:	4603      	mov	r3, r0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fa2f 	bl	8000544 <__aeabi_ui2d>
 80010e6:	a310      	add	r3, pc, #64	; (adr r3, 8001128 <HAL_ADC_ConvCpltCallback+0x58>)
 80010e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ec:	f7ff fbce 	bl	800088c <__aeabi_ddiv>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4610      	mov	r0, r2
 80010f6:	4619      	mov	r1, r3
 80010f8:	a30d      	add	r3, pc, #52	; (adr r3, 8001130 <HAL_ADC_ConvCpltCallback+0x60>)
 80010fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fe:	f7ff fa9b 	bl	8000638 <__aeabi_dmul>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	4610      	mov	r0, r2
 8001108:	4619      	mov	r1, r3
 800110a:	f7ff fd4f 	bl	8000bac <__aeabi_d2f>
 800110e:	4603      	mov	r3, r0
 8001110:	4a0a      	ldr	r2, [pc, #40]	; (800113c <HAL_ADC_ConvCpltCallback+0x6c>)
 8001112:	6013      	str	r3, [r2, #0]
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001114:	2120      	movs	r1, #32
 8001116:	480a      	ldr	r0, [pc, #40]	; (8001140 <HAL_ADC_ConvCpltCallback+0x70>)
 8001118:	f001 fd6d 	bl	8002bf6 <HAL_GPIO_TogglePin>
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	f3af 8000 	nop.w
 8001128:	00000000 	.word	0x00000000
 800112c:	40affe00 	.word	0x40affe00
 8001130:	66666666 	.word	0x66666666
 8001134:	400a6666 	.word	0x400a6666
 8001138:	200001fc 	.word	0x200001fc
 800113c:	20000330 	.word	0x20000330
 8001140:	40020000 	.word	0x40020000

08001144 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001148:	f000 fd06 	bl	8001b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800114c:	f000 f836 	bl	80011bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001150:	f000 fa36 	bl	80015c0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001154:	f000 f8a4 	bl	80012a0 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001158:	f000 f8f4 	bl	8001344 <MX_TIM3_Init>
  MX_TIM8_Init();
 800115c:	f000 f966 	bl	800142c <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8001160:	f000 fa04 	bl	800156c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_IT(&hadc1);
 8001164:	480e      	ldr	r0, [pc, #56]	; (80011a0 <main+0x5c>)
 8001166:	f000 fdad 	bl	8001cc4 <HAL_ADC_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800116a:	2100      	movs	r1, #0
 800116c:	480d      	ldr	r0, [pc, #52]	; (80011a4 <main+0x60>)
 800116e:	f002 fc3d 	bl	80039ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001172:	2100      	movs	r1, #0
 8001174:	480c      	ldr	r0, [pc, #48]	; (80011a8 <main+0x64>)
 8001176:	f002 fc39 	bl	80039ec <HAL_TIM_PWM_Start>

  fvolts = (2/3.3)*RANGE_PWM;
 800117a:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <main+0x68>)
 800117c:	4a0c      	ldr	r2, [pc, #48]	; (80011b0 <main+0x6c>)
 800117e:	601a      	str	r2, [r3, #0]
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (uint32_t) fvolts);
 8001180:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <main+0x68>)
 8001182:	edd3 7a00 	vldr	s15, [r3]
 8001186:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <main+0x64>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800118e:	ee17 2a90 	vmov	r2, s15
 8001192:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8001194:	2201      	movs	r2, #1
 8001196:	4907      	ldr	r1, [pc, #28]	; (80011b4 <main+0x70>)
 8001198:	4807      	ldr	r0, [pc, #28]	; (80011b8 <main+0x74>)
 800119a:	f003 fb36 	bl	800480a <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800119e:	e7fe      	b.n	800119e <main+0x5a>
 80011a0:	200001fc 	.word	0x200001fc
 80011a4:	20000244 	.word	0x20000244
 80011a8:	2000028c 	.word	0x2000028c
 80011ac:	2000032c 	.word	0x2000032c
 80011b0:	462a71f0 	.word	0x462a71f0
 80011b4:	20000318 	.word	0x20000318
 80011b8:	200002d4 	.word	0x200002d4

080011bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b094      	sub	sp, #80	; 0x50
 80011c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c2:	f107 031c 	add.w	r3, r7, #28
 80011c6:	2234      	movs	r2, #52	; 0x34
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f004 fae4 	bl	8005798 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d0:	f107 0308 	add.w	r3, r7, #8
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e0:	2300      	movs	r3, #0
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	4b2c      	ldr	r3, [pc, #176]	; (8001298 <SystemClock_Config+0xdc>)
 80011e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e8:	4a2b      	ldr	r2, [pc, #172]	; (8001298 <SystemClock_Config+0xdc>)
 80011ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ee:	6413      	str	r3, [r2, #64]	; 0x40
 80011f0:	4b29      	ldr	r3, [pc, #164]	; (8001298 <SystemClock_Config+0xdc>)
 80011f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011fc:	2300      	movs	r3, #0
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	4b26      	ldr	r3, [pc, #152]	; (800129c <SystemClock_Config+0xe0>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a25      	ldr	r2, [pc, #148]	; (800129c <SystemClock_Config+0xe0>)
 8001206:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800120a:	6013      	str	r3, [r2, #0]
 800120c:	4b23      	ldr	r3, [pc, #140]	; (800129c <SystemClock_Config+0xe0>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001214:	603b      	str	r3, [r7, #0]
 8001216:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001218:	2301      	movs	r3, #1
 800121a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800121c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001220:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001222:	2302      	movs	r3, #2
 8001224:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001226:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800122a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800122c:	2304      	movs	r3, #4
 800122e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001230:	23b4      	movs	r3, #180	; 0xb4
 8001232:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001234:	2302      	movs	r3, #2
 8001236:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001238:	2302      	movs	r3, #2
 800123a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800123c:	2302      	movs	r3, #2
 800123e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001240:	f107 031c 	add.w	r3, r7, #28
 8001244:	4618      	mov	r0, r3
 8001246:	f002 f88b 	bl	8003360 <HAL_RCC_OscConfig>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001250:	f000 fa06 	bl	8001660 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001254:	f001 fcea 	bl	8002c2c <HAL_PWREx_EnableOverDrive>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800125e:	f000 f9ff 	bl	8001660 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001262:	230f      	movs	r3, #15
 8001264:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001266:	2302      	movs	r3, #2
 8001268:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800126e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001272:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001278:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800127a:	f107 0308 	add.w	r3, r7, #8
 800127e:	2105      	movs	r1, #5
 8001280:	4618      	mov	r0, r3
 8001282:	f001 fd23 	bl	8002ccc <HAL_RCC_ClockConfig>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800128c:	f000 f9e8 	bl	8001660 <Error_Handler>
  }
}
 8001290:	bf00      	nop
 8001292:	3750      	adds	r7, #80	; 0x50
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40023800 	.word	0x40023800
 800129c:	40007000 	.word	0x40007000

080012a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012a6:	463b      	mov	r3, r7
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012b2:	4b22      	ldr	r3, [pc, #136]	; (800133c <MX_ADC1_Init+0x9c>)
 80012b4:	4a22      	ldr	r2, [pc, #136]	; (8001340 <MX_ADC1_Init+0xa0>)
 80012b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012b8:	4b20      	ldr	r3, [pc, #128]	; (800133c <MX_ADC1_Init+0x9c>)
 80012ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012c0:	4b1e      	ldr	r3, [pc, #120]	; (800133c <MX_ADC1_Init+0x9c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80012c6:	4b1d      	ldr	r3, [pc, #116]	; (800133c <MX_ADC1_Init+0x9c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012cc:	4b1b      	ldr	r3, [pc, #108]	; (800133c <MX_ADC1_Init+0x9c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012d2:	4b1a      	ldr	r3, [pc, #104]	; (800133c <MX_ADC1_Init+0x9c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80012da:	4b18      	ldr	r3, [pc, #96]	; (800133c <MX_ADC1_Init+0x9c>)
 80012dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80012e2:	4b16      	ldr	r3, [pc, #88]	; (800133c <MX_ADC1_Init+0x9c>)
 80012e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012ea:	4b14      	ldr	r3, [pc, #80]	; (800133c <MX_ADC1_Init+0x9c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <MX_ADC1_Init+0x9c>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <MX_ADC1_Init+0x9c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012fe:	4b0f      	ldr	r3, [pc, #60]	; (800133c <MX_ADC1_Init+0x9c>)
 8001300:	2201      	movs	r2, #1
 8001302:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001304:	480d      	ldr	r0, [pc, #52]	; (800133c <MX_ADC1_Init+0x9c>)
 8001306:	f000 fc99 	bl	8001c3c <HAL_ADC_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001310:	f000 f9a6 	bl	8001660 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001314:	2300      	movs	r3, #0
 8001316:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001318:	2301      	movs	r3, #1
 800131a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800131c:	2300      	movs	r3, #0
 800131e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001320:	463b      	mov	r3, r7
 8001322:	4619      	mov	r1, r3
 8001324:	4805      	ldr	r0, [pc, #20]	; (800133c <MX_ADC1_Init+0x9c>)
 8001326:	f000 fedd 	bl	80020e4 <HAL_ADC_ConfigChannel>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001330:	f000 f996 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001334:	bf00      	nop
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	200001fc 	.word	0x200001fc
 8001340:	40012000 	.word	0x40012000

08001344 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08e      	sub	sp, #56	; 0x38
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800134a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001358:	f107 0320 	add.w	r3, r7, #32
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
 8001370:	615a      	str	r2, [r3, #20]
 8001372:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001374:	4b2b      	ldr	r3, [pc, #172]	; (8001424 <MX_TIM3_Init+0xe0>)
 8001376:	4a2c      	ldr	r2, [pc, #176]	; (8001428 <MX_TIM3_Init+0xe4>)
 8001378:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9000-1;
 800137a:	4b2a      	ldr	r3, [pc, #168]	; (8001424 <MX_TIM3_Init+0xe0>)
 800137c:	f242 3227 	movw	r2, #8999	; 0x2327
 8001380:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001382:	4b28      	ldr	r3, [pc, #160]	; (8001424 <MX_TIM3_Init+0xe0>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001388:	4b26      	ldr	r3, [pc, #152]	; (8001424 <MX_TIM3_Init+0xe0>)
 800138a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800138e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001390:	4b24      	ldr	r3, [pc, #144]	; (8001424 <MX_TIM3_Init+0xe0>)
 8001392:	2200      	movs	r2, #0
 8001394:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001396:	4b23      	ldr	r3, [pc, #140]	; (8001424 <MX_TIM3_Init+0xe0>)
 8001398:	2280      	movs	r2, #128	; 0x80
 800139a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800139c:	4821      	ldr	r0, [pc, #132]	; (8001424 <MX_TIM3_Init+0xe0>)
 800139e:	f002 fa7d 	bl	800389c <HAL_TIM_Base_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80013a8:	f000 f95a 	bl	8001660 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013b6:	4619      	mov	r1, r3
 80013b8:	481a      	ldr	r0, [pc, #104]	; (8001424 <MX_TIM3_Init+0xe0>)
 80013ba:	f002 fca1 	bl	8003d00 <HAL_TIM_ConfigClockSource>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80013c4:	f000 f94c 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013c8:	4816      	ldr	r0, [pc, #88]	; (8001424 <MX_TIM3_Init+0xe0>)
 80013ca:	f002 fab6 	bl	800393a <HAL_TIM_PWM_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80013d4:	f000 f944 	bl	8001660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013d8:	2320      	movs	r3, #32
 80013da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013dc:	2300      	movs	r3, #0
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013e0:	f107 0320 	add.w	r3, r7, #32
 80013e4:	4619      	mov	r1, r3
 80013e6:	480f      	ldr	r0, [pc, #60]	; (8001424 <MX_TIM3_Init+0xe0>)
 80013e8:	f003 f862 	bl	80044b0 <HAL_TIMEx_MasterConfigSynchronization>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80013f2:	f000 f935 	bl	8001660 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013f6:	2360      	movs	r3, #96	; 0x60
 80013f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	2200      	movs	r2, #0
 800140a:	4619      	mov	r1, r3
 800140c:	4805      	ldr	r0, [pc, #20]	; (8001424 <MX_TIM3_Init+0xe0>)
 800140e:	f002 fbb5 	bl	8003b7c <HAL_TIM_PWM_ConfigChannel>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001418:	f000 f922 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800141c:	bf00      	nop
 800141e:	3738      	adds	r7, #56	; 0x38
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000244 	.word	0x20000244
 8001428:	40000400 	.word	0x40000400

0800142c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b096      	sub	sp, #88	; 0x58
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001432:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001440:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800144a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
 8001458:	611a      	str	r2, [r3, #16]
 800145a:	615a      	str	r2, [r3, #20]
 800145c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	2220      	movs	r2, #32
 8001462:	2100      	movs	r1, #0
 8001464:	4618      	mov	r0, r3
 8001466:	f004 f997 	bl	8005798 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800146a:	4b3e      	ldr	r3, [pc, #248]	; (8001564 <MX_TIM8_Init+0x138>)
 800146c:	4a3e      	ldr	r2, [pc, #248]	; (8001568 <MX_TIM8_Init+0x13c>)
 800146e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001470:	4b3c      	ldr	r3, [pc, #240]	; (8001564 <MX_TIM8_Init+0x138>)
 8001472:	2200      	movs	r2, #0
 8001474:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001476:	4b3b      	ldr	r3, [pc, #236]	; (8001564 <MX_TIM8_Init+0x138>)
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 18000-1;
 800147c:	4b39      	ldr	r3, [pc, #228]	; (8001564 <MX_TIM8_Init+0x138>)
 800147e:	f244 624f 	movw	r2, #17999	; 0x464f
 8001482:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001484:	4b37      	ldr	r3, [pc, #220]	; (8001564 <MX_TIM8_Init+0x138>)
 8001486:	2200      	movs	r2, #0
 8001488:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800148a:	4b36      	ldr	r3, [pc, #216]	; (8001564 <MX_TIM8_Init+0x138>)
 800148c:	2200      	movs	r2, #0
 800148e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001490:	4b34      	ldr	r3, [pc, #208]	; (8001564 <MX_TIM8_Init+0x138>)
 8001492:	2280      	movs	r2, #128	; 0x80
 8001494:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001496:	4833      	ldr	r0, [pc, #204]	; (8001564 <MX_TIM8_Init+0x138>)
 8001498:	f002 fa00 	bl	800389c <HAL_TIM_Base_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80014a2:	f000 f8dd 	bl	8001660 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014aa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80014ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014b0:	4619      	mov	r1, r3
 80014b2:	482c      	ldr	r0, [pc, #176]	; (8001564 <MX_TIM8_Init+0x138>)
 80014b4:	f002 fc24 	bl	8003d00 <HAL_TIM_ConfigClockSource>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80014be:	f000 f8cf 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80014c2:	4828      	ldr	r0, [pc, #160]	; (8001564 <MX_TIM8_Init+0x138>)
 80014c4:	f002 fa39 	bl	800393a <HAL_TIM_PWM_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80014ce:	f000 f8c7 	bl	8001660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d2:	2300      	movs	r3, #0
 80014d4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80014da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014de:	4619      	mov	r1, r3
 80014e0:	4820      	ldr	r0, [pc, #128]	; (8001564 <MX_TIM8_Init+0x138>)
 80014e2:	f002 ffe5 	bl	80044b0 <HAL_TIMEx_MasterConfigSynchronization>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80014ec:	f000 f8b8 	bl	8001660 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014f0:	2360      	movs	r3, #96	; 0x60
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f8:	2300      	movs	r3, #0
 80014fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014fc:	2300      	movs	r3, #0
 80014fe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001500:	2300      	movs	r3, #0
 8001502:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001504:	2300      	movs	r3, #0
 8001506:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001508:	2300      	movs	r3, #0
 800150a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800150c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001510:	2200      	movs	r2, #0
 8001512:	4619      	mov	r1, r3
 8001514:	4813      	ldr	r0, [pc, #76]	; (8001564 <MX_TIM8_Init+0x138>)
 8001516:	f002 fb31 	bl	8003b7c <HAL_TIM_PWM_ConfigChannel>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001520:	f000 f89e 	bl	8001660 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001528:	2300      	movs	r3, #0
 800152a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001538:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800153c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800153e:	2300      	movs	r3, #0
 8001540:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	4619      	mov	r1, r3
 8001546:	4807      	ldr	r0, [pc, #28]	; (8001564 <MX_TIM8_Init+0x138>)
 8001548:	f003 f82e 	bl	80045a8 <HAL_TIMEx_ConfigBreakDeadTime>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 8001552:	f000 f885 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001556:	4803      	ldr	r0, [pc, #12]	; (8001564 <MX_TIM8_Init+0x138>)
 8001558:	f000 f934 	bl	80017c4 <HAL_TIM_MspPostInit>

}
 800155c:	bf00      	nop
 800155e:	3758      	adds	r7, #88	; 0x58
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	2000028c 	.word	0x2000028c
 8001568:	40010400 	.word	0x40010400

0800156c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001570:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <MX_USART2_UART_Init+0x4c>)
 8001572:	4a12      	ldr	r2, [pc, #72]	; (80015bc <MX_USART2_UART_Init+0x50>)
 8001574:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <MX_USART2_UART_Init+0x4c>)
 8001578:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800157c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <MX_USART2_UART_Init+0x4c>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <MX_USART2_UART_Init+0x4c>)
 8001586:	2200      	movs	r2, #0
 8001588:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <MX_USART2_UART_Init+0x4c>)
 800158c:	2200      	movs	r2, #0
 800158e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001590:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <MX_USART2_UART_Init+0x4c>)
 8001592:	220c      	movs	r2, #12
 8001594:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001596:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <MX_USART2_UART_Init+0x4c>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <MX_USART2_UART_Init+0x4c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015a2:	4805      	ldr	r0, [pc, #20]	; (80015b8 <MX_USART2_UART_Init+0x4c>)
 80015a4:	f003 f852 	bl	800464c <HAL_UART_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015ae:	f000 f857 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200002d4 	.word	0x200002d4
 80015bc:	40004400 	.word	0x40004400

080015c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b088      	sub	sp, #32
 80015c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c6:	f107 030c 	add.w	r3, r7, #12
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
 80015d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <MX_GPIO_Init+0x98>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a1e      	ldr	r2, [pc, #120]	; (8001658 <MX_GPIO_Init+0x98>)
 80015e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <MX_GPIO_Init+0x98>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	607b      	str	r3, [r7, #4]
 80015f6:	4b18      	ldr	r3, [pc, #96]	; (8001658 <MX_GPIO_Init+0x98>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	4a17      	ldr	r2, [pc, #92]	; (8001658 <MX_GPIO_Init+0x98>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6313      	str	r3, [r2, #48]	; 0x30
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <MX_GPIO_Init+0x98>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	603b      	str	r3, [r7, #0]
 8001612:	4b11      	ldr	r3, [pc, #68]	; (8001658 <MX_GPIO_Init+0x98>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a10      	ldr	r2, [pc, #64]	; (8001658 <MX_GPIO_Init+0x98>)
 8001618:	f043 0304 	orr.w	r3, r3, #4
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <MX_GPIO_Init+0x98>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0304 	and.w	r3, r3, #4
 8001626:	603b      	str	r3, [r7, #0]
 8001628:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800162a:	2200      	movs	r2, #0
 800162c:	2120      	movs	r1, #32
 800162e:	480b      	ldr	r0, [pc, #44]	; (800165c <MX_GPIO_Init+0x9c>)
 8001630:	f001 fac8 	bl	8002bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001634:	2320      	movs	r3, #32
 8001636:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001638:	2301      	movs	r3, #1
 800163a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001640:	2302      	movs	r3, #2
 8001642:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001644:	f107 030c 	add.w	r3, r7, #12
 8001648:	4619      	mov	r1, r3
 800164a:	4804      	ldr	r0, [pc, #16]	; (800165c <MX_GPIO_Init+0x9c>)
 800164c:	f001 f926 	bl	800289c <HAL_GPIO_Init>

}
 8001650:	bf00      	nop
 8001652:	3720      	adds	r7, #32
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40023800 	.word	0x40023800
 800165c:	40020000 	.word	0x40020000

08001660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001664:	b672      	cpsid	i
}
 8001666:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001668:	e7fe      	b.n	8001668 <Error_Handler+0x8>
	...

0800166c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	607b      	str	r3, [r7, #4]
 8001676:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <HAL_MspInit+0x4c>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	4a0f      	ldr	r2, [pc, #60]	; (80016b8 <HAL_MspInit+0x4c>)
 800167c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001680:	6453      	str	r3, [r2, #68]	; 0x44
 8001682:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <HAL_MspInit+0x4c>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	603b      	str	r3, [r7, #0]
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_MspInit+0x4c>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	4a08      	ldr	r2, [pc, #32]	; (80016b8 <HAL_MspInit+0x4c>)
 8001698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800169c:	6413      	str	r3, [r2, #64]	; 0x40
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <HAL_MspInit+0x4c>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	40023800 	.word	0x40023800

080016bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08a      	sub	sp, #40	; 0x28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a1b      	ldr	r2, [pc, #108]	; (8001748 <HAL_ADC_MspInit+0x8c>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d12f      	bne.n	800173e <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
 80016e2:	4b1a      	ldr	r3, [pc, #104]	; (800174c <HAL_ADC_MspInit+0x90>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	4a19      	ldr	r2, [pc, #100]	; (800174c <HAL_ADC_MspInit+0x90>)
 80016e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ec:	6453      	str	r3, [r2, #68]	; 0x44
 80016ee:	4b17      	ldr	r3, [pc, #92]	; (800174c <HAL_ADC_MspInit+0x90>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	4b13      	ldr	r3, [pc, #76]	; (800174c <HAL_ADC_MspInit+0x90>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	4a12      	ldr	r2, [pc, #72]	; (800174c <HAL_ADC_MspInit+0x90>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	6313      	str	r3, [r2, #48]	; 0x30
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <HAL_ADC_MspInit+0x90>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001716:	2301      	movs	r3, #1
 8001718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800171a:	2303      	movs	r3, #3
 800171c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	4619      	mov	r1, r3
 8001728:	4809      	ldr	r0, [pc, #36]	; (8001750 <HAL_ADC_MspInit+0x94>)
 800172a:	f001 f8b7 	bl	800289c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2100      	movs	r1, #0
 8001732:	2012      	movs	r0, #18
 8001734:	f000 ffe9 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001738:	2012      	movs	r0, #18
 800173a:	f001 f802 	bl	8002742 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800173e:	bf00      	nop
 8001740:	3728      	adds	r7, #40	; 0x28
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40012000 	.word	0x40012000
 800174c:	40023800 	.word	0x40023800
 8001750:	40020000 	.word	0x40020000

08001754 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a15      	ldr	r2, [pc, #84]	; (80017b8 <HAL_TIM_Base_MspInit+0x64>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d10e      	bne.n	8001784 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	4b14      	ldr	r3, [pc, #80]	; (80017bc <HAL_TIM_Base_MspInit+0x68>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	4a13      	ldr	r2, [pc, #76]	; (80017bc <HAL_TIM_Base_MspInit+0x68>)
 8001770:	f043 0302 	orr.w	r3, r3, #2
 8001774:	6413      	str	r3, [r2, #64]	; 0x40
 8001776:	4b11      	ldr	r3, [pc, #68]	; (80017bc <HAL_TIM_Base_MspInit+0x68>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001782:	e012      	b.n	80017aa <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM8)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a0d      	ldr	r2, [pc, #52]	; (80017c0 <HAL_TIM_Base_MspInit+0x6c>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d10d      	bne.n	80017aa <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <HAL_TIM_Base_MspInit+0x68>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001796:	4a09      	ldr	r2, [pc, #36]	; (80017bc <HAL_TIM_Base_MspInit+0x68>)
 8001798:	f043 0302 	orr.w	r3, r3, #2
 800179c:	6453      	str	r3, [r2, #68]	; 0x44
 800179e:	4b07      	ldr	r3, [pc, #28]	; (80017bc <HAL_TIM_Base_MspInit+0x68>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
}
 80017aa:	bf00      	nop
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40000400 	.word	0x40000400
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40010400 	.word	0x40010400

080017c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b088      	sub	sp, #32
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 030c 	add.w	r3, r7, #12
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a12      	ldr	r2, [pc, #72]	; (800182c <HAL_TIM_MspPostInit+0x68>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d11d      	bne.n	8001822 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	4b11      	ldr	r3, [pc, #68]	; (8001830 <HAL_TIM_MspPostInit+0x6c>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a10      	ldr	r2, [pc, #64]	; (8001830 <HAL_TIM_MspPostInit+0x6c>)
 80017f0:	f043 0304 	orr.w	r3, r3, #4
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <HAL_TIM_MspPostInit+0x6c>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001802:	2340      	movs	r3, #64	; 0x40
 8001804:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180e:	2300      	movs	r3, #0
 8001810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001812:	2303      	movs	r3, #3
 8001814:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001816:	f107 030c 	add.w	r3, r7, #12
 800181a:	4619      	mov	r1, r3
 800181c:	4805      	ldr	r0, [pc, #20]	; (8001834 <HAL_TIM_MspPostInit+0x70>)
 800181e:	f001 f83d 	bl	800289c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001822:	bf00      	nop
 8001824:	3720      	adds	r7, #32
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40010400 	.word	0x40010400
 8001830:	40023800 	.word	0x40023800
 8001834:	40020800 	.word	0x40020800

08001838 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08a      	sub	sp, #40	; 0x28
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a1d      	ldr	r2, [pc, #116]	; (80018cc <HAL_UART_MspInit+0x94>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d133      	bne.n	80018c2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	4b1c      	ldr	r3, [pc, #112]	; (80018d0 <HAL_UART_MspInit+0x98>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	4a1b      	ldr	r2, [pc, #108]	; (80018d0 <HAL_UART_MspInit+0x98>)
 8001864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001868:	6413      	str	r3, [r2, #64]	; 0x40
 800186a:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <HAL_UART_MspInit+0x98>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <HAL_UART_MspInit+0x98>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a14      	ldr	r2, [pc, #80]	; (80018d0 <HAL_UART_MspInit+0x98>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <HAL_UART_MspInit+0x98>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001892:	230c      	movs	r3, #12
 8001894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001896:	2302      	movs	r3, #2
 8001898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189e:	2303      	movs	r3, #3
 80018a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018a2:	2307      	movs	r3, #7
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	4619      	mov	r1, r3
 80018ac:	4809      	ldr	r0, [pc, #36]	; (80018d4 <HAL_UART_MspInit+0x9c>)
 80018ae:	f000 fff5 	bl	800289c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2100      	movs	r1, #0
 80018b6:	2026      	movs	r0, #38	; 0x26
 80018b8:	f000 ff27 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018bc:	2026      	movs	r0, #38	; 0x26
 80018be:	f000 ff40 	bl	8002742 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018c2:	bf00      	nop
 80018c4:	3728      	adds	r7, #40	; 0x28
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40004400 	.word	0x40004400
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40020000 	.word	0x40020000

080018d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018dc:	e7fe      	b.n	80018dc <NMI_Handler+0x4>

080018de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018e2:	e7fe      	b.n	80018e2 <HardFault_Handler+0x4>

080018e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <MemManage_Handler+0x4>

080018ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ee:	e7fe      	b.n	80018ee <BusFault_Handler+0x4>

080018f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f4:	e7fe      	b.n	80018f4 <UsageFault_Handler+0x4>

080018f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001924:	f000 f96a 	bl	8001bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}

0800192c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001930:	4802      	ldr	r0, [pc, #8]	; (800193c <ADC_IRQHandler+0x10>)
 8001932:	f000 faa5 	bl	8001e80 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	200001fc 	.word	0x200001fc

08001940 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001944:	4802      	ldr	r0, [pc, #8]	; (8001950 <USART2_IRQHandler+0x10>)
 8001946:	f002 ff91 	bl	800486c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	200002d4 	.word	0x200002d4

08001954 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
	return 1;
 8001958:	2301      	movs	r3, #1
}
 800195a:	4618      	mov	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <_kill>:

int _kill(int pid, int sig)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800196e:	f003 fee9 	bl	8005744 <__errno>
 8001972:	4603      	mov	r3, r0
 8001974:	2216      	movs	r2, #22
 8001976:	601a      	str	r2, [r3, #0]
	return -1;
 8001978:	f04f 33ff 	mov.w	r3, #4294967295
}
 800197c:	4618      	mov	r0, r3
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <_exit>:

void _exit (int status)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800198c:	f04f 31ff 	mov.w	r1, #4294967295
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff ffe7 	bl	8001964 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001996:	e7fe      	b.n	8001996 <_exit+0x12>

08001998 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	e00a      	b.n	80019c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019aa:	f3af 8000 	nop.w
 80019ae:	4601      	mov	r1, r0
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	60ba      	str	r2, [r7, #8]
 80019b6:	b2ca      	uxtb	r2, r1
 80019b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	3301      	adds	r3, #1
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	dbf0      	blt.n	80019aa <_read+0x12>
	}

return len;
 80019c8:	687b      	ldr	r3, [r7, #4]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b086      	sub	sp, #24
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	60f8      	str	r0, [r7, #12]
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	e009      	b.n	80019f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	1c5a      	adds	r2, r3, #1
 80019e8:	60ba      	str	r2, [r7, #8]
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	3301      	adds	r3, #1
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	dbf1      	blt.n	80019e4 <_write+0x12>
	}
	return len;
 8001a00:	687b      	ldr	r3, [r7, #4]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <_close>:

int _close(int file)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
	return -1;
 8001a12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a32:	605a      	str	r2, [r3, #4]
	return 0;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <_isatty>:

int _isatty(int file)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
	return 1;
 8001a4a:	2301      	movs	r3, #1
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
	return 0;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
	...

08001a74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a7c:	4a14      	ldr	r2, [pc, #80]	; (8001ad0 <_sbrk+0x5c>)
 8001a7e:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <_sbrk+0x60>)
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a88:	4b13      	ldr	r3, [pc, #76]	; (8001ad8 <_sbrk+0x64>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d102      	bne.n	8001a96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a90:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <_sbrk+0x64>)
 8001a92:	4a12      	ldr	r2, [pc, #72]	; (8001adc <_sbrk+0x68>)
 8001a94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a96:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <_sbrk+0x64>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d207      	bcs.n	8001ab4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aa4:	f003 fe4e 	bl	8005744 <__errno>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	220c      	movs	r2, #12
 8001aac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aae:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab2:	e009      	b.n	8001ac8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ab4:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <_sbrk+0x64>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aba:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <_sbrk+0x64>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	4a05      	ldr	r2, [pc, #20]	; (8001ad8 <_sbrk+0x64>)
 8001ac4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3718      	adds	r7, #24
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20020000 	.word	0x20020000
 8001ad4:	00000400 	.word	0x00000400
 8001ad8:	20000334 	.word	0x20000334
 8001adc:	20000350 	.word	0x20000350

08001ae0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <SystemInit+0x20>)
 8001ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aea:	4a05      	ldr	r2, [pc, #20]	; (8001b00 <SystemInit+0x20>)
 8001aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001af0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b08:	480d      	ldr	r0, [pc, #52]	; (8001b40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b0a:	490e      	ldr	r1, [pc, #56]	; (8001b44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b0c:	4a0e      	ldr	r2, [pc, #56]	; (8001b48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b10:	e002      	b.n	8001b18 <LoopCopyDataInit>

08001b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b16:	3304      	adds	r3, #4

08001b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b1c:	d3f9      	bcc.n	8001b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b1e:	4a0b      	ldr	r2, [pc, #44]	; (8001b4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b20:	4c0b      	ldr	r4, [pc, #44]	; (8001b50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b24:	e001      	b.n	8001b2a <LoopFillZerobss>

08001b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b28:	3204      	adds	r2, #4

08001b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b2c:	d3fb      	bcc.n	8001b26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b2e:	f7ff ffd7 	bl	8001ae0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b32:	f003 fe0d 	bl	8005750 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b36:	f7ff fb05 	bl	8001144 <main>
  bx  lr    
 8001b3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b44:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001b48:	0800899c 	.word	0x0800899c
  ldr r2, =_sbss
 8001b4c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001b50:	2000034c 	.word	0x2000034c

08001b54 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b54:	e7fe      	b.n	8001b54 <CAN1_RX0_IRQHandler>
	...

08001b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b5c:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <HAL_Init+0x40>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a0d      	ldr	r2, [pc, #52]	; (8001b98 <HAL_Init+0x40>)
 8001b62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b68:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <HAL_Init+0x40>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a0a      	ldr	r2, [pc, #40]	; (8001b98 <HAL_Init+0x40>)
 8001b6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b74:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <HAL_Init+0x40>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a07      	ldr	r2, [pc, #28]	; (8001b98 <HAL_Init+0x40>)
 8001b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b80:	2003      	movs	r0, #3
 8001b82:	f000 fdb7 	bl	80026f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b86:	200f      	movs	r0, #15
 8001b88:	f000 f808 	bl	8001b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b8c:	f7ff fd6e 	bl	800166c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40023c00 	.word	0x40023c00

08001b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ba4:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <HAL_InitTick+0x54>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <HAL_InitTick+0x58>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	4619      	mov	r1, r3
 8001bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f000 fdcf 	bl	800275e <HAL_SYSTICK_Config>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e00e      	b.n	8001be8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b0f      	cmp	r3, #15
 8001bce:	d80a      	bhi.n	8001be6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd8:	f000 fd97 	bl	800270a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bdc:	4a06      	ldr	r2, [pc, #24]	; (8001bf8 <HAL_InitTick+0x5c>)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
 8001be4:	e000      	b.n	8001be8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20000000 	.word	0x20000000
 8001bf4:	20000008 	.word	0x20000008
 8001bf8:	20000004 	.word	0x20000004

08001bfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c00:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <HAL_IncTick+0x20>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <HAL_IncTick+0x24>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	4a04      	ldr	r2, [pc, #16]	; (8001c20 <HAL_IncTick+0x24>)
 8001c0e:	6013      	str	r3, [r2, #0]
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	20000008 	.word	0x20000008
 8001c20:	20000338 	.word	0x20000338

08001c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return uwTick;
 8001c28:	4b03      	ldr	r3, [pc, #12]	; (8001c38 <HAL_GetTick+0x14>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	20000338 	.word	0x20000338

08001c3c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c44:	2300      	movs	r3, #0
 8001c46:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e033      	b.n	8001cba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d109      	bne.n	8001c6e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff fd2e 	bl	80016bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	f003 0310 	and.w	r3, r3, #16
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d118      	bne.n	8001cac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c82:	f023 0302 	bic.w	r3, r3, #2
 8001c86:	f043 0202 	orr.w	r2, r3, #2
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 fb5a 	bl	8002348 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	f023 0303 	bic.w	r3, r3, #3
 8001ca2:	f043 0201 	orr.w	r2, r3, #1
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	641a      	str	r2, [r3, #64]	; 0x40
 8001caa:	e001      	b.n	8001cb0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
	...

08001cc4 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d101      	bne.n	8001cde <HAL_ADC_Start_IT+0x1a>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e0bd      	b.n	8001e5a <HAL_ADC_Start_IT+0x196>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d018      	beq.n	8001d26 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	689a      	ldr	r2, [r3, #8]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f042 0201 	orr.w	r2, r2, #1
 8001d02:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d04:	4b58      	ldr	r3, [pc, #352]	; (8001e68 <HAL_ADC_Start_IT+0x1a4>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a58      	ldr	r2, [pc, #352]	; (8001e6c <HAL_ADC_Start_IT+0x1a8>)
 8001d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0e:	0c9a      	lsrs	r2, r3, #18
 8001d10:	4613      	mov	r3, r2
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4413      	add	r3, r2
 8001d16:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d18:	e002      	b.n	8001d20 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f9      	bne.n	8001d1a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	f040 8085 	bne.w	8001e40 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d3e:	f023 0301 	bic.w	r3, r3, #1
 8001d42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d007      	beq.n	8001d68 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d60:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d74:	d106      	bne.n	8001d84 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7a:	f023 0206 	bic.w	r2, r3, #6
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	645a      	str	r2, [r3, #68]	; 0x44
 8001d82:	e002      	b.n	8001d8a <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d92:	4b37      	ldr	r3, [pc, #220]	; (8001e70 <HAL_ADC_Start_IT+0x1ac>)
 8001d94:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001d9e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	6812      	ldr	r2, [r2, #0]
 8001daa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001dae:	f043 0320 	orr.w	r3, r3, #32
 8001db2:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 031f 	and.w	r3, r3, #31
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d12a      	bne.n	8001e16 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a2b      	ldr	r2, [pc, #172]	; (8001e74 <HAL_ADC_Start_IT+0x1b0>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d015      	beq.n	8001df6 <HAL_ADC_Start_IT+0x132>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a2a      	ldr	r2, [pc, #168]	; (8001e78 <HAL_ADC_Start_IT+0x1b4>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d105      	bne.n	8001de0 <HAL_ADC_Start_IT+0x11c>
 8001dd4:	4b26      	ldr	r3, [pc, #152]	; (8001e70 <HAL_ADC_Start_IT+0x1ac>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 031f 	and.w	r3, r3, #31
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d00a      	beq.n	8001df6 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a25      	ldr	r2, [pc, #148]	; (8001e7c <HAL_ADC_Start_IT+0x1b8>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d136      	bne.n	8001e58 <HAL_ADC_Start_IT+0x194>
 8001dea:	4b21      	ldr	r3, [pc, #132]	; (8001e70 <HAL_ADC_Start_IT+0x1ac>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f003 0310 	and.w	r3, r3, #16
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d130      	bne.n	8001e58 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d129      	bne.n	8001e58 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	e020      	b.n	8001e58 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a16      	ldr	r2, [pc, #88]	; (8001e74 <HAL_ADC_Start_IT+0x1b0>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d11b      	bne.n	8001e58 <HAL_ADC_Start_IT+0x194>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d114      	bne.n	8001e58 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e3c:	609a      	str	r2, [r3, #8]
 8001e3e:	e00b      	b.n	8001e58 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	f043 0210 	orr.w	r2, r3, #16
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e50:	f043 0201 	orr.w	r2, r3, #1
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	20000000 	.word	0x20000000
 8001e6c:	431bde83 	.word	0x431bde83
 8001e70:	40012300 	.word	0x40012300
 8001e74:	40012000 	.word	0x40012000
 8001e78:	40012100 	.word	0x40012100
 8001e7c:	40012200 	.word	0x40012200

08001e80 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	f003 0320 	and.w	r3, r3, #32
 8001eae:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d049      	beq.n	8001f4a <HAL_ADC_IRQHandler+0xca>
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d046      	beq.n	8001f4a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	f003 0310 	and.w	r3, r3, #16
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d105      	bne.n	8001ed4 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ecc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d12b      	bne.n	8001f3a <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d127      	bne.n	8001f3a <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d006      	beq.n	8001f06 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d119      	bne.n	8001f3a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 0220 	bic.w	r2, r2, #32
 8001f14:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d105      	bne.n	8001f3a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	f043 0201 	orr.w	r2, r3, #1
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7ff f8c8 	bl	80010d0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f06f 0212 	mvn.w	r2, #18
 8001f48:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f58:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d057      	beq.n	8002010 <HAL_ADC_IRQHandler+0x190>
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d054      	beq.n	8002010 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f003 0310 	and.w	r3, r3, #16
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d105      	bne.n	8001f7e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d139      	bne.n	8002000 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f92:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d006      	beq.n	8001fa8 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d12b      	bne.n	8002000 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d124      	bne.n	8002000 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d11d      	bne.n	8002000 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d119      	bne.n	8002000 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fda:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d105      	bne.n	8002000 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff8:	f043 0201 	orr.w	r2, r3, #1
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 fa9d 	bl	8002540 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f06f 020c 	mvn.w	r2, #12
 800200e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800201e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d017      	beq.n	8002056 <HAL_ADC_IRQHandler+0x1d6>
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d014      	beq.n	8002056 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b01      	cmp	r3, #1
 8002038:	d10d      	bne.n	8002056 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f837 	bl	80020ba <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f06f 0201 	mvn.w	r2, #1
 8002054:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f003 0320 	and.w	r3, r3, #32
 800205c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002064:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d015      	beq.n	8002098 <HAL_ADC_IRQHandler+0x218>
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d012      	beq.n	8002098 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	f043 0202 	orr.w	r2, r3, #2
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f06f 0220 	mvn.w	r2, #32
 8002086:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f820 	bl	80020ce <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f06f 0220 	mvn.w	r2, #32
 8002096:	601a      	str	r2, [r3, #0]
  }
}
 8002098:	bf00      	nop
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
	...

080020e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d101      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x1c>
 80020fc:	2302      	movs	r3, #2
 80020fe:	e113      	b.n	8002328 <HAL_ADC_ConfigChannel+0x244>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b09      	cmp	r3, #9
 800210e:	d925      	bls.n	800215c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68d9      	ldr	r1, [r3, #12]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	b29b      	uxth	r3, r3
 800211c:	461a      	mov	r2, r3
 800211e:	4613      	mov	r3, r2
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	4413      	add	r3, r2
 8002124:	3b1e      	subs	r3, #30
 8002126:	2207      	movs	r2, #7
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43da      	mvns	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	400a      	ands	r2, r1
 8002134:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68d9      	ldr	r1, [r3, #12]
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	b29b      	uxth	r3, r3
 8002146:	4618      	mov	r0, r3
 8002148:	4603      	mov	r3, r0
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	4403      	add	r3, r0
 800214e:	3b1e      	subs	r3, #30
 8002150:	409a      	lsls	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	60da      	str	r2, [r3, #12]
 800215a:	e022      	b.n	80021a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6919      	ldr	r1, [r3, #16]
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	b29b      	uxth	r3, r3
 8002168:	461a      	mov	r2, r3
 800216a:	4613      	mov	r3, r2
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	4413      	add	r3, r2
 8002170:	2207      	movs	r2, #7
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43da      	mvns	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	400a      	ands	r2, r1
 800217e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6919      	ldr	r1, [r3, #16]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	689a      	ldr	r2, [r3, #8]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	b29b      	uxth	r3, r3
 8002190:	4618      	mov	r0, r3
 8002192:	4603      	mov	r3, r0
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	4403      	add	r3, r0
 8002198:	409a      	lsls	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b06      	cmp	r3, #6
 80021a8:	d824      	bhi.n	80021f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	4613      	mov	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	3b05      	subs	r3, #5
 80021bc:	221f      	movs	r2, #31
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43da      	mvns	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	400a      	ands	r2, r1
 80021ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	4618      	mov	r0, r3
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	3b05      	subs	r3, #5
 80021e6:	fa00 f203 	lsl.w	r2, r0, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	635a      	str	r2, [r3, #52]	; 0x34
 80021f2:	e04c      	b.n	800228e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b0c      	cmp	r3, #12
 80021fa:	d824      	bhi.n	8002246 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	4613      	mov	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	3b23      	subs	r3, #35	; 0x23
 800220e:	221f      	movs	r2, #31
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	43da      	mvns	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	400a      	ands	r2, r1
 800221c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	b29b      	uxth	r3, r3
 800222a:	4618      	mov	r0, r3
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	4613      	mov	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	3b23      	subs	r3, #35	; 0x23
 8002238:	fa00 f203 	lsl.w	r2, r0, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	430a      	orrs	r2, r1
 8002242:	631a      	str	r2, [r3, #48]	; 0x30
 8002244:	e023      	b.n	800228e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	4613      	mov	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	3b41      	subs	r3, #65	; 0x41
 8002258:	221f      	movs	r2, #31
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43da      	mvns	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	400a      	ands	r2, r1
 8002266:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	b29b      	uxth	r3, r3
 8002274:	4618      	mov	r0, r3
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	3b41      	subs	r3, #65	; 0x41
 8002282:	fa00 f203 	lsl.w	r2, r0, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800228e:	4b29      	ldr	r3, [pc, #164]	; (8002334 <HAL_ADC_ConfigChannel+0x250>)
 8002290:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a28      	ldr	r2, [pc, #160]	; (8002338 <HAL_ADC_ConfigChannel+0x254>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d10f      	bne.n	80022bc <HAL_ADC_ConfigChannel+0x1d8>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b12      	cmp	r3, #18
 80022a2:	d10b      	bne.n	80022bc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a1d      	ldr	r2, [pc, #116]	; (8002338 <HAL_ADC_ConfigChannel+0x254>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d12b      	bne.n	800231e <HAL_ADC_ConfigChannel+0x23a>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a1c      	ldr	r2, [pc, #112]	; (800233c <HAL_ADC_ConfigChannel+0x258>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d003      	beq.n	80022d8 <HAL_ADC_ConfigChannel+0x1f4>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b11      	cmp	r3, #17
 80022d6:	d122      	bne.n	800231e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a11      	ldr	r2, [pc, #68]	; (800233c <HAL_ADC_ConfigChannel+0x258>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d111      	bne.n	800231e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022fa:	4b11      	ldr	r3, [pc, #68]	; (8002340 <HAL_ADC_ConfigChannel+0x25c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a11      	ldr	r2, [pc, #68]	; (8002344 <HAL_ADC_ConfigChannel+0x260>)
 8002300:	fba2 2303 	umull	r2, r3, r2, r3
 8002304:	0c9a      	lsrs	r2, r3, #18
 8002306:	4613      	mov	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002310:	e002      	b.n	8002318 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	3b01      	subs	r3, #1
 8002316:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1f9      	bne.n	8002312 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	40012300 	.word	0x40012300
 8002338:	40012000 	.word	0x40012000
 800233c:	10000012 	.word	0x10000012
 8002340:	20000000 	.word	0x20000000
 8002344:	431bde83 	.word	0x431bde83

08002348 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002350:	4b79      	ldr	r3, [pc, #484]	; (8002538 <ADC_Init+0x1f0>)
 8002352:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	431a      	orrs	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800237c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6859      	ldr	r1, [r3, #4]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	021a      	lsls	r2, r3, #8
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	430a      	orrs	r2, r1
 8002390:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80023a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6859      	ldr	r1, [r3, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6899      	ldr	r1, [r3, #8]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023da:	4a58      	ldr	r2, [pc, #352]	; (800253c <ADC_Init+0x1f4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d022      	beq.n	8002426 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6899      	ldr	r1, [r3, #8]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002410:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6899      	ldr	r1, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	430a      	orrs	r2, r1
 8002422:	609a      	str	r2, [r3, #8]
 8002424:	e00f      	b.n	8002446 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002434:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002444:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 0202 	bic.w	r2, r2, #2
 8002454:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6899      	ldr	r1, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	7e1b      	ldrb	r3, [r3, #24]
 8002460:	005a      	lsls	r2, r3, #1
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	430a      	orrs	r2, r1
 8002468:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d01b      	beq.n	80024ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002482:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002492:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6859      	ldr	r1, [r3, #4]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	3b01      	subs	r3, #1
 80024a0:	035a      	lsls	r2, r3, #13
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	605a      	str	r2, [r3, #4]
 80024aa:	e007      	b.n	80024bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80024ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	051a      	lsls	r2, r3, #20
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6899      	ldr	r1, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024fe:	025a      	lsls	r2, r3, #9
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	430a      	orrs	r2, r1
 8002506:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002516:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6899      	ldr	r1, [r3, #8]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	029a      	lsls	r2, r3, #10
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	430a      	orrs	r2, r1
 800252a:	609a      	str	r2, [r3, #8]
}
 800252c:	bf00      	nop
 800252e:	3714      	adds	r7, #20
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	40012300 	.word	0x40012300
 800253c:	0f000001 	.word	0x0f000001

08002540 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002564:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <__NVIC_SetPriorityGrouping+0x44>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002570:	4013      	ands	r3, r2
 8002572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800257c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002586:	4a04      	ldr	r2, [pc, #16]	; (8002598 <__NVIC_SetPriorityGrouping+0x44>)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	60d3      	str	r3, [r2, #12]
}
 800258c:	bf00      	nop
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025a0:	4b04      	ldr	r3, [pc, #16]	; (80025b4 <__NVIC_GetPriorityGrouping+0x18>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	0a1b      	lsrs	r3, r3, #8
 80025a6:	f003 0307 	and.w	r3, r3, #7
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000ed00 	.word	0xe000ed00

080025b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	db0b      	blt.n	80025e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ca:	79fb      	ldrb	r3, [r7, #7]
 80025cc:	f003 021f 	and.w	r2, r3, #31
 80025d0:	4907      	ldr	r1, [pc, #28]	; (80025f0 <__NVIC_EnableIRQ+0x38>)
 80025d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d6:	095b      	lsrs	r3, r3, #5
 80025d8:	2001      	movs	r0, #1
 80025da:	fa00 f202 	lsl.w	r2, r0, r2
 80025de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	e000e100 	.word	0xe000e100

080025f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	6039      	str	r1, [r7, #0]
 80025fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002604:	2b00      	cmp	r3, #0
 8002606:	db0a      	blt.n	800261e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	b2da      	uxtb	r2, r3
 800260c:	490c      	ldr	r1, [pc, #48]	; (8002640 <__NVIC_SetPriority+0x4c>)
 800260e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002612:	0112      	lsls	r2, r2, #4
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	440b      	add	r3, r1
 8002618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800261c:	e00a      	b.n	8002634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	b2da      	uxtb	r2, r3
 8002622:	4908      	ldr	r1, [pc, #32]	; (8002644 <__NVIC_SetPriority+0x50>)
 8002624:	79fb      	ldrb	r3, [r7, #7]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	3b04      	subs	r3, #4
 800262c:	0112      	lsls	r2, r2, #4
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	440b      	add	r3, r1
 8002632:	761a      	strb	r2, [r3, #24]
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000e100 	.word	0xe000e100
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002648:	b480      	push	{r7}
 800264a:	b089      	sub	sp, #36	; 0x24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f1c3 0307 	rsb	r3, r3, #7
 8002662:	2b04      	cmp	r3, #4
 8002664:	bf28      	it	cs
 8002666:	2304      	movcs	r3, #4
 8002668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3304      	adds	r3, #4
 800266e:	2b06      	cmp	r3, #6
 8002670:	d902      	bls.n	8002678 <NVIC_EncodePriority+0x30>
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3b03      	subs	r3, #3
 8002676:	e000      	b.n	800267a <NVIC_EncodePriority+0x32>
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800267c:	f04f 32ff 	mov.w	r2, #4294967295
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43da      	mvns	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	401a      	ands	r2, r3
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002690:	f04f 31ff 	mov.w	r1, #4294967295
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	fa01 f303 	lsl.w	r3, r1, r3
 800269a:	43d9      	mvns	r1, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a0:	4313      	orrs	r3, r2
         );
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3724      	adds	r7, #36	; 0x24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026c0:	d301      	bcc.n	80026c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026c2:	2301      	movs	r3, #1
 80026c4:	e00f      	b.n	80026e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026c6:	4a0a      	ldr	r2, [pc, #40]	; (80026f0 <SysTick_Config+0x40>)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ce:	210f      	movs	r1, #15
 80026d0:	f04f 30ff 	mov.w	r0, #4294967295
 80026d4:	f7ff ff8e 	bl	80025f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026d8:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <SysTick_Config+0x40>)
 80026da:	2200      	movs	r2, #0
 80026dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026de:	4b04      	ldr	r3, [pc, #16]	; (80026f0 <SysTick_Config+0x40>)
 80026e0:	2207      	movs	r2, #7
 80026e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	e000e010 	.word	0xe000e010

080026f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff ff29 	bl	8002554 <__NVIC_SetPriorityGrouping>
}
 8002702:	bf00      	nop
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800270a:	b580      	push	{r7, lr}
 800270c:	b086      	sub	sp, #24
 800270e:	af00      	add	r7, sp, #0
 8002710:	4603      	mov	r3, r0
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	607a      	str	r2, [r7, #4]
 8002716:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800271c:	f7ff ff3e 	bl	800259c <__NVIC_GetPriorityGrouping>
 8002720:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	68b9      	ldr	r1, [r7, #8]
 8002726:	6978      	ldr	r0, [r7, #20]
 8002728:	f7ff ff8e 	bl	8002648 <NVIC_EncodePriority>
 800272c:	4602      	mov	r2, r0
 800272e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002732:	4611      	mov	r1, r2
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff ff5d 	bl	80025f4 <__NVIC_SetPriority>
}
 800273a:	bf00      	nop
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b082      	sub	sp, #8
 8002746:	af00      	add	r7, sp, #0
 8002748:	4603      	mov	r3, r0
 800274a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800274c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff ff31 	bl	80025b8 <__NVIC_EnableIRQ>
}
 8002756:	bf00      	nop
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b082      	sub	sp, #8
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff ffa2 	bl	80026b0 <SysTick_Config>
 800276c:	4603      	mov	r3, r0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b084      	sub	sp, #16
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002782:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002784:	f7ff fa4e 	bl	8001c24 <HAL_GetTick>
 8002788:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d008      	beq.n	80027a8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2280      	movs	r2, #128	; 0x80
 800279a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e052      	b.n	800284e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0216 	bic.w	r2, r2, #22
 80027b6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	695a      	ldr	r2, [r3, #20]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027c6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d103      	bne.n	80027d8 <HAL_DMA_Abort+0x62>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d007      	beq.n	80027e8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0208 	bic.w	r2, r2, #8
 80027e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0201 	bic.w	r2, r2, #1
 80027f6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027f8:	e013      	b.n	8002822 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027fa:	f7ff fa13 	bl	8001c24 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b05      	cmp	r3, #5
 8002806:	d90c      	bls.n	8002822 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2220      	movs	r2, #32
 800280c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2203      	movs	r2, #3
 8002812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e015      	b.n	800284e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1e4      	bne.n	80027fa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002834:	223f      	movs	r2, #63	; 0x3f
 8002836:	409a      	lsls	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d004      	beq.n	8002874 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2280      	movs	r2, #128	; 0x80
 800286e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e00c      	b.n	800288e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2205      	movs	r2, #5
 8002878:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0201 	bic.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
	...

0800289c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800289c:	b480      	push	{r7}
 800289e:	b089      	sub	sp, #36	; 0x24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028b2:	2300      	movs	r3, #0
 80028b4:	61fb      	str	r3, [r7, #28]
 80028b6:	e165      	b.n	8002b84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028b8:	2201      	movs	r2, #1
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	4013      	ands	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	f040 8154 	bne.w	8002b7e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d005      	beq.n	80028ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d130      	bne.n	8002950 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	2203      	movs	r2, #3
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43db      	mvns	r3, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4013      	ands	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	68da      	ldr	r2, [r3, #12]
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4313      	orrs	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002924:	2201      	movs	r2, #1
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	43db      	mvns	r3, r3
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4013      	ands	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	091b      	lsrs	r3, r3, #4
 800293a:	f003 0201 	and.w	r2, r3, #1
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 0303 	and.w	r3, r3, #3
 8002958:	2b03      	cmp	r3, #3
 800295a:	d017      	beq.n	800298c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	2203      	movs	r2, #3
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4013      	ands	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4313      	orrs	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 0303 	and.w	r3, r3, #3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d123      	bne.n	80029e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	08da      	lsrs	r2, r3, #3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3208      	adds	r2, #8
 80029a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	220f      	movs	r2, #15
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4013      	ands	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	08da      	lsrs	r2, r3, #3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	3208      	adds	r2, #8
 80029da:	69b9      	ldr	r1, [r7, #24]
 80029dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	2203      	movs	r2, #3
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	43db      	mvns	r3, r3
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4013      	ands	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 0203 	and.w	r2, r3, #3
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 80ae 	beq.w	8002b7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	4b5d      	ldr	r3, [pc, #372]	; (8002b9c <HAL_GPIO_Init+0x300>)
 8002a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2a:	4a5c      	ldr	r2, [pc, #368]	; (8002b9c <HAL_GPIO_Init+0x300>)
 8002a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a30:	6453      	str	r3, [r2, #68]	; 0x44
 8002a32:	4b5a      	ldr	r3, [pc, #360]	; (8002b9c <HAL_GPIO_Init+0x300>)
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a3e:	4a58      	ldr	r2, [pc, #352]	; (8002ba0 <HAL_GPIO_Init+0x304>)
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	089b      	lsrs	r3, r3, #2
 8002a44:	3302      	adds	r3, #2
 8002a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	220f      	movs	r2, #15
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a4f      	ldr	r2, [pc, #316]	; (8002ba4 <HAL_GPIO_Init+0x308>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d025      	beq.n	8002ab6 <HAL_GPIO_Init+0x21a>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a4e      	ldr	r2, [pc, #312]	; (8002ba8 <HAL_GPIO_Init+0x30c>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d01f      	beq.n	8002ab2 <HAL_GPIO_Init+0x216>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a4d      	ldr	r2, [pc, #308]	; (8002bac <HAL_GPIO_Init+0x310>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d019      	beq.n	8002aae <HAL_GPIO_Init+0x212>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a4c      	ldr	r2, [pc, #304]	; (8002bb0 <HAL_GPIO_Init+0x314>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d013      	beq.n	8002aaa <HAL_GPIO_Init+0x20e>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a4b      	ldr	r2, [pc, #300]	; (8002bb4 <HAL_GPIO_Init+0x318>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d00d      	beq.n	8002aa6 <HAL_GPIO_Init+0x20a>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a4a      	ldr	r2, [pc, #296]	; (8002bb8 <HAL_GPIO_Init+0x31c>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d007      	beq.n	8002aa2 <HAL_GPIO_Init+0x206>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a49      	ldr	r2, [pc, #292]	; (8002bbc <HAL_GPIO_Init+0x320>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d101      	bne.n	8002a9e <HAL_GPIO_Init+0x202>
 8002a9a:	2306      	movs	r3, #6
 8002a9c:	e00c      	b.n	8002ab8 <HAL_GPIO_Init+0x21c>
 8002a9e:	2307      	movs	r3, #7
 8002aa0:	e00a      	b.n	8002ab8 <HAL_GPIO_Init+0x21c>
 8002aa2:	2305      	movs	r3, #5
 8002aa4:	e008      	b.n	8002ab8 <HAL_GPIO_Init+0x21c>
 8002aa6:	2304      	movs	r3, #4
 8002aa8:	e006      	b.n	8002ab8 <HAL_GPIO_Init+0x21c>
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e004      	b.n	8002ab8 <HAL_GPIO_Init+0x21c>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e002      	b.n	8002ab8 <HAL_GPIO_Init+0x21c>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <HAL_GPIO_Init+0x21c>
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	69fa      	ldr	r2, [r7, #28]
 8002aba:	f002 0203 	and.w	r2, r2, #3
 8002abe:	0092      	lsls	r2, r2, #2
 8002ac0:	4093      	lsls	r3, r2
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ac8:	4935      	ldr	r1, [pc, #212]	; (8002ba0 <HAL_GPIO_Init+0x304>)
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	089b      	lsrs	r3, r3, #2
 8002ace:	3302      	adds	r3, #2
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ad6:	4b3a      	ldr	r3, [pc, #232]	; (8002bc0 <HAL_GPIO_Init+0x324>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002afa:	4a31      	ldr	r2, [pc, #196]	; (8002bc0 <HAL_GPIO_Init+0x324>)
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b00:	4b2f      	ldr	r3, [pc, #188]	; (8002bc0 <HAL_GPIO_Init+0x324>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b24:	4a26      	ldr	r2, [pc, #152]	; (8002bc0 <HAL_GPIO_Init+0x324>)
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b2a:	4b25      	ldr	r3, [pc, #148]	; (8002bc0 <HAL_GPIO_Init+0x324>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	43db      	mvns	r3, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4013      	ands	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b4e:	4a1c      	ldr	r2, [pc, #112]	; (8002bc0 <HAL_GPIO_Init+0x324>)
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b54:	4b1a      	ldr	r3, [pc, #104]	; (8002bc0 <HAL_GPIO_Init+0x324>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4013      	ands	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b78:	4a11      	ldr	r2, [pc, #68]	; (8002bc0 <HAL_GPIO_Init+0x324>)
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	3301      	adds	r3, #1
 8002b82:	61fb      	str	r3, [r7, #28]
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	2b0f      	cmp	r3, #15
 8002b88:	f67f ae96 	bls.w	80028b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b8c:	bf00      	nop
 8002b8e:	bf00      	nop
 8002b90:	3724      	adds	r7, #36	; 0x24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	40013800 	.word	0x40013800
 8002ba4:	40020000 	.word	0x40020000
 8002ba8:	40020400 	.word	0x40020400
 8002bac:	40020800 	.word	0x40020800
 8002bb0:	40020c00 	.word	0x40020c00
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	40021400 	.word	0x40021400
 8002bbc:	40021800 	.word	0x40021800
 8002bc0:	40013c00 	.word	0x40013c00

08002bc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	807b      	strh	r3, [r7, #2]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bd4:	787b      	ldrb	r3, [r7, #1]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bda:	887a      	ldrh	r2, [r7, #2]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002be0:	e003      	b.n	8002bea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002be2:	887b      	ldrh	r3, [r7, #2]
 8002be4:	041a      	lsls	r2, r3, #16
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	619a      	str	r2, [r3, #24]
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b085      	sub	sp, #20
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
 8002bfe:	460b      	mov	r3, r1
 8002c00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c08:	887a      	ldrh	r2, [r7, #2]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	041a      	lsls	r2, r3, #16
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	43d9      	mvns	r1, r3
 8002c14:	887b      	ldrh	r3, [r7, #2]
 8002c16:	400b      	ands	r3, r1
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	619a      	str	r2, [r3, #24]
}
 8002c1e:	bf00      	nop
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
	...

08002c2c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	603b      	str	r3, [r7, #0]
 8002c3a:	4b20      	ldr	r3, [pc, #128]	; (8002cbc <HAL_PWREx_EnableOverDrive+0x90>)
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	4a1f      	ldr	r2, [pc, #124]	; (8002cbc <HAL_PWREx_EnableOverDrive+0x90>)
 8002c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c44:	6413      	str	r3, [r2, #64]	; 0x40
 8002c46:	4b1d      	ldr	r3, [pc, #116]	; (8002cbc <HAL_PWREx_EnableOverDrive+0x90>)
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4e:	603b      	str	r3, [r7, #0]
 8002c50:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002c52:	4b1b      	ldr	r3, [pc, #108]	; (8002cc0 <HAL_PWREx_EnableOverDrive+0x94>)
 8002c54:	2201      	movs	r2, #1
 8002c56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c58:	f7fe ffe4 	bl	8001c24 <HAL_GetTick>
 8002c5c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c5e:	e009      	b.n	8002c74 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c60:	f7fe ffe0 	bl	8001c24 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c6e:	d901      	bls.n	8002c74 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e01f      	b.n	8002cb4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c74:	4b13      	ldr	r3, [pc, #76]	; (8002cc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c80:	d1ee      	bne.n	8002c60 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c82:	4b11      	ldr	r3, [pc, #68]	; (8002cc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c84:	2201      	movs	r2, #1
 8002c86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c88:	f7fe ffcc 	bl	8001c24 <HAL_GetTick>
 8002c8c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c8e:	e009      	b.n	8002ca4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c90:	f7fe ffc8 	bl	8001c24 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c9e:	d901      	bls.n	8002ca4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e007      	b.n	8002cb4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ca4:	4b07      	ldr	r3, [pc, #28]	; (8002cc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cb0:	d1ee      	bne.n	8002c90 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	420e0040 	.word	0x420e0040
 8002cc4:	40007000 	.word	0x40007000
 8002cc8:	420e0044 	.word	0x420e0044

08002ccc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e0cc      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ce0:	4b68      	ldr	r3, [pc, #416]	; (8002e84 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 030f 	and.w	r3, r3, #15
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d90c      	bls.n	8002d08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cee:	4b65      	ldr	r3, [pc, #404]	; (8002e84 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf6:	4b63      	ldr	r3, [pc, #396]	; (8002e84 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d001      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e0b8      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d020      	beq.n	8002d56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d005      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d20:	4b59      	ldr	r3, [pc, #356]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	4a58      	ldr	r2, [pc, #352]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0308 	and.w	r3, r3, #8
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d005      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d38:	4b53      	ldr	r3, [pc, #332]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	4a52      	ldr	r2, [pc, #328]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d44:	4b50      	ldr	r3, [pc, #320]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	494d      	ldr	r1, [pc, #308]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d044      	beq.n	8002dec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d107      	bne.n	8002d7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6a:	4b47      	ldr	r3, [pc, #284]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d119      	bne.n	8002daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e07f      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d003      	beq.n	8002d8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d86:	2b03      	cmp	r3, #3
 8002d88:	d107      	bne.n	8002d9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d8a:	4b3f      	ldr	r3, [pc, #252]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d109      	bne.n	8002daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e06f      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d9a:	4b3b      	ldr	r3, [pc, #236]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e067      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002daa:	4b37      	ldr	r3, [pc, #220]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f023 0203 	bic.w	r2, r3, #3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	4934      	ldr	r1, [pc, #208]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dbc:	f7fe ff32 	bl	8001c24 <HAL_GetTick>
 8002dc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc2:	e00a      	b.n	8002dda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc4:	f7fe ff2e 	bl	8001c24 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e04f      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dda:	4b2b      	ldr	r3, [pc, #172]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 020c 	and.w	r2, r3, #12
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d1eb      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dec:	4b25      	ldr	r3, [pc, #148]	; (8002e84 <HAL_RCC_ClockConfig+0x1b8>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 030f 	and.w	r3, r3, #15
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d20c      	bcs.n	8002e14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dfa:	4b22      	ldr	r3, [pc, #136]	; (8002e84 <HAL_RCC_ClockConfig+0x1b8>)
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e02:	4b20      	ldr	r3, [pc, #128]	; (8002e84 <HAL_RCC_ClockConfig+0x1b8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d001      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e032      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d008      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e20:	4b19      	ldr	r3, [pc, #100]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	4916      	ldr	r1, [pc, #88]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0308 	and.w	r3, r3, #8
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d009      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e3e:	4b12      	ldr	r3, [pc, #72]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	490e      	ldr	r1, [pc, #56]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e52:	f000 f855 	bl	8002f00 <HAL_RCC_GetSysClockFreq>
 8002e56:	4602      	mov	r2, r0
 8002e58:	4b0b      	ldr	r3, [pc, #44]	; (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	091b      	lsrs	r3, r3, #4
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	490a      	ldr	r1, [pc, #40]	; (8002e8c <HAL_RCC_ClockConfig+0x1c0>)
 8002e64:	5ccb      	ldrb	r3, [r1, r3]
 8002e66:	fa22 f303 	lsr.w	r3, r2, r3
 8002e6a:	4a09      	ldr	r2, [pc, #36]	; (8002e90 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e6e:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <HAL_RCC_ClockConfig+0x1c8>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fe fe92 	bl	8001b9c <HAL_InitTick>

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40023c00 	.word	0x40023c00
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	08008548 	.word	0x08008548
 8002e90:	20000000 	.word	0x20000000
 8002e94:	20000004 	.word	0x20000004

08002e98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e9c:	4b03      	ldr	r3, [pc, #12]	; (8002eac <HAL_RCC_GetHCLKFreq+0x14>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	20000000 	.word	0x20000000

08002eb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002eb4:	f7ff fff0 	bl	8002e98 <HAL_RCC_GetHCLKFreq>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	4b05      	ldr	r3, [pc, #20]	; (8002ed0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	0a9b      	lsrs	r3, r3, #10
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	4903      	ldr	r1, [pc, #12]	; (8002ed4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ec6:	5ccb      	ldrb	r3, [r1, r3]
 8002ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	08008558 	.word	0x08008558

08002ed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002edc:	f7ff ffdc 	bl	8002e98 <HAL_RCC_GetHCLKFreq>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	0b5b      	lsrs	r3, r3, #13
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	4903      	ldr	r1, [pc, #12]	; (8002efc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eee:	5ccb      	ldrb	r3, [r1, r3]
 8002ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	08008558 	.word	0x08008558

08002f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f04:	b0ae      	sub	sp, #184	; 0xb8
 8002f06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f26:	4bcb      	ldr	r3, [pc, #812]	; (8003254 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 030c 	and.w	r3, r3, #12
 8002f2e:	2b0c      	cmp	r3, #12
 8002f30:	f200 8206 	bhi.w	8003340 <HAL_RCC_GetSysClockFreq+0x440>
 8002f34:	a201      	add	r2, pc, #4	; (adr r2, 8002f3c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f3a:	bf00      	nop
 8002f3c:	08002f71 	.word	0x08002f71
 8002f40:	08003341 	.word	0x08003341
 8002f44:	08003341 	.word	0x08003341
 8002f48:	08003341 	.word	0x08003341
 8002f4c:	08002f79 	.word	0x08002f79
 8002f50:	08003341 	.word	0x08003341
 8002f54:	08003341 	.word	0x08003341
 8002f58:	08003341 	.word	0x08003341
 8002f5c:	08002f81 	.word	0x08002f81
 8002f60:	08003341 	.word	0x08003341
 8002f64:	08003341 	.word	0x08003341
 8002f68:	08003341 	.word	0x08003341
 8002f6c:	08003171 	.word	0x08003171
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f70:	4bb9      	ldr	r3, [pc, #740]	; (8003258 <HAL_RCC_GetSysClockFreq+0x358>)
 8002f72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002f76:	e1e7      	b.n	8003348 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f78:	4bb8      	ldr	r3, [pc, #736]	; (800325c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002f7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f7e:	e1e3      	b.n	8003348 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f80:	4bb4      	ldr	r3, [pc, #720]	; (8003254 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f8c:	4bb1      	ldr	r3, [pc, #708]	; (8003254 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d071      	beq.n	800307c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f98:	4bae      	ldr	r3, [pc, #696]	; (8003254 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	099b      	lsrs	r3, r3, #6
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002fa4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002fa8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fb0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002fba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002fbe:	4622      	mov	r2, r4
 8002fc0:	462b      	mov	r3, r5
 8002fc2:	f04f 0000 	mov.w	r0, #0
 8002fc6:	f04f 0100 	mov.w	r1, #0
 8002fca:	0159      	lsls	r1, r3, #5
 8002fcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fd0:	0150      	lsls	r0, r2, #5
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	4621      	mov	r1, r4
 8002fd8:	1a51      	subs	r1, r2, r1
 8002fda:	6439      	str	r1, [r7, #64]	; 0x40
 8002fdc:	4629      	mov	r1, r5
 8002fde:	eb63 0301 	sbc.w	r3, r3, r1
 8002fe2:	647b      	str	r3, [r7, #68]	; 0x44
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	f04f 0300 	mov.w	r3, #0
 8002fec:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002ff0:	4649      	mov	r1, r9
 8002ff2:	018b      	lsls	r3, r1, #6
 8002ff4:	4641      	mov	r1, r8
 8002ff6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ffa:	4641      	mov	r1, r8
 8002ffc:	018a      	lsls	r2, r1, #6
 8002ffe:	4641      	mov	r1, r8
 8003000:	1a51      	subs	r1, r2, r1
 8003002:	63b9      	str	r1, [r7, #56]	; 0x38
 8003004:	4649      	mov	r1, r9
 8003006:	eb63 0301 	sbc.w	r3, r3, r1
 800300a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	f04f 0300 	mov.w	r3, #0
 8003014:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003018:	4649      	mov	r1, r9
 800301a:	00cb      	lsls	r3, r1, #3
 800301c:	4641      	mov	r1, r8
 800301e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003022:	4641      	mov	r1, r8
 8003024:	00ca      	lsls	r2, r1, #3
 8003026:	4610      	mov	r0, r2
 8003028:	4619      	mov	r1, r3
 800302a:	4603      	mov	r3, r0
 800302c:	4622      	mov	r2, r4
 800302e:	189b      	adds	r3, r3, r2
 8003030:	633b      	str	r3, [r7, #48]	; 0x30
 8003032:	462b      	mov	r3, r5
 8003034:	460a      	mov	r2, r1
 8003036:	eb42 0303 	adc.w	r3, r2, r3
 800303a:	637b      	str	r3, [r7, #52]	; 0x34
 800303c:	f04f 0200 	mov.w	r2, #0
 8003040:	f04f 0300 	mov.w	r3, #0
 8003044:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003048:	4629      	mov	r1, r5
 800304a:	024b      	lsls	r3, r1, #9
 800304c:	4621      	mov	r1, r4
 800304e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003052:	4621      	mov	r1, r4
 8003054:	024a      	lsls	r2, r1, #9
 8003056:	4610      	mov	r0, r2
 8003058:	4619      	mov	r1, r3
 800305a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800305e:	2200      	movs	r2, #0
 8003060:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003064:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003068:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800306c:	f7fd fdee 	bl	8000c4c <__aeabi_uldivmod>
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	4613      	mov	r3, r2
 8003076:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800307a:	e067      	b.n	800314c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800307c:	4b75      	ldr	r3, [pc, #468]	; (8003254 <HAL_RCC_GetSysClockFreq+0x354>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	099b      	lsrs	r3, r3, #6
 8003082:	2200      	movs	r2, #0
 8003084:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003088:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800308c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003094:	67bb      	str	r3, [r7, #120]	; 0x78
 8003096:	2300      	movs	r3, #0
 8003098:	67fb      	str	r3, [r7, #124]	; 0x7c
 800309a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800309e:	4622      	mov	r2, r4
 80030a0:	462b      	mov	r3, r5
 80030a2:	f04f 0000 	mov.w	r0, #0
 80030a6:	f04f 0100 	mov.w	r1, #0
 80030aa:	0159      	lsls	r1, r3, #5
 80030ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030b0:	0150      	lsls	r0, r2, #5
 80030b2:	4602      	mov	r2, r0
 80030b4:	460b      	mov	r3, r1
 80030b6:	4621      	mov	r1, r4
 80030b8:	1a51      	subs	r1, r2, r1
 80030ba:	62b9      	str	r1, [r7, #40]	; 0x28
 80030bc:	4629      	mov	r1, r5
 80030be:	eb63 0301 	sbc.w	r3, r3, r1
 80030c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	f04f 0300 	mov.w	r3, #0
 80030cc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80030d0:	4649      	mov	r1, r9
 80030d2:	018b      	lsls	r3, r1, #6
 80030d4:	4641      	mov	r1, r8
 80030d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030da:	4641      	mov	r1, r8
 80030dc:	018a      	lsls	r2, r1, #6
 80030de:	4641      	mov	r1, r8
 80030e0:	ebb2 0a01 	subs.w	sl, r2, r1
 80030e4:	4649      	mov	r1, r9
 80030e6:	eb63 0b01 	sbc.w	fp, r3, r1
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	f04f 0300 	mov.w	r3, #0
 80030f2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80030f6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80030fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030fe:	4692      	mov	sl, r2
 8003100:	469b      	mov	fp, r3
 8003102:	4623      	mov	r3, r4
 8003104:	eb1a 0303 	adds.w	r3, sl, r3
 8003108:	623b      	str	r3, [r7, #32]
 800310a:	462b      	mov	r3, r5
 800310c:	eb4b 0303 	adc.w	r3, fp, r3
 8003110:	627b      	str	r3, [r7, #36]	; 0x24
 8003112:	f04f 0200 	mov.w	r2, #0
 8003116:	f04f 0300 	mov.w	r3, #0
 800311a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800311e:	4629      	mov	r1, r5
 8003120:	028b      	lsls	r3, r1, #10
 8003122:	4621      	mov	r1, r4
 8003124:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003128:	4621      	mov	r1, r4
 800312a:	028a      	lsls	r2, r1, #10
 800312c:	4610      	mov	r0, r2
 800312e:	4619      	mov	r1, r3
 8003130:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003134:	2200      	movs	r2, #0
 8003136:	673b      	str	r3, [r7, #112]	; 0x70
 8003138:	677a      	str	r2, [r7, #116]	; 0x74
 800313a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800313e:	f7fd fd85 	bl	8000c4c <__aeabi_uldivmod>
 8003142:	4602      	mov	r2, r0
 8003144:	460b      	mov	r3, r1
 8003146:	4613      	mov	r3, r2
 8003148:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800314c:	4b41      	ldr	r3, [pc, #260]	; (8003254 <HAL_RCC_GetSysClockFreq+0x354>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	0c1b      	lsrs	r3, r3, #16
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	3301      	adds	r3, #1
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800315e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003162:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003166:	fbb2 f3f3 	udiv	r3, r2, r3
 800316a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800316e:	e0eb      	b.n	8003348 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003170:	4b38      	ldr	r3, [pc, #224]	; (8003254 <HAL_RCC_GetSysClockFreq+0x354>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003178:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800317c:	4b35      	ldr	r3, [pc, #212]	; (8003254 <HAL_RCC_GetSysClockFreq+0x354>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d06b      	beq.n	8003260 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003188:	4b32      	ldr	r3, [pc, #200]	; (8003254 <HAL_RCC_GetSysClockFreq+0x354>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	099b      	lsrs	r3, r3, #6
 800318e:	2200      	movs	r2, #0
 8003190:	66bb      	str	r3, [r7, #104]	; 0x68
 8003192:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003194:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800319a:	663b      	str	r3, [r7, #96]	; 0x60
 800319c:	2300      	movs	r3, #0
 800319e:	667b      	str	r3, [r7, #100]	; 0x64
 80031a0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80031a4:	4622      	mov	r2, r4
 80031a6:	462b      	mov	r3, r5
 80031a8:	f04f 0000 	mov.w	r0, #0
 80031ac:	f04f 0100 	mov.w	r1, #0
 80031b0:	0159      	lsls	r1, r3, #5
 80031b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031b6:	0150      	lsls	r0, r2, #5
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	4621      	mov	r1, r4
 80031be:	1a51      	subs	r1, r2, r1
 80031c0:	61b9      	str	r1, [r7, #24]
 80031c2:	4629      	mov	r1, r5
 80031c4:	eb63 0301 	sbc.w	r3, r3, r1
 80031c8:	61fb      	str	r3, [r7, #28]
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	f04f 0300 	mov.w	r3, #0
 80031d2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80031d6:	4659      	mov	r1, fp
 80031d8:	018b      	lsls	r3, r1, #6
 80031da:	4651      	mov	r1, sl
 80031dc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031e0:	4651      	mov	r1, sl
 80031e2:	018a      	lsls	r2, r1, #6
 80031e4:	4651      	mov	r1, sl
 80031e6:	ebb2 0801 	subs.w	r8, r2, r1
 80031ea:	4659      	mov	r1, fp
 80031ec:	eb63 0901 	sbc.w	r9, r3, r1
 80031f0:	f04f 0200 	mov.w	r2, #0
 80031f4:	f04f 0300 	mov.w	r3, #0
 80031f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031fc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003200:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003204:	4690      	mov	r8, r2
 8003206:	4699      	mov	r9, r3
 8003208:	4623      	mov	r3, r4
 800320a:	eb18 0303 	adds.w	r3, r8, r3
 800320e:	613b      	str	r3, [r7, #16]
 8003210:	462b      	mov	r3, r5
 8003212:	eb49 0303 	adc.w	r3, r9, r3
 8003216:	617b      	str	r3, [r7, #20]
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	f04f 0300 	mov.w	r3, #0
 8003220:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003224:	4629      	mov	r1, r5
 8003226:	024b      	lsls	r3, r1, #9
 8003228:	4621      	mov	r1, r4
 800322a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800322e:	4621      	mov	r1, r4
 8003230:	024a      	lsls	r2, r1, #9
 8003232:	4610      	mov	r0, r2
 8003234:	4619      	mov	r1, r3
 8003236:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800323a:	2200      	movs	r2, #0
 800323c:	65bb      	str	r3, [r7, #88]	; 0x58
 800323e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003240:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003244:	f7fd fd02 	bl	8000c4c <__aeabi_uldivmod>
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	4613      	mov	r3, r2
 800324e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003252:	e065      	b.n	8003320 <HAL_RCC_GetSysClockFreq+0x420>
 8003254:	40023800 	.word	0x40023800
 8003258:	00f42400 	.word	0x00f42400
 800325c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003260:	4b3d      	ldr	r3, [pc, #244]	; (8003358 <HAL_RCC_GetSysClockFreq+0x458>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	099b      	lsrs	r3, r3, #6
 8003266:	2200      	movs	r2, #0
 8003268:	4618      	mov	r0, r3
 800326a:	4611      	mov	r1, r2
 800326c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003270:	653b      	str	r3, [r7, #80]	; 0x50
 8003272:	2300      	movs	r3, #0
 8003274:	657b      	str	r3, [r7, #84]	; 0x54
 8003276:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800327a:	4642      	mov	r2, r8
 800327c:	464b      	mov	r3, r9
 800327e:	f04f 0000 	mov.w	r0, #0
 8003282:	f04f 0100 	mov.w	r1, #0
 8003286:	0159      	lsls	r1, r3, #5
 8003288:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800328c:	0150      	lsls	r0, r2, #5
 800328e:	4602      	mov	r2, r0
 8003290:	460b      	mov	r3, r1
 8003292:	4641      	mov	r1, r8
 8003294:	1a51      	subs	r1, r2, r1
 8003296:	60b9      	str	r1, [r7, #8]
 8003298:	4649      	mov	r1, r9
 800329a:	eb63 0301 	sbc.w	r3, r3, r1
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80032ac:	4659      	mov	r1, fp
 80032ae:	018b      	lsls	r3, r1, #6
 80032b0:	4651      	mov	r1, sl
 80032b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032b6:	4651      	mov	r1, sl
 80032b8:	018a      	lsls	r2, r1, #6
 80032ba:	4651      	mov	r1, sl
 80032bc:	1a54      	subs	r4, r2, r1
 80032be:	4659      	mov	r1, fp
 80032c0:	eb63 0501 	sbc.w	r5, r3, r1
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	00eb      	lsls	r3, r5, #3
 80032ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032d2:	00e2      	lsls	r2, r4, #3
 80032d4:	4614      	mov	r4, r2
 80032d6:	461d      	mov	r5, r3
 80032d8:	4643      	mov	r3, r8
 80032da:	18e3      	adds	r3, r4, r3
 80032dc:	603b      	str	r3, [r7, #0]
 80032de:	464b      	mov	r3, r9
 80032e0:	eb45 0303 	adc.w	r3, r5, r3
 80032e4:	607b      	str	r3, [r7, #4]
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032f2:	4629      	mov	r1, r5
 80032f4:	028b      	lsls	r3, r1, #10
 80032f6:	4621      	mov	r1, r4
 80032f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032fc:	4621      	mov	r1, r4
 80032fe:	028a      	lsls	r2, r1, #10
 8003300:	4610      	mov	r0, r2
 8003302:	4619      	mov	r1, r3
 8003304:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003308:	2200      	movs	r2, #0
 800330a:	64bb      	str	r3, [r7, #72]	; 0x48
 800330c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800330e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003312:	f7fd fc9b 	bl	8000c4c <__aeabi_uldivmod>
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	4613      	mov	r3, r2
 800331c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003320:	4b0d      	ldr	r3, [pc, #52]	; (8003358 <HAL_RCC_GetSysClockFreq+0x458>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	0f1b      	lsrs	r3, r3, #28
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800332e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003332:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003336:	fbb2 f3f3 	udiv	r3, r2, r3
 800333a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800333e:	e003      	b.n	8003348 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003340:	4b06      	ldr	r3, [pc, #24]	; (800335c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003342:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003346:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003348:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800334c:	4618      	mov	r0, r3
 800334e:	37b8      	adds	r7, #184	; 0xb8
 8003350:	46bd      	mov	sp, r7
 8003352:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003356:	bf00      	nop
 8003358:	40023800 	.word	0x40023800
 800335c:	00f42400 	.word	0x00f42400

08003360 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e28d      	b.n	800388e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 8083 	beq.w	8003486 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003380:	4b94      	ldr	r3, [pc, #592]	; (80035d4 <HAL_RCC_OscConfig+0x274>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 030c 	and.w	r3, r3, #12
 8003388:	2b04      	cmp	r3, #4
 800338a:	d019      	beq.n	80033c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800338c:	4b91      	ldr	r3, [pc, #580]	; (80035d4 <HAL_RCC_OscConfig+0x274>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003394:	2b08      	cmp	r3, #8
 8003396:	d106      	bne.n	80033a6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003398:	4b8e      	ldr	r3, [pc, #568]	; (80035d4 <HAL_RCC_OscConfig+0x274>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033a4:	d00c      	beq.n	80033c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033a6:	4b8b      	ldr	r3, [pc, #556]	; (80035d4 <HAL_RCC_OscConfig+0x274>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80033ae:	2b0c      	cmp	r3, #12
 80033b0:	d112      	bne.n	80033d8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033b2:	4b88      	ldr	r3, [pc, #544]	; (80035d4 <HAL_RCC_OscConfig+0x274>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033be:	d10b      	bne.n	80033d8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c0:	4b84      	ldr	r3, [pc, #528]	; (80035d4 <HAL_RCC_OscConfig+0x274>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d05b      	beq.n	8003484 <HAL_RCC_OscConfig+0x124>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d157      	bne.n	8003484 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e25a      	b.n	800388e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033e0:	d106      	bne.n	80033f0 <HAL_RCC_OscConfig+0x90>
 80033e2:	4b7c      	ldr	r3, [pc, #496]	; (80035d4 <HAL_RCC_OscConfig+0x274>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a7b      	ldr	r2, [pc, #492]	; (80035d4 <HAL_RCC_OscConfig+0x274>)
 80033e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	e01d      	b.n	800342c <HAL_RCC_OscConfig+0xcc>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033f8:	d10c      	bne.n	8003414 <HAL_RCC_OscConfig+0xb4>
 80033fa:	4b76      	ldr	r3, [pc, #472]	; (80035d4 <HAL_RCC_OscConfig+0x274>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a75      	ldr	r2, [pc, #468]	; (80035d4 <HAL_RCC_OscConfig+0x274>)
 8003400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	4b73      	ldr	r3, [pc, #460]	; (80035d4 <HAL_RCC_OscConfig+0x274>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a72      	ldr	r2, [pc, #456]	; (80035d4 <HAL_RCC_OscConfig+0x274>)
 800340c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	e00b      	b.n	800342c <HAL_RCC_OscConfig+0xcc>
 8003414:	4b6f      	ldr	r3, [pc, #444]	; (80035d4 <HAL_RCC_OscConfig+0x274>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a6e      	ldr	r2, [pc, #440]	; (80035d4 <HAL_RCC_OscConfig+0x274>)
 800341a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800341e:	6013      	str	r3, [r2, #0]
 8003420:	4b6c      	ldr	r3, [pc, #432]	; (80035d4 <HAL_RCC_OscConfig+0x274>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a6b      	ldr	r2, [pc, #428]	; (80035d4 <HAL_RCC_OscConfig+0x274>)
 8003426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800342a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d013      	beq.n	800345c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003434:	f7fe fbf6 	bl	8001c24 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800343c:	f7fe fbf2 	bl	8001c24 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b64      	cmp	r3, #100	; 0x64
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e21f      	b.n	800388e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344e:	4b61      	ldr	r3, [pc, #388]	; (80035d4 <HAL_RCC_OscConfig+0x274>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d0f0      	beq.n	800343c <HAL_RCC_OscConfig+0xdc>
 800345a:	e014      	b.n	8003486 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345c:	f7fe fbe2 	bl	8001c24 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003464:	f7fe fbde 	bl	8001c24 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b64      	cmp	r3, #100	; 0x64
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e20b      	b.n	800388e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003476:	4b57      	ldr	r3, [pc, #348]	; (80035d4 <HAL_RCC_OscConfig+0x274>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f0      	bne.n	8003464 <HAL_RCC_OscConfig+0x104>
 8003482:	e000      	b.n	8003486 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d06f      	beq.n	8003572 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003492:	4b50      	ldr	r3, [pc, #320]	; (80035d4 <HAL_RCC_OscConfig+0x274>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 030c 	and.w	r3, r3, #12
 800349a:	2b00      	cmp	r3, #0
 800349c:	d017      	beq.n	80034ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800349e:	4b4d      	ldr	r3, [pc, #308]	; (80035d4 <HAL_RCC_OscConfig+0x274>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80034a6:	2b08      	cmp	r3, #8
 80034a8:	d105      	bne.n	80034b6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80034aa:	4b4a      	ldr	r3, [pc, #296]	; (80035d4 <HAL_RCC_OscConfig+0x274>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00b      	beq.n	80034ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034b6:	4b47      	ldr	r3, [pc, #284]	; (80035d4 <HAL_RCC_OscConfig+0x274>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80034be:	2b0c      	cmp	r3, #12
 80034c0:	d11c      	bne.n	80034fc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034c2:	4b44      	ldr	r3, [pc, #272]	; (80035d4 <HAL_RCC_OscConfig+0x274>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d116      	bne.n	80034fc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ce:	4b41      	ldr	r3, [pc, #260]	; (80035d4 <HAL_RCC_OscConfig+0x274>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d005      	beq.n	80034e6 <HAL_RCC_OscConfig+0x186>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d001      	beq.n	80034e6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e1d3      	b.n	800388e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e6:	4b3b      	ldr	r3, [pc, #236]	; (80035d4 <HAL_RCC_OscConfig+0x274>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	4937      	ldr	r1, [pc, #220]	; (80035d4 <HAL_RCC_OscConfig+0x274>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034fa:	e03a      	b.n	8003572 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d020      	beq.n	8003546 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003504:	4b34      	ldr	r3, [pc, #208]	; (80035d8 <HAL_RCC_OscConfig+0x278>)
 8003506:	2201      	movs	r2, #1
 8003508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350a:	f7fe fb8b 	bl	8001c24 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003512:	f7fe fb87 	bl	8001c24 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e1b4      	b.n	800388e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003524:	4b2b      	ldr	r3, [pc, #172]	; (80035d4 <HAL_RCC_OscConfig+0x274>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d0f0      	beq.n	8003512 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003530:	4b28      	ldr	r3, [pc, #160]	; (80035d4 <HAL_RCC_OscConfig+0x274>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	4925      	ldr	r1, [pc, #148]	; (80035d4 <HAL_RCC_OscConfig+0x274>)
 8003540:	4313      	orrs	r3, r2
 8003542:	600b      	str	r3, [r1, #0]
 8003544:	e015      	b.n	8003572 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003546:	4b24      	ldr	r3, [pc, #144]	; (80035d8 <HAL_RCC_OscConfig+0x278>)
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354c:	f7fe fb6a 	bl	8001c24 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003554:	f7fe fb66 	bl	8001c24 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e193      	b.n	800388e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003566:	4b1b      	ldr	r3, [pc, #108]	; (80035d4 <HAL_RCC_OscConfig+0x274>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1f0      	bne.n	8003554 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0308 	and.w	r3, r3, #8
 800357a:	2b00      	cmp	r3, #0
 800357c:	d036      	beq.n	80035ec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d016      	beq.n	80035b4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003586:	4b15      	ldr	r3, [pc, #84]	; (80035dc <HAL_RCC_OscConfig+0x27c>)
 8003588:	2201      	movs	r2, #1
 800358a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800358c:	f7fe fb4a 	bl	8001c24 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003594:	f7fe fb46 	bl	8001c24 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e173      	b.n	800388e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035a6:	4b0b      	ldr	r3, [pc, #44]	; (80035d4 <HAL_RCC_OscConfig+0x274>)
 80035a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0f0      	beq.n	8003594 <HAL_RCC_OscConfig+0x234>
 80035b2:	e01b      	b.n	80035ec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035b4:	4b09      	ldr	r3, [pc, #36]	; (80035dc <HAL_RCC_OscConfig+0x27c>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ba:	f7fe fb33 	bl	8001c24 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c0:	e00e      	b.n	80035e0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035c2:	f7fe fb2f 	bl	8001c24 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d907      	bls.n	80035e0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e15c      	b.n	800388e <HAL_RCC_OscConfig+0x52e>
 80035d4:	40023800 	.word	0x40023800
 80035d8:	42470000 	.word	0x42470000
 80035dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035e0:	4b8a      	ldr	r3, [pc, #552]	; (800380c <HAL_RCC_OscConfig+0x4ac>)
 80035e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1ea      	bne.n	80035c2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 8097 	beq.w	8003728 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035fa:	2300      	movs	r3, #0
 80035fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035fe:	4b83      	ldr	r3, [pc, #524]	; (800380c <HAL_RCC_OscConfig+0x4ac>)
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10f      	bne.n	800362a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800360a:	2300      	movs	r3, #0
 800360c:	60bb      	str	r3, [r7, #8]
 800360e:	4b7f      	ldr	r3, [pc, #508]	; (800380c <HAL_RCC_OscConfig+0x4ac>)
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	4a7e      	ldr	r2, [pc, #504]	; (800380c <HAL_RCC_OscConfig+0x4ac>)
 8003614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003618:	6413      	str	r3, [r2, #64]	; 0x40
 800361a:	4b7c      	ldr	r3, [pc, #496]	; (800380c <HAL_RCC_OscConfig+0x4ac>)
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003622:	60bb      	str	r3, [r7, #8]
 8003624:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003626:	2301      	movs	r3, #1
 8003628:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800362a:	4b79      	ldr	r3, [pc, #484]	; (8003810 <HAL_RCC_OscConfig+0x4b0>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003632:	2b00      	cmp	r3, #0
 8003634:	d118      	bne.n	8003668 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003636:	4b76      	ldr	r3, [pc, #472]	; (8003810 <HAL_RCC_OscConfig+0x4b0>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a75      	ldr	r2, [pc, #468]	; (8003810 <HAL_RCC_OscConfig+0x4b0>)
 800363c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003640:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003642:	f7fe faef 	bl	8001c24 <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003648:	e008      	b.n	800365c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800364a:	f7fe faeb 	bl	8001c24 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e118      	b.n	800388e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365c:	4b6c      	ldr	r3, [pc, #432]	; (8003810 <HAL_RCC_OscConfig+0x4b0>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0f0      	beq.n	800364a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d106      	bne.n	800367e <HAL_RCC_OscConfig+0x31e>
 8003670:	4b66      	ldr	r3, [pc, #408]	; (800380c <HAL_RCC_OscConfig+0x4ac>)
 8003672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003674:	4a65      	ldr	r2, [pc, #404]	; (800380c <HAL_RCC_OscConfig+0x4ac>)
 8003676:	f043 0301 	orr.w	r3, r3, #1
 800367a:	6713      	str	r3, [r2, #112]	; 0x70
 800367c:	e01c      	b.n	80036b8 <HAL_RCC_OscConfig+0x358>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	2b05      	cmp	r3, #5
 8003684:	d10c      	bne.n	80036a0 <HAL_RCC_OscConfig+0x340>
 8003686:	4b61      	ldr	r3, [pc, #388]	; (800380c <HAL_RCC_OscConfig+0x4ac>)
 8003688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368a:	4a60      	ldr	r2, [pc, #384]	; (800380c <HAL_RCC_OscConfig+0x4ac>)
 800368c:	f043 0304 	orr.w	r3, r3, #4
 8003690:	6713      	str	r3, [r2, #112]	; 0x70
 8003692:	4b5e      	ldr	r3, [pc, #376]	; (800380c <HAL_RCC_OscConfig+0x4ac>)
 8003694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003696:	4a5d      	ldr	r2, [pc, #372]	; (800380c <HAL_RCC_OscConfig+0x4ac>)
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	6713      	str	r3, [r2, #112]	; 0x70
 800369e:	e00b      	b.n	80036b8 <HAL_RCC_OscConfig+0x358>
 80036a0:	4b5a      	ldr	r3, [pc, #360]	; (800380c <HAL_RCC_OscConfig+0x4ac>)
 80036a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a4:	4a59      	ldr	r2, [pc, #356]	; (800380c <HAL_RCC_OscConfig+0x4ac>)
 80036a6:	f023 0301 	bic.w	r3, r3, #1
 80036aa:	6713      	str	r3, [r2, #112]	; 0x70
 80036ac:	4b57      	ldr	r3, [pc, #348]	; (800380c <HAL_RCC_OscConfig+0x4ac>)
 80036ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b0:	4a56      	ldr	r2, [pc, #344]	; (800380c <HAL_RCC_OscConfig+0x4ac>)
 80036b2:	f023 0304 	bic.w	r3, r3, #4
 80036b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d015      	beq.n	80036ec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c0:	f7fe fab0 	bl	8001c24 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c6:	e00a      	b.n	80036de <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036c8:	f7fe faac 	bl	8001c24 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e0d7      	b.n	800388e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036de:	4b4b      	ldr	r3, [pc, #300]	; (800380c <HAL_RCC_OscConfig+0x4ac>)
 80036e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0ee      	beq.n	80036c8 <HAL_RCC_OscConfig+0x368>
 80036ea:	e014      	b.n	8003716 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ec:	f7fe fa9a 	bl	8001c24 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f2:	e00a      	b.n	800370a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036f4:	f7fe fa96 	bl	8001c24 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003702:	4293      	cmp	r3, r2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e0c1      	b.n	800388e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800370a:	4b40      	ldr	r3, [pc, #256]	; (800380c <HAL_RCC_OscConfig+0x4ac>)
 800370c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1ee      	bne.n	80036f4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003716:	7dfb      	ldrb	r3, [r7, #23]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d105      	bne.n	8003728 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800371c:	4b3b      	ldr	r3, [pc, #236]	; (800380c <HAL_RCC_OscConfig+0x4ac>)
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	4a3a      	ldr	r2, [pc, #232]	; (800380c <HAL_RCC_OscConfig+0x4ac>)
 8003722:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003726:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 80ad 	beq.w	800388c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003732:	4b36      	ldr	r3, [pc, #216]	; (800380c <HAL_RCC_OscConfig+0x4ac>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 030c 	and.w	r3, r3, #12
 800373a:	2b08      	cmp	r3, #8
 800373c:	d060      	beq.n	8003800 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	2b02      	cmp	r3, #2
 8003744:	d145      	bne.n	80037d2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003746:	4b33      	ldr	r3, [pc, #204]	; (8003814 <HAL_RCC_OscConfig+0x4b4>)
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374c:	f7fe fa6a 	bl	8001c24 <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003754:	f7fe fa66 	bl	8001c24 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e093      	b.n	800388e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003766:	4b29      	ldr	r3, [pc, #164]	; (800380c <HAL_RCC_OscConfig+0x4ac>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1f0      	bne.n	8003754 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69da      	ldr	r2, [r3, #28]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	019b      	lsls	r3, r3, #6
 8003782:	431a      	orrs	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003788:	085b      	lsrs	r3, r3, #1
 800378a:	3b01      	subs	r3, #1
 800378c:	041b      	lsls	r3, r3, #16
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	061b      	lsls	r3, r3, #24
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379c:	071b      	lsls	r3, r3, #28
 800379e:	491b      	ldr	r1, [pc, #108]	; (800380c <HAL_RCC_OscConfig+0x4ac>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037a4:	4b1b      	ldr	r3, [pc, #108]	; (8003814 <HAL_RCC_OscConfig+0x4b4>)
 80037a6:	2201      	movs	r2, #1
 80037a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037aa:	f7fe fa3b 	bl	8001c24 <HAL_GetTick>
 80037ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037b0:	e008      	b.n	80037c4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037b2:	f7fe fa37 	bl	8001c24 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e064      	b.n	800388e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037c4:	4b11      	ldr	r3, [pc, #68]	; (800380c <HAL_RCC_OscConfig+0x4ac>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0f0      	beq.n	80037b2 <HAL_RCC_OscConfig+0x452>
 80037d0:	e05c      	b.n	800388c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d2:	4b10      	ldr	r3, [pc, #64]	; (8003814 <HAL_RCC_OscConfig+0x4b4>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d8:	f7fe fa24 	bl	8001c24 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037e0:	f7fe fa20 	bl	8001c24 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e04d      	b.n	800388e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f2:	4b06      	ldr	r3, [pc, #24]	; (800380c <HAL_RCC_OscConfig+0x4ac>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1f0      	bne.n	80037e0 <HAL_RCC_OscConfig+0x480>
 80037fe:	e045      	b.n	800388c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d107      	bne.n	8003818 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e040      	b.n	800388e <HAL_RCC_OscConfig+0x52e>
 800380c:	40023800 	.word	0x40023800
 8003810:	40007000 	.word	0x40007000
 8003814:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003818:	4b1f      	ldr	r3, [pc, #124]	; (8003898 <HAL_RCC_OscConfig+0x538>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d030      	beq.n	8003888 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003830:	429a      	cmp	r2, r3
 8003832:	d129      	bne.n	8003888 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800383e:	429a      	cmp	r2, r3
 8003840:	d122      	bne.n	8003888 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003848:	4013      	ands	r3, r2
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800384e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003850:	4293      	cmp	r3, r2
 8003852:	d119      	bne.n	8003888 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385e:	085b      	lsrs	r3, r3, #1
 8003860:	3b01      	subs	r3, #1
 8003862:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003864:	429a      	cmp	r2, r3
 8003866:	d10f      	bne.n	8003888 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003872:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003874:	429a      	cmp	r2, r3
 8003876:	d107      	bne.n	8003888 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003882:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003884:	429a      	cmp	r2, r3
 8003886:	d001      	beq.n	800388c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e000      	b.n	800388e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3718      	adds	r7, #24
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	40023800 	.word	0x40023800

0800389c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e041      	b.n	8003932 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d106      	bne.n	80038c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7fd ff46 	bl	8001754 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2202      	movs	r2, #2
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	3304      	adds	r3, #4
 80038d8:	4619      	mov	r1, r3
 80038da:	4610      	mov	r0, r2
 80038dc:	f000 fad8 	bl	8003e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b082      	sub	sp, #8
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e041      	b.n	80039d0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b00      	cmp	r3, #0
 8003956:	d106      	bne.n	8003966 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 f839 	bl	80039d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2202      	movs	r2, #2
 800396a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	3304      	adds	r3, #4
 8003976:	4619      	mov	r1, r3
 8003978:	4610      	mov	r0, r2
 800397a:	f000 fa89 	bl	8003e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d109      	bne.n	8003a10 <HAL_TIM_PWM_Start+0x24>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	bf14      	ite	ne
 8003a08:	2301      	movne	r3, #1
 8003a0a:	2300      	moveq	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	e022      	b.n	8003a56 <HAL_TIM_PWM_Start+0x6a>
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	d109      	bne.n	8003a2a <HAL_TIM_PWM_Start+0x3e>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	bf14      	ite	ne
 8003a22:	2301      	movne	r3, #1
 8003a24:	2300      	moveq	r3, #0
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	e015      	b.n	8003a56 <HAL_TIM_PWM_Start+0x6a>
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d109      	bne.n	8003a44 <HAL_TIM_PWM_Start+0x58>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	bf14      	ite	ne
 8003a3c:	2301      	movne	r3, #1
 8003a3e:	2300      	moveq	r3, #0
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	e008      	b.n	8003a56 <HAL_TIM_PWM_Start+0x6a>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	bf14      	ite	ne
 8003a50:	2301      	movne	r3, #1
 8003a52:	2300      	moveq	r3, #0
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e07c      	b.n	8003b58 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d104      	bne.n	8003a6e <HAL_TIM_PWM_Start+0x82>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a6c:	e013      	b.n	8003a96 <HAL_TIM_PWM_Start+0xaa>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	2b04      	cmp	r3, #4
 8003a72:	d104      	bne.n	8003a7e <HAL_TIM_PWM_Start+0x92>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2202      	movs	r2, #2
 8003a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a7c:	e00b      	b.n	8003a96 <HAL_TIM_PWM_Start+0xaa>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d104      	bne.n	8003a8e <HAL_TIM_PWM_Start+0xa2>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a8c:	e003      	b.n	8003a96 <HAL_TIM_PWM_Start+0xaa>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2202      	movs	r2, #2
 8003a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	6839      	ldr	r1, [r7, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 fce0 	bl	8004464 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a2d      	ldr	r2, [pc, #180]	; (8003b60 <HAL_TIM_PWM_Start+0x174>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d004      	beq.n	8003ab8 <HAL_TIM_PWM_Start+0xcc>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a2c      	ldr	r2, [pc, #176]	; (8003b64 <HAL_TIM_PWM_Start+0x178>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d101      	bne.n	8003abc <HAL_TIM_PWM_Start+0xd0>
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e000      	b.n	8003abe <HAL_TIM_PWM_Start+0xd2>
 8003abc:	2300      	movs	r3, #0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d007      	beq.n	8003ad2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ad0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a22      	ldr	r2, [pc, #136]	; (8003b60 <HAL_TIM_PWM_Start+0x174>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d022      	beq.n	8003b22 <HAL_TIM_PWM_Start+0x136>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae4:	d01d      	beq.n	8003b22 <HAL_TIM_PWM_Start+0x136>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a1f      	ldr	r2, [pc, #124]	; (8003b68 <HAL_TIM_PWM_Start+0x17c>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d018      	beq.n	8003b22 <HAL_TIM_PWM_Start+0x136>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a1d      	ldr	r2, [pc, #116]	; (8003b6c <HAL_TIM_PWM_Start+0x180>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d013      	beq.n	8003b22 <HAL_TIM_PWM_Start+0x136>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a1c      	ldr	r2, [pc, #112]	; (8003b70 <HAL_TIM_PWM_Start+0x184>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d00e      	beq.n	8003b22 <HAL_TIM_PWM_Start+0x136>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a16      	ldr	r2, [pc, #88]	; (8003b64 <HAL_TIM_PWM_Start+0x178>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d009      	beq.n	8003b22 <HAL_TIM_PWM_Start+0x136>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a18      	ldr	r2, [pc, #96]	; (8003b74 <HAL_TIM_PWM_Start+0x188>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d004      	beq.n	8003b22 <HAL_TIM_PWM_Start+0x136>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a16      	ldr	r2, [pc, #88]	; (8003b78 <HAL_TIM_PWM_Start+0x18c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d111      	bne.n	8003b46 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f003 0307 	and.w	r3, r3, #7
 8003b2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2b06      	cmp	r3, #6
 8003b32:	d010      	beq.n	8003b56 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0201 	orr.w	r2, r2, #1
 8003b42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b44:	e007      	b.n	8003b56 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f042 0201 	orr.w	r2, r2, #1
 8003b54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	40010000 	.word	0x40010000
 8003b64:	40010400 	.word	0x40010400
 8003b68:	40000400 	.word	0x40000400
 8003b6c:	40000800 	.word	0x40000800
 8003b70:	40000c00 	.word	0x40000c00
 8003b74:	40014000 	.word	0x40014000
 8003b78:	40001800 	.word	0x40001800

08003b7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d101      	bne.n	8003b9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b96:	2302      	movs	r3, #2
 8003b98:	e0ae      	b.n	8003cf8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b0c      	cmp	r3, #12
 8003ba6:	f200 809f 	bhi.w	8003ce8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003baa:	a201      	add	r2, pc, #4	; (adr r2, 8003bb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb0:	08003be5 	.word	0x08003be5
 8003bb4:	08003ce9 	.word	0x08003ce9
 8003bb8:	08003ce9 	.word	0x08003ce9
 8003bbc:	08003ce9 	.word	0x08003ce9
 8003bc0:	08003c25 	.word	0x08003c25
 8003bc4:	08003ce9 	.word	0x08003ce9
 8003bc8:	08003ce9 	.word	0x08003ce9
 8003bcc:	08003ce9 	.word	0x08003ce9
 8003bd0:	08003c67 	.word	0x08003c67
 8003bd4:	08003ce9 	.word	0x08003ce9
 8003bd8:	08003ce9 	.word	0x08003ce9
 8003bdc:	08003ce9 	.word	0x08003ce9
 8003be0:	08003ca7 	.word	0x08003ca7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68b9      	ldr	r1, [r7, #8]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 f9f0 	bl	8003fd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	699a      	ldr	r2, [r3, #24]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f042 0208 	orr.w	r2, r2, #8
 8003bfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	699a      	ldr	r2, [r3, #24]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 0204 	bic.w	r2, r2, #4
 8003c0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6999      	ldr	r1, [r3, #24]
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	691a      	ldr	r2, [r3, #16]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	619a      	str	r2, [r3, #24]
      break;
 8003c22:	e064      	b.n	8003cee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68b9      	ldr	r1, [r7, #8]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 fa40 	bl	80040b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	699a      	ldr	r2, [r3, #24]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	699a      	ldr	r2, [r3, #24]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6999      	ldr	r1, [r3, #24]
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	021a      	lsls	r2, r3, #8
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	619a      	str	r2, [r3, #24]
      break;
 8003c64:	e043      	b.n	8003cee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68b9      	ldr	r1, [r7, #8]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f000 fa95 	bl	800419c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	69da      	ldr	r2, [r3, #28]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f042 0208 	orr.w	r2, r2, #8
 8003c80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	69da      	ldr	r2, [r3, #28]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 0204 	bic.w	r2, r2, #4
 8003c90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	69d9      	ldr	r1, [r3, #28]
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	691a      	ldr	r2, [r3, #16]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	61da      	str	r2, [r3, #28]
      break;
 8003ca4:	e023      	b.n	8003cee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68b9      	ldr	r1, [r7, #8]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 fae9 	bl	8004284 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	69da      	ldr	r2, [r3, #28]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	69da      	ldr	r2, [r3, #28]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	69d9      	ldr	r1, [r3, #28]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	021a      	lsls	r2, r3, #8
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	61da      	str	r2, [r3, #28]
      break;
 8003ce6:	e002      	b.n	8003cee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	75fb      	strb	r3, [r7, #23]
      break;
 8003cec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3718      	adds	r7, #24
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d101      	bne.n	8003d1c <HAL_TIM_ConfigClockSource+0x1c>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	e0b4      	b.n	8003e86 <HAL_TIM_ConfigClockSource+0x186>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2202      	movs	r2, #2
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d54:	d03e      	beq.n	8003dd4 <HAL_TIM_ConfigClockSource+0xd4>
 8003d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d5a:	f200 8087 	bhi.w	8003e6c <HAL_TIM_ConfigClockSource+0x16c>
 8003d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d62:	f000 8086 	beq.w	8003e72 <HAL_TIM_ConfigClockSource+0x172>
 8003d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d6a:	d87f      	bhi.n	8003e6c <HAL_TIM_ConfigClockSource+0x16c>
 8003d6c:	2b70      	cmp	r3, #112	; 0x70
 8003d6e:	d01a      	beq.n	8003da6 <HAL_TIM_ConfigClockSource+0xa6>
 8003d70:	2b70      	cmp	r3, #112	; 0x70
 8003d72:	d87b      	bhi.n	8003e6c <HAL_TIM_ConfigClockSource+0x16c>
 8003d74:	2b60      	cmp	r3, #96	; 0x60
 8003d76:	d050      	beq.n	8003e1a <HAL_TIM_ConfigClockSource+0x11a>
 8003d78:	2b60      	cmp	r3, #96	; 0x60
 8003d7a:	d877      	bhi.n	8003e6c <HAL_TIM_ConfigClockSource+0x16c>
 8003d7c:	2b50      	cmp	r3, #80	; 0x50
 8003d7e:	d03c      	beq.n	8003dfa <HAL_TIM_ConfigClockSource+0xfa>
 8003d80:	2b50      	cmp	r3, #80	; 0x50
 8003d82:	d873      	bhi.n	8003e6c <HAL_TIM_ConfigClockSource+0x16c>
 8003d84:	2b40      	cmp	r3, #64	; 0x40
 8003d86:	d058      	beq.n	8003e3a <HAL_TIM_ConfigClockSource+0x13a>
 8003d88:	2b40      	cmp	r3, #64	; 0x40
 8003d8a:	d86f      	bhi.n	8003e6c <HAL_TIM_ConfigClockSource+0x16c>
 8003d8c:	2b30      	cmp	r3, #48	; 0x30
 8003d8e:	d064      	beq.n	8003e5a <HAL_TIM_ConfigClockSource+0x15a>
 8003d90:	2b30      	cmp	r3, #48	; 0x30
 8003d92:	d86b      	bhi.n	8003e6c <HAL_TIM_ConfigClockSource+0x16c>
 8003d94:	2b20      	cmp	r3, #32
 8003d96:	d060      	beq.n	8003e5a <HAL_TIM_ConfigClockSource+0x15a>
 8003d98:	2b20      	cmp	r3, #32
 8003d9a:	d867      	bhi.n	8003e6c <HAL_TIM_ConfigClockSource+0x16c>
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d05c      	beq.n	8003e5a <HAL_TIM_ConfigClockSource+0x15a>
 8003da0:	2b10      	cmp	r3, #16
 8003da2:	d05a      	beq.n	8003e5a <HAL_TIM_ConfigClockSource+0x15a>
 8003da4:	e062      	b.n	8003e6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6818      	ldr	r0, [r3, #0]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	6899      	ldr	r1, [r3, #8]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	f000 fb35 	bl	8004424 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003dc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	609a      	str	r2, [r3, #8]
      break;
 8003dd2:	e04f      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6818      	ldr	r0, [r3, #0]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	6899      	ldr	r1, [r3, #8]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f000 fb1e 	bl	8004424 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689a      	ldr	r2, [r3, #8]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003df6:	609a      	str	r2, [r3, #8]
      break;
 8003df8:	e03c      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6818      	ldr	r0, [r3, #0]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	6859      	ldr	r1, [r3, #4]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	461a      	mov	r2, r3
 8003e08:	f000 fa92 	bl	8004330 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2150      	movs	r1, #80	; 0x50
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 faeb 	bl	80043ee <TIM_ITRx_SetConfig>
      break;
 8003e18:	e02c      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6818      	ldr	r0, [r3, #0]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	6859      	ldr	r1, [r3, #4]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	461a      	mov	r2, r3
 8003e28:	f000 fab1 	bl	800438e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2160      	movs	r1, #96	; 0x60
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 fadb 	bl	80043ee <TIM_ITRx_SetConfig>
      break;
 8003e38:	e01c      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6818      	ldr	r0, [r3, #0]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	6859      	ldr	r1, [r3, #4]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	461a      	mov	r2, r3
 8003e48:	f000 fa72 	bl	8004330 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2140      	movs	r1, #64	; 0x40
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 facb 	bl	80043ee <TIM_ITRx_SetConfig>
      break;
 8003e58:	e00c      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4619      	mov	r1, r3
 8003e64:	4610      	mov	r0, r2
 8003e66:	f000 fac2 	bl	80043ee <TIM_ITRx_SetConfig>
      break;
 8003e6a:	e003      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e70:	e000      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
	...

08003e90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a40      	ldr	r2, [pc, #256]	; (8003fa4 <TIM_Base_SetConfig+0x114>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d013      	beq.n	8003ed0 <TIM_Base_SetConfig+0x40>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eae:	d00f      	beq.n	8003ed0 <TIM_Base_SetConfig+0x40>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a3d      	ldr	r2, [pc, #244]	; (8003fa8 <TIM_Base_SetConfig+0x118>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d00b      	beq.n	8003ed0 <TIM_Base_SetConfig+0x40>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a3c      	ldr	r2, [pc, #240]	; (8003fac <TIM_Base_SetConfig+0x11c>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d007      	beq.n	8003ed0 <TIM_Base_SetConfig+0x40>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a3b      	ldr	r2, [pc, #236]	; (8003fb0 <TIM_Base_SetConfig+0x120>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d003      	beq.n	8003ed0 <TIM_Base_SetConfig+0x40>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a3a      	ldr	r2, [pc, #232]	; (8003fb4 <TIM_Base_SetConfig+0x124>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d108      	bne.n	8003ee2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a2f      	ldr	r2, [pc, #188]	; (8003fa4 <TIM_Base_SetConfig+0x114>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d02b      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef0:	d027      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a2c      	ldr	r2, [pc, #176]	; (8003fa8 <TIM_Base_SetConfig+0x118>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d023      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a2b      	ldr	r2, [pc, #172]	; (8003fac <TIM_Base_SetConfig+0x11c>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d01f      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a2a      	ldr	r2, [pc, #168]	; (8003fb0 <TIM_Base_SetConfig+0x120>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d01b      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a29      	ldr	r2, [pc, #164]	; (8003fb4 <TIM_Base_SetConfig+0x124>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d017      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a28      	ldr	r2, [pc, #160]	; (8003fb8 <TIM_Base_SetConfig+0x128>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d013      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a27      	ldr	r2, [pc, #156]	; (8003fbc <TIM_Base_SetConfig+0x12c>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d00f      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a26      	ldr	r2, [pc, #152]	; (8003fc0 <TIM_Base_SetConfig+0x130>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d00b      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a25      	ldr	r2, [pc, #148]	; (8003fc4 <TIM_Base_SetConfig+0x134>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d007      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a24      	ldr	r2, [pc, #144]	; (8003fc8 <TIM_Base_SetConfig+0x138>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d003      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a23      	ldr	r2, [pc, #140]	; (8003fcc <TIM_Base_SetConfig+0x13c>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d108      	bne.n	8003f54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a0a      	ldr	r2, [pc, #40]	; (8003fa4 <TIM_Base_SetConfig+0x114>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d003      	beq.n	8003f88 <TIM_Base_SetConfig+0xf8>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a0c      	ldr	r2, [pc, #48]	; (8003fb4 <TIM_Base_SetConfig+0x124>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d103      	bne.n	8003f90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	691a      	ldr	r2, [r3, #16]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	615a      	str	r2, [r3, #20]
}
 8003f96:	bf00      	nop
 8003f98:	3714      	adds	r7, #20
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	40010000 	.word	0x40010000
 8003fa8:	40000400 	.word	0x40000400
 8003fac:	40000800 	.word	0x40000800
 8003fb0:	40000c00 	.word	0x40000c00
 8003fb4:	40010400 	.word	0x40010400
 8003fb8:	40014000 	.word	0x40014000
 8003fbc:	40014400 	.word	0x40014400
 8003fc0:	40014800 	.word	0x40014800
 8003fc4:	40001800 	.word	0x40001800
 8003fc8:	40001c00 	.word	0x40001c00
 8003fcc:	40002000 	.word	0x40002000

08003fd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b087      	sub	sp, #28
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	f023 0201 	bic.w	r2, r3, #1
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f023 0303 	bic.w	r3, r3, #3
 8004006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	4313      	orrs	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f023 0302 	bic.w	r3, r3, #2
 8004018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	4313      	orrs	r3, r2
 8004022:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a20      	ldr	r2, [pc, #128]	; (80040a8 <TIM_OC1_SetConfig+0xd8>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d003      	beq.n	8004034 <TIM_OC1_SetConfig+0x64>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a1f      	ldr	r2, [pc, #124]	; (80040ac <TIM_OC1_SetConfig+0xdc>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d10c      	bne.n	800404e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f023 0308 	bic.w	r3, r3, #8
 800403a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	4313      	orrs	r3, r2
 8004044:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f023 0304 	bic.w	r3, r3, #4
 800404c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a15      	ldr	r2, [pc, #84]	; (80040a8 <TIM_OC1_SetConfig+0xd8>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d003      	beq.n	800405e <TIM_OC1_SetConfig+0x8e>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a14      	ldr	r2, [pc, #80]	; (80040ac <TIM_OC1_SetConfig+0xdc>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d111      	bne.n	8004082 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004064:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800406c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	4313      	orrs	r3, r2
 8004076:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	4313      	orrs	r3, r2
 8004080:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	621a      	str	r2, [r3, #32]
}
 800409c:	bf00      	nop
 800409e:	371c      	adds	r7, #28
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	40010000 	.word	0x40010000
 80040ac:	40010400 	.word	0x40010400

080040b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b087      	sub	sp, #28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	f023 0210 	bic.w	r2, r3, #16
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	021b      	lsls	r3, r3, #8
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f023 0320 	bic.w	r3, r3, #32
 80040fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	011b      	lsls	r3, r3, #4
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	4313      	orrs	r3, r2
 8004106:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a22      	ldr	r2, [pc, #136]	; (8004194 <TIM_OC2_SetConfig+0xe4>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d003      	beq.n	8004118 <TIM_OC2_SetConfig+0x68>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a21      	ldr	r2, [pc, #132]	; (8004198 <TIM_OC2_SetConfig+0xe8>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d10d      	bne.n	8004134 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800411e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	4313      	orrs	r3, r2
 800412a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004132:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a17      	ldr	r2, [pc, #92]	; (8004194 <TIM_OC2_SetConfig+0xe4>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d003      	beq.n	8004144 <TIM_OC2_SetConfig+0x94>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a16      	ldr	r2, [pc, #88]	; (8004198 <TIM_OC2_SetConfig+0xe8>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d113      	bne.n	800416c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800414a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004152:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	4313      	orrs	r3, r2
 800415e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	621a      	str	r2, [r3, #32]
}
 8004186:	bf00      	nop
 8004188:	371c      	adds	r7, #28
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	40010000 	.word	0x40010000
 8004198:	40010400 	.word	0x40010400

0800419c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800419c:	b480      	push	{r7}
 800419e:	b087      	sub	sp, #28
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	69db      	ldr	r3, [r3, #28]
 80041c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f023 0303 	bic.w	r3, r3, #3
 80041d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	4313      	orrs	r3, r2
 80041dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	021b      	lsls	r3, r3, #8
 80041ec:	697a      	ldr	r2, [r7, #20]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a21      	ldr	r2, [pc, #132]	; (800427c <TIM_OC3_SetConfig+0xe0>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d003      	beq.n	8004202 <TIM_OC3_SetConfig+0x66>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a20      	ldr	r2, [pc, #128]	; (8004280 <TIM_OC3_SetConfig+0xe4>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d10d      	bne.n	800421e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004208:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	021b      	lsls	r3, r3, #8
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	4313      	orrs	r3, r2
 8004214:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800421c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a16      	ldr	r2, [pc, #88]	; (800427c <TIM_OC3_SetConfig+0xe0>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d003      	beq.n	800422e <TIM_OC3_SetConfig+0x92>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a15      	ldr	r2, [pc, #84]	; (8004280 <TIM_OC3_SetConfig+0xe4>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d113      	bne.n	8004256 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004234:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800423c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	011b      	lsls	r3, r3, #4
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	4313      	orrs	r3, r2
 8004248:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	4313      	orrs	r3, r2
 8004254:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	621a      	str	r2, [r3, #32]
}
 8004270:	bf00      	nop
 8004272:	371c      	adds	r7, #28
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	40010000 	.word	0x40010000
 8004280:	40010400 	.word	0x40010400

08004284 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	021b      	lsls	r3, r3, #8
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	031b      	lsls	r3, r3, #12
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	4313      	orrs	r3, r2
 80042da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a12      	ldr	r2, [pc, #72]	; (8004328 <TIM_OC4_SetConfig+0xa4>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d003      	beq.n	80042ec <TIM_OC4_SetConfig+0x68>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a11      	ldr	r2, [pc, #68]	; (800432c <TIM_OC4_SetConfig+0xa8>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d109      	bne.n	8004300 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	019b      	lsls	r3, r3, #6
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	621a      	str	r2, [r3, #32]
}
 800431a:	bf00      	nop
 800431c:	371c      	adds	r7, #28
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	40010000 	.word	0x40010000
 800432c:	40010400 	.word	0x40010400

08004330 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004330:	b480      	push	{r7}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	f023 0201 	bic.w	r2, r3, #1
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800435a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	4313      	orrs	r3, r2
 8004364:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f023 030a 	bic.w	r3, r3, #10
 800436c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	4313      	orrs	r3, r2
 8004374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	621a      	str	r2, [r3, #32]
}
 8004382:	bf00      	nop
 8004384:	371c      	adds	r7, #28
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr

0800438e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800438e:	b480      	push	{r7}
 8004390:	b087      	sub	sp, #28
 8004392:	af00      	add	r7, sp, #0
 8004394:	60f8      	str	r0, [r7, #12]
 8004396:	60b9      	str	r1, [r7, #8]
 8004398:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	f023 0210 	bic.w	r2, r3, #16
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	031b      	lsls	r3, r3, #12
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	011b      	lsls	r3, r3, #4
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	621a      	str	r2, [r3, #32]
}
 80043e2:	bf00      	nop
 80043e4:	371c      	adds	r7, #28
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b085      	sub	sp, #20
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
 80043f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004404:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4313      	orrs	r3, r2
 800440c:	f043 0307 	orr.w	r3, r3, #7
 8004410:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	609a      	str	r2, [r3, #8]
}
 8004418:	bf00      	nop
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004424:	b480      	push	{r7}
 8004426:	b087      	sub	sp, #28
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
 8004430:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800443e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	021a      	lsls	r2, r3, #8
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	431a      	orrs	r2, r3
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	4313      	orrs	r3, r2
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	4313      	orrs	r3, r2
 8004450:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	609a      	str	r2, [r3, #8]
}
 8004458:	bf00      	nop
 800445a:	371c      	adds	r7, #28
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	f003 031f 	and.w	r3, r3, #31
 8004476:	2201      	movs	r2, #1
 8004478:	fa02 f303 	lsl.w	r3, r2, r3
 800447c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6a1a      	ldr	r2, [r3, #32]
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	43db      	mvns	r3, r3
 8004486:	401a      	ands	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6a1a      	ldr	r2, [r3, #32]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	f003 031f 	and.w	r3, r3, #31
 8004496:	6879      	ldr	r1, [r7, #4]
 8004498:	fa01 f303 	lsl.w	r3, r1, r3
 800449c:	431a      	orrs	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	621a      	str	r2, [r3, #32]
}
 80044a2:	bf00      	nop
 80044a4:	371c      	adds	r7, #28
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
	...

080044b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d101      	bne.n	80044c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044c4:	2302      	movs	r3, #2
 80044c6:	e05a      	b.n	800457e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2202      	movs	r2, #2
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a21      	ldr	r2, [pc, #132]	; (800458c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d022      	beq.n	8004552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004514:	d01d      	beq.n	8004552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a1d      	ldr	r2, [pc, #116]	; (8004590 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d018      	beq.n	8004552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a1b      	ldr	r2, [pc, #108]	; (8004594 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d013      	beq.n	8004552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a1a      	ldr	r2, [pc, #104]	; (8004598 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d00e      	beq.n	8004552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a18      	ldr	r2, [pc, #96]	; (800459c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d009      	beq.n	8004552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a17      	ldr	r2, [pc, #92]	; (80045a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d004      	beq.n	8004552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a15      	ldr	r2, [pc, #84]	; (80045a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d10c      	bne.n	800456c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004558:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	4313      	orrs	r3, r2
 8004562:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	40010000 	.word	0x40010000
 8004590:	40000400 	.word	0x40000400
 8004594:	40000800 	.word	0x40000800
 8004598:	40000c00 	.word	0x40000c00
 800459c:	40010400 	.word	0x40010400
 80045a0:	40014000 	.word	0x40014000
 80045a4:	40001800 	.word	0x40001800

080045a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d101      	bne.n	80045c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80045c0:	2302      	movs	r3, #2
 80045c2:	e03d      	b.n	8004640 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4313      	orrs	r3, r2
 8004602:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	4313      	orrs	r3, r2
 8004610:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	4313      	orrs	r3, r2
 800461e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	4313      	orrs	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3714      	adds	r7, #20
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e03f      	b.n	80046de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d106      	bne.n	8004678 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7fd f8e0 	bl	8001838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2224      	movs	r2, #36	; 0x24
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68da      	ldr	r2, [r3, #12]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800468e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 fddf 	bl	8005254 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	691a      	ldr	r2, [r3, #16]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	695a      	ldr	r2, [r3, #20]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68da      	ldr	r2, [r3, #12]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2220      	movs	r2, #32
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2220      	movs	r2, #32
 80046d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b08a      	sub	sp, #40	; 0x28
 80046ea:	af02      	add	r7, sp, #8
 80046ec:	60f8      	str	r0, [r7, #12]
 80046ee:	60b9      	str	r1, [r7, #8]
 80046f0:	603b      	str	r3, [r7, #0]
 80046f2:	4613      	mov	r3, r2
 80046f4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046f6:	2300      	movs	r3, #0
 80046f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b20      	cmp	r3, #32
 8004704:	d17c      	bne.n	8004800 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <HAL_UART_Transmit+0x2c>
 800470c:	88fb      	ldrh	r3, [r7, #6]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e075      	b.n	8004802 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800471c:	2b01      	cmp	r3, #1
 800471e:	d101      	bne.n	8004724 <HAL_UART_Transmit+0x3e>
 8004720:	2302      	movs	r3, #2
 8004722:	e06e      	b.n	8004802 <HAL_UART_Transmit+0x11c>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2221      	movs	r2, #33	; 0x21
 8004736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800473a:	f7fd fa73 	bl	8001c24 <HAL_GetTick>
 800473e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	88fa      	ldrh	r2, [r7, #6]
 8004744:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	88fa      	ldrh	r2, [r7, #6]
 800474a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004754:	d108      	bne.n	8004768 <HAL_UART_Transmit+0x82>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d104      	bne.n	8004768 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800475e:	2300      	movs	r3, #0
 8004760:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	61bb      	str	r3, [r7, #24]
 8004766:	e003      	b.n	8004770 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800476c:	2300      	movs	r3, #0
 800476e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004778:	e02a      	b.n	80047d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	9300      	str	r3, [sp, #0]
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	2200      	movs	r2, #0
 8004782:	2180      	movs	r1, #128	; 0x80
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f000 fb1f 	bl	8004dc8 <UART_WaitOnFlagUntilTimeout>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d001      	beq.n	8004794 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e036      	b.n	8004802 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10b      	bne.n	80047b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	461a      	mov	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	3302      	adds	r3, #2
 80047ae:	61bb      	str	r3, [r7, #24]
 80047b0:	e007      	b.n	80047c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	781a      	ldrb	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	3301      	adds	r3, #1
 80047c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1cf      	bne.n	800477a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	2200      	movs	r2, #0
 80047e2:	2140      	movs	r1, #64	; 0x40
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 faef 	bl	8004dc8 <UART_WaitOnFlagUntilTimeout>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e006      	b.n	8004802 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2220      	movs	r2, #32
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80047fc:	2300      	movs	r3, #0
 80047fe:	e000      	b.n	8004802 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004800:	2302      	movs	r3, #2
  }
}
 8004802:	4618      	mov	r0, r3
 8004804:	3720      	adds	r7, #32
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b084      	sub	sp, #16
 800480e:	af00      	add	r7, sp, #0
 8004810:	60f8      	str	r0, [r7, #12]
 8004812:	60b9      	str	r1, [r7, #8]
 8004814:	4613      	mov	r3, r2
 8004816:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2b20      	cmp	r3, #32
 8004822:	d11d      	bne.n	8004860 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d002      	beq.n	8004830 <HAL_UART_Receive_IT+0x26>
 800482a:	88fb      	ldrh	r3, [r7, #6]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e016      	b.n	8004862 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800483a:	2b01      	cmp	r3, #1
 800483c:	d101      	bne.n	8004842 <HAL_UART_Receive_IT+0x38>
 800483e:	2302      	movs	r3, #2
 8004840:	e00f      	b.n	8004862 <HAL_UART_Receive_IT+0x58>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004850:	88fb      	ldrh	r3, [r7, #6]
 8004852:	461a      	mov	r2, r3
 8004854:	68b9      	ldr	r1, [r7, #8]
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f000 fb24 	bl	8004ea4 <UART_Start_Receive_IT>
 800485c:	4603      	mov	r3, r0
 800485e:	e000      	b.n	8004862 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004860:	2302      	movs	r3, #2
  }
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
	...

0800486c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b0ba      	sub	sp, #232	; 0xe8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004892:	2300      	movs	r3, #0
 8004894:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004898:	2300      	movs	r3, #0
 800489a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800489e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048a2:	f003 030f 	and.w	r3, r3, #15
 80048a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80048aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10f      	bne.n	80048d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048b6:	f003 0320 	and.w	r3, r3, #32
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d009      	beq.n	80048d2 <HAL_UART_IRQHandler+0x66>
 80048be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048c2:	f003 0320 	and.w	r3, r3, #32
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 fc07 	bl	80050de <UART_Receive_IT>
      return;
 80048d0:	e256      	b.n	8004d80 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80048d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f000 80de 	beq.w	8004a98 <HAL_UART_IRQHandler+0x22c>
 80048dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d106      	bne.n	80048f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80048e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 80d1 	beq.w	8004a98 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00b      	beq.n	800491a <HAL_UART_IRQHandler+0xae>
 8004902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490a:	2b00      	cmp	r3, #0
 800490c:	d005      	beq.n	800491a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	f043 0201 	orr.w	r2, r3, #1
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800491a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800491e:	f003 0304 	and.w	r3, r3, #4
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00b      	beq.n	800493e <HAL_UART_IRQHandler+0xd2>
 8004926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d005      	beq.n	800493e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004936:	f043 0202 	orr.w	r2, r3, #2
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800493e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00b      	beq.n	8004962 <HAL_UART_IRQHandler+0xf6>
 800494a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d005      	beq.n	8004962 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	f043 0204 	orr.w	r2, r3, #4
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004966:	f003 0308 	and.w	r3, r3, #8
 800496a:	2b00      	cmp	r3, #0
 800496c:	d011      	beq.n	8004992 <HAL_UART_IRQHandler+0x126>
 800496e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004972:	f003 0320 	and.w	r3, r3, #32
 8004976:	2b00      	cmp	r3, #0
 8004978:	d105      	bne.n	8004986 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800497a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d005      	beq.n	8004992 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498a:	f043 0208 	orr.w	r2, r3, #8
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004996:	2b00      	cmp	r3, #0
 8004998:	f000 81ed 	beq.w	8004d76 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800499c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049a0:	f003 0320 	and.w	r3, r3, #32
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d008      	beq.n	80049ba <HAL_UART_IRQHandler+0x14e>
 80049a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049ac:	f003 0320 	and.w	r3, r3, #32
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d002      	beq.n	80049ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 fb92 	bl	80050de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c4:	2b40      	cmp	r3, #64	; 0x40
 80049c6:	bf0c      	ite	eq
 80049c8:	2301      	moveq	r3, #1
 80049ca:	2300      	movne	r3, #0
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	f003 0308 	and.w	r3, r3, #8
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d103      	bne.n	80049e6 <HAL_UART_IRQHandler+0x17a>
 80049de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d04f      	beq.n	8004a86 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 fa9a 	bl	8004f20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f6:	2b40      	cmp	r3, #64	; 0x40
 80049f8:	d141      	bne.n	8004a7e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	3314      	adds	r3, #20
 8004a00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a08:	e853 3f00 	ldrex	r3, [r3]
 8004a0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	3314      	adds	r3, #20
 8004a22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a36:	e841 2300 	strex	r3, r2, [r1]
 8004a3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1d9      	bne.n	80049fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d013      	beq.n	8004a76 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a52:	4a7d      	ldr	r2, [pc, #500]	; (8004c48 <HAL_UART_IRQHandler+0x3dc>)
 8004a54:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7fd fefb 	bl	8002856 <HAL_DMA_Abort_IT>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d016      	beq.n	8004a94 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a70:	4610      	mov	r0, r2
 8004a72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a74:	e00e      	b.n	8004a94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f990 	bl	8004d9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a7c:	e00a      	b.n	8004a94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 f98c 	bl	8004d9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a84:	e006      	b.n	8004a94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f988 	bl	8004d9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004a92:	e170      	b.n	8004d76 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a94:	bf00      	nop
    return;
 8004a96:	e16e      	b.n	8004d76 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	f040 814a 	bne.w	8004d36 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aa6:	f003 0310 	and.w	r3, r3, #16
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f000 8143 	beq.w	8004d36 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ab4:	f003 0310 	and.w	r3, r3, #16
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f000 813c 	beq.w	8004d36 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004abe:	2300      	movs	r3, #0
 8004ac0:	60bb      	str	r3, [r7, #8]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	60bb      	str	r3, [r7, #8]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	60bb      	str	r3, [r7, #8]
 8004ad2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ade:	2b40      	cmp	r3, #64	; 0x40
 8004ae0:	f040 80b4 	bne.w	8004c4c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004af0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 8140 	beq.w	8004d7a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004afe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b02:	429a      	cmp	r2, r3
 8004b04:	f080 8139 	bcs.w	8004d7a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b0e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b1a:	f000 8088 	beq.w	8004c2e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	330c      	adds	r3, #12
 8004b24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b2c:	e853 3f00 	ldrex	r3, [r3]
 8004b30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	330c      	adds	r3, #12
 8004b46:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004b4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b52:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b5a:	e841 2300 	strex	r3, r2, [r1]
 8004b5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1d9      	bne.n	8004b1e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	3314      	adds	r3, #20
 8004b70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b74:	e853 3f00 	ldrex	r3, [r3]
 8004b78:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b7c:	f023 0301 	bic.w	r3, r3, #1
 8004b80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	3314      	adds	r3, #20
 8004b8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b8e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b92:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b94:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b9a:	e841 2300 	strex	r3, r2, [r1]
 8004b9e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004ba0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1e1      	bne.n	8004b6a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	3314      	adds	r3, #20
 8004bac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bb0:	e853 3f00 	ldrex	r3, [r3]
 8004bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004bb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	3314      	adds	r3, #20
 8004bc6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004bca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004bcc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004bd0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004bd2:	e841 2300 	strex	r3, r2, [r1]
 8004bd6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004bd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1e3      	bne.n	8004ba6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2220      	movs	r2, #32
 8004be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	330c      	adds	r3, #12
 8004bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bf6:	e853 3f00 	ldrex	r3, [r3]
 8004bfa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bfe:	f023 0310 	bic.w	r3, r3, #16
 8004c02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	330c      	adds	r3, #12
 8004c0c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004c10:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c12:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c18:	e841 2300 	strex	r3, r2, [r1]
 8004c1c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1e3      	bne.n	8004bec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7fd fda4 	bl	8002776 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f8b6 	bl	8004db0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c44:	e099      	b.n	8004d7a <HAL_UART_IRQHandler+0x50e>
 8004c46:	bf00      	nop
 8004c48:	08004fe7 	.word	0x08004fe7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 808b 	beq.w	8004d7e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004c68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f000 8086 	beq.w	8004d7e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	330c      	adds	r3, #12
 8004c78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7c:	e853 3f00 	ldrex	r3, [r3]
 8004c80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	330c      	adds	r3, #12
 8004c92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004c96:	647a      	str	r2, [r7, #68]	; 0x44
 8004c98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c9e:	e841 2300 	strex	r3, r2, [r1]
 8004ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1e3      	bne.n	8004c72 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	3314      	adds	r3, #20
 8004cb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb4:	e853 3f00 	ldrex	r3, [r3]
 8004cb8:	623b      	str	r3, [r7, #32]
   return(result);
 8004cba:	6a3b      	ldr	r3, [r7, #32]
 8004cbc:	f023 0301 	bic.w	r3, r3, #1
 8004cc0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	3314      	adds	r3, #20
 8004cca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004cce:	633a      	str	r2, [r7, #48]	; 0x30
 8004cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cd6:	e841 2300 	strex	r3, r2, [r1]
 8004cda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1e3      	bne.n	8004caa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	330c      	adds	r3, #12
 8004cf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	e853 3f00 	ldrex	r3, [r3]
 8004cfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f023 0310 	bic.w	r3, r3, #16
 8004d06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	330c      	adds	r3, #12
 8004d10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004d14:	61fa      	str	r2, [r7, #28]
 8004d16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d18:	69b9      	ldr	r1, [r7, #24]
 8004d1a:	69fa      	ldr	r2, [r7, #28]
 8004d1c:	e841 2300 	strex	r3, r2, [r1]
 8004d20:	617b      	str	r3, [r7, #20]
   return(result);
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1e3      	bne.n	8004cf0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f83e 	bl	8004db0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d34:	e023      	b.n	8004d7e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d009      	beq.n	8004d56 <HAL_UART_IRQHandler+0x4ea>
 8004d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f95d 	bl	800500e <UART_Transmit_IT>
    return;
 8004d54:	e014      	b.n	8004d80 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00e      	beq.n	8004d80 <HAL_UART_IRQHandler+0x514>
 8004d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d008      	beq.n	8004d80 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f99d 	bl	80050ae <UART_EndTransmit_IT>
    return;
 8004d74:	e004      	b.n	8004d80 <HAL_UART_IRQHandler+0x514>
    return;
 8004d76:	bf00      	nop
 8004d78:	e002      	b.n	8004d80 <HAL_UART_IRQHandler+0x514>
      return;
 8004d7a:	bf00      	nop
 8004d7c:	e000      	b.n	8004d80 <HAL_UART_IRQHandler+0x514>
      return;
 8004d7e:	bf00      	nop
  }
}
 8004d80:	37e8      	adds	r7, #232	; 0xe8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop

08004d88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	460b      	mov	r3, r1
 8004dba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b090      	sub	sp, #64	; 0x40
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	603b      	str	r3, [r7, #0]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dd8:	e050      	b.n	8004e7c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de0:	d04c      	beq.n	8004e7c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004de2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d007      	beq.n	8004df8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004de8:	f7fc ff1c 	bl	8001c24 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d241      	bcs.n	8004e7c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	330c      	adds	r3, #12
 8004dfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e02:	e853 3f00 	ldrex	r3, [r3]
 8004e06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	330c      	adds	r3, #12
 8004e16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e18:	637a      	str	r2, [r7, #52]	; 0x34
 8004e1a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e20:	e841 2300 	strex	r3, r2, [r1]
 8004e24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1e5      	bne.n	8004df8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	3314      	adds	r3, #20
 8004e32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	e853 3f00 	ldrex	r3, [r3]
 8004e3a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	f023 0301 	bic.w	r3, r3, #1
 8004e42:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	3314      	adds	r3, #20
 8004e4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e4c:	623a      	str	r2, [r7, #32]
 8004e4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e50:	69f9      	ldr	r1, [r7, #28]
 8004e52:	6a3a      	ldr	r2, [r7, #32]
 8004e54:	e841 2300 	strex	r3, r2, [r1]
 8004e58:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1e5      	bne.n	8004e2c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e00f      	b.n	8004e9c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	4013      	ands	r3, r2
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	bf0c      	ite	eq
 8004e8c:	2301      	moveq	r3, #1
 8004e8e:	2300      	movne	r3, #0
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	461a      	mov	r2, r3
 8004e94:	79fb      	ldrb	r3, [r7, #7]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d09f      	beq.n	8004dda <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3740      	adds	r7, #64	; 0x40
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	88fa      	ldrh	r2, [r7, #6]
 8004ebc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	88fa      	ldrh	r2, [r7, #6]
 8004ec2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2222      	movs	r2, #34	; 0x22
 8004ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d007      	beq.n	8004ef2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68da      	ldr	r2, [r3, #12]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ef0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	695a      	ldr	r2, [r3, #20]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f042 0201 	orr.w	r2, r2, #1
 8004f00:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68da      	ldr	r2, [r3, #12]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f042 0220 	orr.w	r2, r2, #32
 8004f10:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3714      	adds	r7, #20
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b095      	sub	sp, #84	; 0x54
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	330c      	adds	r3, #12
 8004f2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f32:	e853 3f00 	ldrex	r3, [r3]
 8004f36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	330c      	adds	r3, #12
 8004f46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f48:	643a      	str	r2, [r7, #64]	; 0x40
 8004f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f50:	e841 2300 	strex	r3, r2, [r1]
 8004f54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1e5      	bne.n	8004f28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	3314      	adds	r3, #20
 8004f62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f64:	6a3b      	ldr	r3, [r7, #32]
 8004f66:	e853 3f00 	ldrex	r3, [r3]
 8004f6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	f023 0301 	bic.w	r3, r3, #1
 8004f72:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	3314      	adds	r3, #20
 8004f7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f84:	e841 2300 	strex	r3, r2, [r1]
 8004f88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1e5      	bne.n	8004f5c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d119      	bne.n	8004fcc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	330c      	adds	r3, #12
 8004f9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	e853 3f00 	ldrex	r3, [r3]
 8004fa6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	f023 0310 	bic.w	r3, r3, #16
 8004fae:	647b      	str	r3, [r7, #68]	; 0x44
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	330c      	adds	r3, #12
 8004fb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fb8:	61ba      	str	r2, [r7, #24]
 8004fba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fbc:	6979      	ldr	r1, [r7, #20]
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	e841 2300 	strex	r3, r2, [r1]
 8004fc4:	613b      	str	r3, [r7, #16]
   return(result);
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1e5      	bne.n	8004f98 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004fda:	bf00      	nop
 8004fdc:	3754      	adds	r7, #84	; 0x54
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b084      	sub	sp, #16
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	f7ff fecb 	bl	8004d9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005006:	bf00      	nop
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800500e:	b480      	push	{r7}
 8005010:	b085      	sub	sp, #20
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b21      	cmp	r3, #33	; 0x21
 8005020:	d13e      	bne.n	80050a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800502a:	d114      	bne.n	8005056 <UART_Transmit_IT+0x48>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d110      	bne.n	8005056 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	881b      	ldrh	r3, [r3, #0]
 800503e:	461a      	mov	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005048:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	1c9a      	adds	r2, r3, #2
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	621a      	str	r2, [r3, #32]
 8005054:	e008      	b.n	8005068 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	1c59      	adds	r1, r3, #1
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	6211      	str	r1, [r2, #32]
 8005060:	781a      	ldrb	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800506c:	b29b      	uxth	r3, r3
 800506e:	3b01      	subs	r3, #1
 8005070:	b29b      	uxth	r3, r3
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	4619      	mov	r1, r3
 8005076:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10f      	bne.n	800509c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68da      	ldr	r2, [r3, #12]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800508a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68da      	ldr	r2, [r3, #12]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800509a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800509c:	2300      	movs	r3, #0
 800509e:	e000      	b.n	80050a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050a0:	2302      	movs	r3, #2
  }
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b082      	sub	sp, #8
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68da      	ldr	r2, [r3, #12]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2220      	movs	r2, #32
 80050ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f7ff fe5a 	bl	8004d88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b08c      	sub	sp, #48	; 0x30
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b22      	cmp	r3, #34	; 0x22
 80050f0:	f040 80ab 	bne.w	800524a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050fc:	d117      	bne.n	800512e <UART_Receive_IT+0x50>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d113      	bne.n	800512e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005106:	2300      	movs	r3, #0
 8005108:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	b29b      	uxth	r3, r3
 8005118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800511c:	b29a      	uxth	r2, r3
 800511e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005120:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005126:	1c9a      	adds	r2, r3, #2
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	629a      	str	r2, [r3, #40]	; 0x28
 800512c:	e026      	b.n	800517c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005132:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005134:	2300      	movs	r3, #0
 8005136:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005140:	d007      	beq.n	8005152 <UART_Receive_IT+0x74>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10a      	bne.n	8005160 <UART_Receive_IT+0x82>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d106      	bne.n	8005160 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	b2da      	uxtb	r2, r3
 800515a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515c:	701a      	strb	r2, [r3, #0]
 800515e:	e008      	b.n	8005172 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	b2db      	uxtb	r3, r3
 8005168:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800516c:	b2da      	uxtb	r2, r3
 800516e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005170:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005176:	1c5a      	adds	r2, r3, #1
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005180:	b29b      	uxth	r3, r3
 8005182:	3b01      	subs	r3, #1
 8005184:	b29b      	uxth	r3, r3
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	4619      	mov	r1, r3
 800518a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800518c:	2b00      	cmp	r3, #0
 800518e:	d15a      	bne.n	8005246 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68da      	ldr	r2, [r3, #12]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f022 0220 	bic.w	r2, r2, #32
 800519e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68da      	ldr	r2, [r3, #12]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	695a      	ldr	r2, [r3, #20]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f022 0201 	bic.w	r2, r2, #1
 80051be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2220      	movs	r2, #32
 80051c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d135      	bne.n	800523c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	330c      	adds	r3, #12
 80051dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	e853 3f00 	ldrex	r3, [r3]
 80051e4:	613b      	str	r3, [r7, #16]
   return(result);
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	f023 0310 	bic.w	r3, r3, #16
 80051ec:	627b      	str	r3, [r7, #36]	; 0x24
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	330c      	adds	r3, #12
 80051f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051f6:	623a      	str	r2, [r7, #32]
 80051f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fa:	69f9      	ldr	r1, [r7, #28]
 80051fc:	6a3a      	ldr	r2, [r7, #32]
 80051fe:	e841 2300 	strex	r3, r2, [r1]
 8005202:	61bb      	str	r3, [r7, #24]
   return(result);
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1e5      	bne.n	80051d6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0310 	and.w	r3, r3, #16
 8005214:	2b10      	cmp	r3, #16
 8005216:	d10a      	bne.n	800522e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005218:	2300      	movs	r3, #0
 800521a:	60fb      	str	r3, [r7, #12]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	60fb      	str	r3, [r7, #12]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	60fb      	str	r3, [r7, #12]
 800522c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005232:	4619      	mov	r1, r3
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f7ff fdbb 	bl	8004db0 <HAL_UARTEx_RxEventCallback>
 800523a:	e002      	b.n	8005242 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f7fb febf 	bl	8000fc0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005242:	2300      	movs	r3, #0
 8005244:	e002      	b.n	800524c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005246:	2300      	movs	r3, #0
 8005248:	e000      	b.n	800524c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800524a:	2302      	movs	r3, #2
  }
}
 800524c:	4618      	mov	r0, r3
 800524e:	3730      	adds	r7, #48	; 0x30
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005258:	b0c0      	sub	sp, #256	; 0x100
 800525a:	af00      	add	r7, sp, #0
 800525c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800526c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005270:	68d9      	ldr	r1, [r3, #12]
 8005272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	ea40 0301 	orr.w	r3, r0, r1
 800527c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800527e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	431a      	orrs	r2, r3
 800528c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	431a      	orrs	r2, r3
 8005294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	4313      	orrs	r3, r2
 800529c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80052a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80052ac:	f021 010c 	bic.w	r1, r1, #12
 80052b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052ba:	430b      	orrs	r3, r1
 80052bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80052ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ce:	6999      	ldr	r1, [r3, #24]
 80052d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	ea40 0301 	orr.w	r3, r0, r1
 80052da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	4b8f      	ldr	r3, [pc, #572]	; (8005520 <UART_SetConfig+0x2cc>)
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d005      	beq.n	80052f4 <UART_SetConfig+0xa0>
 80052e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	4b8d      	ldr	r3, [pc, #564]	; (8005524 <UART_SetConfig+0x2d0>)
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d104      	bne.n	80052fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052f4:	f7fd fdf0 	bl	8002ed8 <HAL_RCC_GetPCLK2Freq>
 80052f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80052fc:	e003      	b.n	8005306 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052fe:	f7fd fdd7 	bl	8002eb0 <HAL_RCC_GetPCLK1Freq>
 8005302:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005310:	f040 810c 	bne.w	800552c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005314:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005318:	2200      	movs	r2, #0
 800531a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800531e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005322:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005326:	4622      	mov	r2, r4
 8005328:	462b      	mov	r3, r5
 800532a:	1891      	adds	r1, r2, r2
 800532c:	65b9      	str	r1, [r7, #88]	; 0x58
 800532e:	415b      	adcs	r3, r3
 8005330:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005332:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005336:	4621      	mov	r1, r4
 8005338:	eb12 0801 	adds.w	r8, r2, r1
 800533c:	4629      	mov	r1, r5
 800533e:	eb43 0901 	adc.w	r9, r3, r1
 8005342:	f04f 0200 	mov.w	r2, #0
 8005346:	f04f 0300 	mov.w	r3, #0
 800534a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800534e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005352:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005356:	4690      	mov	r8, r2
 8005358:	4699      	mov	r9, r3
 800535a:	4623      	mov	r3, r4
 800535c:	eb18 0303 	adds.w	r3, r8, r3
 8005360:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005364:	462b      	mov	r3, r5
 8005366:	eb49 0303 	adc.w	r3, r9, r3
 800536a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800536e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800537a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800537e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005382:	460b      	mov	r3, r1
 8005384:	18db      	adds	r3, r3, r3
 8005386:	653b      	str	r3, [r7, #80]	; 0x50
 8005388:	4613      	mov	r3, r2
 800538a:	eb42 0303 	adc.w	r3, r2, r3
 800538e:	657b      	str	r3, [r7, #84]	; 0x54
 8005390:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005394:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005398:	f7fb fc58 	bl	8000c4c <__aeabi_uldivmod>
 800539c:	4602      	mov	r2, r0
 800539e:	460b      	mov	r3, r1
 80053a0:	4b61      	ldr	r3, [pc, #388]	; (8005528 <UART_SetConfig+0x2d4>)
 80053a2:	fba3 2302 	umull	r2, r3, r3, r2
 80053a6:	095b      	lsrs	r3, r3, #5
 80053a8:	011c      	lsls	r4, r3, #4
 80053aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053ae:	2200      	movs	r2, #0
 80053b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80053b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80053bc:	4642      	mov	r2, r8
 80053be:	464b      	mov	r3, r9
 80053c0:	1891      	adds	r1, r2, r2
 80053c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80053c4:	415b      	adcs	r3, r3
 80053c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80053cc:	4641      	mov	r1, r8
 80053ce:	eb12 0a01 	adds.w	sl, r2, r1
 80053d2:	4649      	mov	r1, r9
 80053d4:	eb43 0b01 	adc.w	fp, r3, r1
 80053d8:	f04f 0200 	mov.w	r2, #0
 80053dc:	f04f 0300 	mov.w	r3, #0
 80053e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80053e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80053e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053ec:	4692      	mov	sl, r2
 80053ee:	469b      	mov	fp, r3
 80053f0:	4643      	mov	r3, r8
 80053f2:	eb1a 0303 	adds.w	r3, sl, r3
 80053f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053fa:	464b      	mov	r3, r9
 80053fc:	eb4b 0303 	adc.w	r3, fp, r3
 8005400:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005410:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005414:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005418:	460b      	mov	r3, r1
 800541a:	18db      	adds	r3, r3, r3
 800541c:	643b      	str	r3, [r7, #64]	; 0x40
 800541e:	4613      	mov	r3, r2
 8005420:	eb42 0303 	adc.w	r3, r2, r3
 8005424:	647b      	str	r3, [r7, #68]	; 0x44
 8005426:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800542a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800542e:	f7fb fc0d 	bl	8000c4c <__aeabi_uldivmod>
 8005432:	4602      	mov	r2, r0
 8005434:	460b      	mov	r3, r1
 8005436:	4611      	mov	r1, r2
 8005438:	4b3b      	ldr	r3, [pc, #236]	; (8005528 <UART_SetConfig+0x2d4>)
 800543a:	fba3 2301 	umull	r2, r3, r3, r1
 800543e:	095b      	lsrs	r3, r3, #5
 8005440:	2264      	movs	r2, #100	; 0x64
 8005442:	fb02 f303 	mul.w	r3, r2, r3
 8005446:	1acb      	subs	r3, r1, r3
 8005448:	00db      	lsls	r3, r3, #3
 800544a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800544e:	4b36      	ldr	r3, [pc, #216]	; (8005528 <UART_SetConfig+0x2d4>)
 8005450:	fba3 2302 	umull	r2, r3, r3, r2
 8005454:	095b      	lsrs	r3, r3, #5
 8005456:	005b      	lsls	r3, r3, #1
 8005458:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800545c:	441c      	add	r4, r3
 800545e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005462:	2200      	movs	r2, #0
 8005464:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005468:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800546c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005470:	4642      	mov	r2, r8
 8005472:	464b      	mov	r3, r9
 8005474:	1891      	adds	r1, r2, r2
 8005476:	63b9      	str	r1, [r7, #56]	; 0x38
 8005478:	415b      	adcs	r3, r3
 800547a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800547c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005480:	4641      	mov	r1, r8
 8005482:	1851      	adds	r1, r2, r1
 8005484:	6339      	str	r1, [r7, #48]	; 0x30
 8005486:	4649      	mov	r1, r9
 8005488:	414b      	adcs	r3, r1
 800548a:	637b      	str	r3, [r7, #52]	; 0x34
 800548c:	f04f 0200 	mov.w	r2, #0
 8005490:	f04f 0300 	mov.w	r3, #0
 8005494:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005498:	4659      	mov	r1, fp
 800549a:	00cb      	lsls	r3, r1, #3
 800549c:	4651      	mov	r1, sl
 800549e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054a2:	4651      	mov	r1, sl
 80054a4:	00ca      	lsls	r2, r1, #3
 80054a6:	4610      	mov	r0, r2
 80054a8:	4619      	mov	r1, r3
 80054aa:	4603      	mov	r3, r0
 80054ac:	4642      	mov	r2, r8
 80054ae:	189b      	adds	r3, r3, r2
 80054b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054b4:	464b      	mov	r3, r9
 80054b6:	460a      	mov	r2, r1
 80054b8:	eb42 0303 	adc.w	r3, r2, r3
 80054bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80054cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80054d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80054d4:	460b      	mov	r3, r1
 80054d6:	18db      	adds	r3, r3, r3
 80054d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80054da:	4613      	mov	r3, r2
 80054dc:	eb42 0303 	adc.w	r3, r2, r3
 80054e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80054e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80054ea:	f7fb fbaf 	bl	8000c4c <__aeabi_uldivmod>
 80054ee:	4602      	mov	r2, r0
 80054f0:	460b      	mov	r3, r1
 80054f2:	4b0d      	ldr	r3, [pc, #52]	; (8005528 <UART_SetConfig+0x2d4>)
 80054f4:	fba3 1302 	umull	r1, r3, r3, r2
 80054f8:	095b      	lsrs	r3, r3, #5
 80054fa:	2164      	movs	r1, #100	; 0x64
 80054fc:	fb01 f303 	mul.w	r3, r1, r3
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	3332      	adds	r3, #50	; 0x32
 8005506:	4a08      	ldr	r2, [pc, #32]	; (8005528 <UART_SetConfig+0x2d4>)
 8005508:	fba2 2303 	umull	r2, r3, r2, r3
 800550c:	095b      	lsrs	r3, r3, #5
 800550e:	f003 0207 	and.w	r2, r3, #7
 8005512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4422      	add	r2, r4
 800551a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800551c:	e105      	b.n	800572a <UART_SetConfig+0x4d6>
 800551e:	bf00      	nop
 8005520:	40011000 	.word	0x40011000
 8005524:	40011400 	.word	0x40011400
 8005528:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800552c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005530:	2200      	movs	r2, #0
 8005532:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005536:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800553a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800553e:	4642      	mov	r2, r8
 8005540:	464b      	mov	r3, r9
 8005542:	1891      	adds	r1, r2, r2
 8005544:	6239      	str	r1, [r7, #32]
 8005546:	415b      	adcs	r3, r3
 8005548:	627b      	str	r3, [r7, #36]	; 0x24
 800554a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800554e:	4641      	mov	r1, r8
 8005550:	1854      	adds	r4, r2, r1
 8005552:	4649      	mov	r1, r9
 8005554:	eb43 0501 	adc.w	r5, r3, r1
 8005558:	f04f 0200 	mov.w	r2, #0
 800555c:	f04f 0300 	mov.w	r3, #0
 8005560:	00eb      	lsls	r3, r5, #3
 8005562:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005566:	00e2      	lsls	r2, r4, #3
 8005568:	4614      	mov	r4, r2
 800556a:	461d      	mov	r5, r3
 800556c:	4643      	mov	r3, r8
 800556e:	18e3      	adds	r3, r4, r3
 8005570:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005574:	464b      	mov	r3, r9
 8005576:	eb45 0303 	adc.w	r3, r5, r3
 800557a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800557e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800558a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800558e:	f04f 0200 	mov.w	r2, #0
 8005592:	f04f 0300 	mov.w	r3, #0
 8005596:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800559a:	4629      	mov	r1, r5
 800559c:	008b      	lsls	r3, r1, #2
 800559e:	4621      	mov	r1, r4
 80055a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055a4:	4621      	mov	r1, r4
 80055a6:	008a      	lsls	r2, r1, #2
 80055a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80055ac:	f7fb fb4e 	bl	8000c4c <__aeabi_uldivmod>
 80055b0:	4602      	mov	r2, r0
 80055b2:	460b      	mov	r3, r1
 80055b4:	4b60      	ldr	r3, [pc, #384]	; (8005738 <UART_SetConfig+0x4e4>)
 80055b6:	fba3 2302 	umull	r2, r3, r3, r2
 80055ba:	095b      	lsrs	r3, r3, #5
 80055bc:	011c      	lsls	r4, r3, #4
 80055be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055c2:	2200      	movs	r2, #0
 80055c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80055c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80055cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80055d0:	4642      	mov	r2, r8
 80055d2:	464b      	mov	r3, r9
 80055d4:	1891      	adds	r1, r2, r2
 80055d6:	61b9      	str	r1, [r7, #24]
 80055d8:	415b      	adcs	r3, r3
 80055da:	61fb      	str	r3, [r7, #28]
 80055dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055e0:	4641      	mov	r1, r8
 80055e2:	1851      	adds	r1, r2, r1
 80055e4:	6139      	str	r1, [r7, #16]
 80055e6:	4649      	mov	r1, r9
 80055e8:	414b      	adcs	r3, r1
 80055ea:	617b      	str	r3, [r7, #20]
 80055ec:	f04f 0200 	mov.w	r2, #0
 80055f0:	f04f 0300 	mov.w	r3, #0
 80055f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055f8:	4659      	mov	r1, fp
 80055fa:	00cb      	lsls	r3, r1, #3
 80055fc:	4651      	mov	r1, sl
 80055fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005602:	4651      	mov	r1, sl
 8005604:	00ca      	lsls	r2, r1, #3
 8005606:	4610      	mov	r0, r2
 8005608:	4619      	mov	r1, r3
 800560a:	4603      	mov	r3, r0
 800560c:	4642      	mov	r2, r8
 800560e:	189b      	adds	r3, r3, r2
 8005610:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005614:	464b      	mov	r3, r9
 8005616:	460a      	mov	r2, r1
 8005618:	eb42 0303 	adc.w	r3, r2, r3
 800561c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	67bb      	str	r3, [r7, #120]	; 0x78
 800562a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800562c:	f04f 0200 	mov.w	r2, #0
 8005630:	f04f 0300 	mov.w	r3, #0
 8005634:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005638:	4649      	mov	r1, r9
 800563a:	008b      	lsls	r3, r1, #2
 800563c:	4641      	mov	r1, r8
 800563e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005642:	4641      	mov	r1, r8
 8005644:	008a      	lsls	r2, r1, #2
 8005646:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800564a:	f7fb faff 	bl	8000c4c <__aeabi_uldivmod>
 800564e:	4602      	mov	r2, r0
 8005650:	460b      	mov	r3, r1
 8005652:	4b39      	ldr	r3, [pc, #228]	; (8005738 <UART_SetConfig+0x4e4>)
 8005654:	fba3 1302 	umull	r1, r3, r3, r2
 8005658:	095b      	lsrs	r3, r3, #5
 800565a:	2164      	movs	r1, #100	; 0x64
 800565c:	fb01 f303 	mul.w	r3, r1, r3
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	011b      	lsls	r3, r3, #4
 8005664:	3332      	adds	r3, #50	; 0x32
 8005666:	4a34      	ldr	r2, [pc, #208]	; (8005738 <UART_SetConfig+0x4e4>)
 8005668:	fba2 2303 	umull	r2, r3, r2, r3
 800566c:	095b      	lsrs	r3, r3, #5
 800566e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005672:	441c      	add	r4, r3
 8005674:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005678:	2200      	movs	r2, #0
 800567a:	673b      	str	r3, [r7, #112]	; 0x70
 800567c:	677a      	str	r2, [r7, #116]	; 0x74
 800567e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005682:	4642      	mov	r2, r8
 8005684:	464b      	mov	r3, r9
 8005686:	1891      	adds	r1, r2, r2
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	415b      	adcs	r3, r3
 800568c:	60fb      	str	r3, [r7, #12]
 800568e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005692:	4641      	mov	r1, r8
 8005694:	1851      	adds	r1, r2, r1
 8005696:	6039      	str	r1, [r7, #0]
 8005698:	4649      	mov	r1, r9
 800569a:	414b      	adcs	r3, r1
 800569c:	607b      	str	r3, [r7, #4]
 800569e:	f04f 0200 	mov.w	r2, #0
 80056a2:	f04f 0300 	mov.w	r3, #0
 80056a6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80056aa:	4659      	mov	r1, fp
 80056ac:	00cb      	lsls	r3, r1, #3
 80056ae:	4651      	mov	r1, sl
 80056b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056b4:	4651      	mov	r1, sl
 80056b6:	00ca      	lsls	r2, r1, #3
 80056b8:	4610      	mov	r0, r2
 80056ba:	4619      	mov	r1, r3
 80056bc:	4603      	mov	r3, r0
 80056be:	4642      	mov	r2, r8
 80056c0:	189b      	adds	r3, r3, r2
 80056c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80056c4:	464b      	mov	r3, r9
 80056c6:	460a      	mov	r2, r1
 80056c8:	eb42 0303 	adc.w	r3, r2, r3
 80056cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	663b      	str	r3, [r7, #96]	; 0x60
 80056d8:	667a      	str	r2, [r7, #100]	; 0x64
 80056da:	f04f 0200 	mov.w	r2, #0
 80056de:	f04f 0300 	mov.w	r3, #0
 80056e2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80056e6:	4649      	mov	r1, r9
 80056e8:	008b      	lsls	r3, r1, #2
 80056ea:	4641      	mov	r1, r8
 80056ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056f0:	4641      	mov	r1, r8
 80056f2:	008a      	lsls	r2, r1, #2
 80056f4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80056f8:	f7fb faa8 	bl	8000c4c <__aeabi_uldivmod>
 80056fc:	4602      	mov	r2, r0
 80056fe:	460b      	mov	r3, r1
 8005700:	4b0d      	ldr	r3, [pc, #52]	; (8005738 <UART_SetConfig+0x4e4>)
 8005702:	fba3 1302 	umull	r1, r3, r3, r2
 8005706:	095b      	lsrs	r3, r3, #5
 8005708:	2164      	movs	r1, #100	; 0x64
 800570a:	fb01 f303 	mul.w	r3, r1, r3
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	011b      	lsls	r3, r3, #4
 8005712:	3332      	adds	r3, #50	; 0x32
 8005714:	4a08      	ldr	r2, [pc, #32]	; (8005738 <UART_SetConfig+0x4e4>)
 8005716:	fba2 2303 	umull	r2, r3, r2, r3
 800571a:	095b      	lsrs	r3, r3, #5
 800571c:	f003 020f 	and.w	r2, r3, #15
 8005720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4422      	add	r2, r4
 8005728:	609a      	str	r2, [r3, #8]
}
 800572a:	bf00      	nop
 800572c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005730:	46bd      	mov	sp, r7
 8005732:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005736:	bf00      	nop
 8005738:	51eb851f 	.word	0x51eb851f

0800573c <atof>:
 800573c:	2100      	movs	r1, #0
 800573e:	f000 be5d 	b.w	80063fc <strtod>
	...

08005744 <__errno>:
 8005744:	4b01      	ldr	r3, [pc, #4]	; (800574c <__errno+0x8>)
 8005746:	6818      	ldr	r0, [r3, #0]
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	2000000c 	.word	0x2000000c

08005750 <__libc_init_array>:
 8005750:	b570      	push	{r4, r5, r6, lr}
 8005752:	4d0d      	ldr	r5, [pc, #52]	; (8005788 <__libc_init_array+0x38>)
 8005754:	4c0d      	ldr	r4, [pc, #52]	; (800578c <__libc_init_array+0x3c>)
 8005756:	1b64      	subs	r4, r4, r5
 8005758:	10a4      	asrs	r4, r4, #2
 800575a:	2600      	movs	r6, #0
 800575c:	42a6      	cmp	r6, r4
 800575e:	d109      	bne.n	8005774 <__libc_init_array+0x24>
 8005760:	4d0b      	ldr	r5, [pc, #44]	; (8005790 <__libc_init_array+0x40>)
 8005762:	4c0c      	ldr	r4, [pc, #48]	; (8005794 <__libc_init_array+0x44>)
 8005764:	f002 fee4 	bl	8008530 <_init>
 8005768:	1b64      	subs	r4, r4, r5
 800576a:	10a4      	asrs	r4, r4, #2
 800576c:	2600      	movs	r6, #0
 800576e:	42a6      	cmp	r6, r4
 8005770:	d105      	bne.n	800577e <__libc_init_array+0x2e>
 8005772:	bd70      	pop	{r4, r5, r6, pc}
 8005774:	f855 3b04 	ldr.w	r3, [r5], #4
 8005778:	4798      	blx	r3
 800577a:	3601      	adds	r6, #1
 800577c:	e7ee      	b.n	800575c <__libc_init_array+0xc>
 800577e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005782:	4798      	blx	r3
 8005784:	3601      	adds	r6, #1
 8005786:	e7f2      	b.n	800576e <__libc_init_array+0x1e>
 8005788:	08008994 	.word	0x08008994
 800578c:	08008994 	.word	0x08008994
 8005790:	08008994 	.word	0x08008994
 8005794:	08008998 	.word	0x08008998

08005798 <memset>:
 8005798:	4402      	add	r2, r0
 800579a:	4603      	mov	r3, r0
 800579c:	4293      	cmp	r3, r2
 800579e:	d100      	bne.n	80057a2 <memset+0xa>
 80057a0:	4770      	bx	lr
 80057a2:	f803 1b01 	strb.w	r1, [r3], #1
 80057a6:	e7f9      	b.n	800579c <memset+0x4>

080057a8 <strcpy>:
 80057a8:	4603      	mov	r3, r0
 80057aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057ae:	f803 2b01 	strb.w	r2, [r3], #1
 80057b2:	2a00      	cmp	r2, #0
 80057b4:	d1f9      	bne.n	80057aa <strcpy+0x2>
 80057b6:	4770      	bx	lr

080057b8 <sulp>:
 80057b8:	b570      	push	{r4, r5, r6, lr}
 80057ba:	4604      	mov	r4, r0
 80057bc:	460d      	mov	r5, r1
 80057be:	ec45 4b10 	vmov	d0, r4, r5
 80057c2:	4616      	mov	r6, r2
 80057c4:	f001 fd28 	bl	8007218 <__ulp>
 80057c8:	ec51 0b10 	vmov	r0, r1, d0
 80057cc:	b17e      	cbz	r6, 80057ee <sulp+0x36>
 80057ce:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80057d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	dd09      	ble.n	80057ee <sulp+0x36>
 80057da:	051b      	lsls	r3, r3, #20
 80057dc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80057e0:	2400      	movs	r4, #0
 80057e2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80057e6:	4622      	mov	r2, r4
 80057e8:	462b      	mov	r3, r5
 80057ea:	f7fa ff25 	bl	8000638 <__aeabi_dmul>
 80057ee:	bd70      	pop	{r4, r5, r6, pc}

080057f0 <_strtod_l>:
 80057f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f4:	ed2d 8b02 	vpush	{d8}
 80057f8:	b09d      	sub	sp, #116	; 0x74
 80057fa:	461f      	mov	r7, r3
 80057fc:	2300      	movs	r3, #0
 80057fe:	9318      	str	r3, [sp, #96]	; 0x60
 8005800:	4ba2      	ldr	r3, [pc, #648]	; (8005a8c <_strtod_l+0x29c>)
 8005802:	9213      	str	r2, [sp, #76]	; 0x4c
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	9305      	str	r3, [sp, #20]
 8005808:	4604      	mov	r4, r0
 800580a:	4618      	mov	r0, r3
 800580c:	4688      	mov	r8, r1
 800580e:	f7fa fcff 	bl	8000210 <strlen>
 8005812:	f04f 0a00 	mov.w	sl, #0
 8005816:	4605      	mov	r5, r0
 8005818:	f04f 0b00 	mov.w	fp, #0
 800581c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005820:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005822:	781a      	ldrb	r2, [r3, #0]
 8005824:	2a2b      	cmp	r2, #43	; 0x2b
 8005826:	d04e      	beq.n	80058c6 <_strtod_l+0xd6>
 8005828:	d83b      	bhi.n	80058a2 <_strtod_l+0xb2>
 800582a:	2a0d      	cmp	r2, #13
 800582c:	d834      	bhi.n	8005898 <_strtod_l+0xa8>
 800582e:	2a08      	cmp	r2, #8
 8005830:	d834      	bhi.n	800589c <_strtod_l+0xac>
 8005832:	2a00      	cmp	r2, #0
 8005834:	d03e      	beq.n	80058b4 <_strtod_l+0xc4>
 8005836:	2300      	movs	r3, #0
 8005838:	930a      	str	r3, [sp, #40]	; 0x28
 800583a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800583c:	7833      	ldrb	r3, [r6, #0]
 800583e:	2b30      	cmp	r3, #48	; 0x30
 8005840:	f040 80b0 	bne.w	80059a4 <_strtod_l+0x1b4>
 8005844:	7873      	ldrb	r3, [r6, #1]
 8005846:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800584a:	2b58      	cmp	r3, #88	; 0x58
 800584c:	d168      	bne.n	8005920 <_strtod_l+0x130>
 800584e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005850:	9301      	str	r3, [sp, #4]
 8005852:	ab18      	add	r3, sp, #96	; 0x60
 8005854:	9702      	str	r7, [sp, #8]
 8005856:	9300      	str	r3, [sp, #0]
 8005858:	4a8d      	ldr	r2, [pc, #564]	; (8005a90 <_strtod_l+0x2a0>)
 800585a:	ab19      	add	r3, sp, #100	; 0x64
 800585c:	a917      	add	r1, sp, #92	; 0x5c
 800585e:	4620      	mov	r0, r4
 8005860:	f000 fe40 	bl	80064e4 <__gethex>
 8005864:	f010 0707 	ands.w	r7, r0, #7
 8005868:	4605      	mov	r5, r0
 800586a:	d005      	beq.n	8005878 <_strtod_l+0x88>
 800586c:	2f06      	cmp	r7, #6
 800586e:	d12c      	bne.n	80058ca <_strtod_l+0xda>
 8005870:	3601      	adds	r6, #1
 8005872:	2300      	movs	r3, #0
 8005874:	9617      	str	r6, [sp, #92]	; 0x5c
 8005876:	930a      	str	r3, [sp, #40]	; 0x28
 8005878:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800587a:	2b00      	cmp	r3, #0
 800587c:	f040 8590 	bne.w	80063a0 <_strtod_l+0xbb0>
 8005880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005882:	b1eb      	cbz	r3, 80058c0 <_strtod_l+0xd0>
 8005884:	4652      	mov	r2, sl
 8005886:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800588a:	ec43 2b10 	vmov	d0, r2, r3
 800588e:	b01d      	add	sp, #116	; 0x74
 8005890:	ecbd 8b02 	vpop	{d8}
 8005894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005898:	2a20      	cmp	r2, #32
 800589a:	d1cc      	bne.n	8005836 <_strtod_l+0x46>
 800589c:	3301      	adds	r3, #1
 800589e:	9317      	str	r3, [sp, #92]	; 0x5c
 80058a0:	e7be      	b.n	8005820 <_strtod_l+0x30>
 80058a2:	2a2d      	cmp	r2, #45	; 0x2d
 80058a4:	d1c7      	bne.n	8005836 <_strtod_l+0x46>
 80058a6:	2201      	movs	r2, #1
 80058a8:	920a      	str	r2, [sp, #40]	; 0x28
 80058aa:	1c5a      	adds	r2, r3, #1
 80058ac:	9217      	str	r2, [sp, #92]	; 0x5c
 80058ae:	785b      	ldrb	r3, [r3, #1]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1c2      	bne.n	800583a <_strtod_l+0x4a>
 80058b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80058b6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f040 856e 	bne.w	800639c <_strtod_l+0xbac>
 80058c0:	4652      	mov	r2, sl
 80058c2:	465b      	mov	r3, fp
 80058c4:	e7e1      	b.n	800588a <_strtod_l+0x9a>
 80058c6:	2200      	movs	r2, #0
 80058c8:	e7ee      	b.n	80058a8 <_strtod_l+0xb8>
 80058ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80058cc:	b13a      	cbz	r2, 80058de <_strtod_l+0xee>
 80058ce:	2135      	movs	r1, #53	; 0x35
 80058d0:	a81a      	add	r0, sp, #104	; 0x68
 80058d2:	f001 fdac 	bl	800742e <__copybits>
 80058d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80058d8:	4620      	mov	r0, r4
 80058da:	f001 f96b 	bl	8006bb4 <_Bfree>
 80058de:	3f01      	subs	r7, #1
 80058e0:	2f04      	cmp	r7, #4
 80058e2:	d806      	bhi.n	80058f2 <_strtod_l+0x102>
 80058e4:	e8df f007 	tbb	[pc, r7]
 80058e8:	1714030a 	.word	0x1714030a
 80058ec:	0a          	.byte	0x0a
 80058ed:	00          	.byte	0x00
 80058ee:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80058f2:	0728      	lsls	r0, r5, #28
 80058f4:	d5c0      	bpl.n	8005878 <_strtod_l+0x88>
 80058f6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80058fa:	e7bd      	b.n	8005878 <_strtod_l+0x88>
 80058fc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005900:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005902:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005906:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800590a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800590e:	e7f0      	b.n	80058f2 <_strtod_l+0x102>
 8005910:	f8df b180 	ldr.w	fp, [pc, #384]	; 8005a94 <_strtod_l+0x2a4>
 8005914:	e7ed      	b.n	80058f2 <_strtod_l+0x102>
 8005916:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800591a:	f04f 3aff 	mov.w	sl, #4294967295
 800591e:	e7e8      	b.n	80058f2 <_strtod_l+0x102>
 8005920:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005922:	1c5a      	adds	r2, r3, #1
 8005924:	9217      	str	r2, [sp, #92]	; 0x5c
 8005926:	785b      	ldrb	r3, [r3, #1]
 8005928:	2b30      	cmp	r3, #48	; 0x30
 800592a:	d0f9      	beq.n	8005920 <_strtod_l+0x130>
 800592c:	2b00      	cmp	r3, #0
 800592e:	d0a3      	beq.n	8005878 <_strtod_l+0x88>
 8005930:	2301      	movs	r3, #1
 8005932:	f04f 0900 	mov.w	r9, #0
 8005936:	9304      	str	r3, [sp, #16]
 8005938:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800593a:	9308      	str	r3, [sp, #32]
 800593c:	f8cd 901c 	str.w	r9, [sp, #28]
 8005940:	464f      	mov	r7, r9
 8005942:	220a      	movs	r2, #10
 8005944:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005946:	7806      	ldrb	r6, [r0, #0]
 8005948:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800594c:	b2d9      	uxtb	r1, r3
 800594e:	2909      	cmp	r1, #9
 8005950:	d92a      	bls.n	80059a8 <_strtod_l+0x1b8>
 8005952:	9905      	ldr	r1, [sp, #20]
 8005954:	462a      	mov	r2, r5
 8005956:	f001 fe73 	bl	8007640 <strncmp>
 800595a:	b398      	cbz	r0, 80059c4 <_strtod_l+0x1d4>
 800595c:	2000      	movs	r0, #0
 800595e:	4632      	mov	r2, r6
 8005960:	463d      	mov	r5, r7
 8005962:	9005      	str	r0, [sp, #20]
 8005964:	4603      	mov	r3, r0
 8005966:	2a65      	cmp	r2, #101	; 0x65
 8005968:	d001      	beq.n	800596e <_strtod_l+0x17e>
 800596a:	2a45      	cmp	r2, #69	; 0x45
 800596c:	d118      	bne.n	80059a0 <_strtod_l+0x1b0>
 800596e:	b91d      	cbnz	r5, 8005978 <_strtod_l+0x188>
 8005970:	9a04      	ldr	r2, [sp, #16]
 8005972:	4302      	orrs	r2, r0
 8005974:	d09e      	beq.n	80058b4 <_strtod_l+0xc4>
 8005976:	2500      	movs	r5, #0
 8005978:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800597c:	f108 0201 	add.w	r2, r8, #1
 8005980:	9217      	str	r2, [sp, #92]	; 0x5c
 8005982:	f898 2001 	ldrb.w	r2, [r8, #1]
 8005986:	2a2b      	cmp	r2, #43	; 0x2b
 8005988:	d075      	beq.n	8005a76 <_strtod_l+0x286>
 800598a:	2a2d      	cmp	r2, #45	; 0x2d
 800598c:	d07b      	beq.n	8005a86 <_strtod_l+0x296>
 800598e:	f04f 0c00 	mov.w	ip, #0
 8005992:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005996:	2909      	cmp	r1, #9
 8005998:	f240 8082 	bls.w	8005aa0 <_strtod_l+0x2b0>
 800599c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80059a0:	2600      	movs	r6, #0
 80059a2:	e09d      	b.n	8005ae0 <_strtod_l+0x2f0>
 80059a4:	2300      	movs	r3, #0
 80059a6:	e7c4      	b.n	8005932 <_strtod_l+0x142>
 80059a8:	2f08      	cmp	r7, #8
 80059aa:	bfd8      	it	le
 80059ac:	9907      	ldrle	r1, [sp, #28]
 80059ae:	f100 0001 	add.w	r0, r0, #1
 80059b2:	bfda      	itte	le
 80059b4:	fb02 3301 	mlale	r3, r2, r1, r3
 80059b8:	9307      	strle	r3, [sp, #28]
 80059ba:	fb02 3909 	mlagt	r9, r2, r9, r3
 80059be:	3701      	adds	r7, #1
 80059c0:	9017      	str	r0, [sp, #92]	; 0x5c
 80059c2:	e7bf      	b.n	8005944 <_strtod_l+0x154>
 80059c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80059c6:	195a      	adds	r2, r3, r5
 80059c8:	9217      	str	r2, [sp, #92]	; 0x5c
 80059ca:	5d5a      	ldrb	r2, [r3, r5]
 80059cc:	2f00      	cmp	r7, #0
 80059ce:	d037      	beq.n	8005a40 <_strtod_l+0x250>
 80059d0:	9005      	str	r0, [sp, #20]
 80059d2:	463d      	mov	r5, r7
 80059d4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80059d8:	2b09      	cmp	r3, #9
 80059da:	d912      	bls.n	8005a02 <_strtod_l+0x212>
 80059dc:	2301      	movs	r3, #1
 80059de:	e7c2      	b.n	8005966 <_strtod_l+0x176>
 80059e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80059e2:	1c5a      	adds	r2, r3, #1
 80059e4:	9217      	str	r2, [sp, #92]	; 0x5c
 80059e6:	785a      	ldrb	r2, [r3, #1]
 80059e8:	3001      	adds	r0, #1
 80059ea:	2a30      	cmp	r2, #48	; 0x30
 80059ec:	d0f8      	beq.n	80059e0 <_strtod_l+0x1f0>
 80059ee:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80059f2:	2b08      	cmp	r3, #8
 80059f4:	f200 84d9 	bhi.w	80063aa <_strtod_l+0xbba>
 80059f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80059fa:	9005      	str	r0, [sp, #20]
 80059fc:	2000      	movs	r0, #0
 80059fe:	9308      	str	r3, [sp, #32]
 8005a00:	4605      	mov	r5, r0
 8005a02:	3a30      	subs	r2, #48	; 0x30
 8005a04:	f100 0301 	add.w	r3, r0, #1
 8005a08:	d014      	beq.n	8005a34 <_strtod_l+0x244>
 8005a0a:	9905      	ldr	r1, [sp, #20]
 8005a0c:	4419      	add	r1, r3
 8005a0e:	9105      	str	r1, [sp, #20]
 8005a10:	462b      	mov	r3, r5
 8005a12:	eb00 0e05 	add.w	lr, r0, r5
 8005a16:	210a      	movs	r1, #10
 8005a18:	4573      	cmp	r3, lr
 8005a1a:	d113      	bne.n	8005a44 <_strtod_l+0x254>
 8005a1c:	182b      	adds	r3, r5, r0
 8005a1e:	2b08      	cmp	r3, #8
 8005a20:	f105 0501 	add.w	r5, r5, #1
 8005a24:	4405      	add	r5, r0
 8005a26:	dc1c      	bgt.n	8005a62 <_strtod_l+0x272>
 8005a28:	9907      	ldr	r1, [sp, #28]
 8005a2a:	230a      	movs	r3, #10
 8005a2c:	fb03 2301 	mla	r3, r3, r1, r2
 8005a30:	9307      	str	r3, [sp, #28]
 8005a32:	2300      	movs	r3, #0
 8005a34:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005a36:	1c51      	adds	r1, r2, #1
 8005a38:	9117      	str	r1, [sp, #92]	; 0x5c
 8005a3a:	7852      	ldrb	r2, [r2, #1]
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	e7c9      	b.n	80059d4 <_strtod_l+0x1e4>
 8005a40:	4638      	mov	r0, r7
 8005a42:	e7d2      	b.n	80059ea <_strtod_l+0x1fa>
 8005a44:	2b08      	cmp	r3, #8
 8005a46:	dc04      	bgt.n	8005a52 <_strtod_l+0x262>
 8005a48:	9e07      	ldr	r6, [sp, #28]
 8005a4a:	434e      	muls	r6, r1
 8005a4c:	9607      	str	r6, [sp, #28]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	e7e2      	b.n	8005a18 <_strtod_l+0x228>
 8005a52:	f103 0c01 	add.w	ip, r3, #1
 8005a56:	f1bc 0f10 	cmp.w	ip, #16
 8005a5a:	bfd8      	it	le
 8005a5c:	fb01 f909 	mulle.w	r9, r1, r9
 8005a60:	e7f5      	b.n	8005a4e <_strtod_l+0x25e>
 8005a62:	2d10      	cmp	r5, #16
 8005a64:	bfdc      	itt	le
 8005a66:	230a      	movle	r3, #10
 8005a68:	fb03 2909 	mlale	r9, r3, r9, r2
 8005a6c:	e7e1      	b.n	8005a32 <_strtod_l+0x242>
 8005a6e:	2300      	movs	r3, #0
 8005a70:	9305      	str	r3, [sp, #20]
 8005a72:	2301      	movs	r3, #1
 8005a74:	e77c      	b.n	8005970 <_strtod_l+0x180>
 8005a76:	f04f 0c00 	mov.w	ip, #0
 8005a7a:	f108 0202 	add.w	r2, r8, #2
 8005a7e:	9217      	str	r2, [sp, #92]	; 0x5c
 8005a80:	f898 2002 	ldrb.w	r2, [r8, #2]
 8005a84:	e785      	b.n	8005992 <_strtod_l+0x1a2>
 8005a86:	f04f 0c01 	mov.w	ip, #1
 8005a8a:	e7f6      	b.n	8005a7a <_strtod_l+0x28a>
 8005a8c:	08008638 	.word	0x08008638
 8005a90:	08008570 	.word	0x08008570
 8005a94:	7ff00000 	.word	0x7ff00000
 8005a98:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005a9a:	1c51      	adds	r1, r2, #1
 8005a9c:	9117      	str	r1, [sp, #92]	; 0x5c
 8005a9e:	7852      	ldrb	r2, [r2, #1]
 8005aa0:	2a30      	cmp	r2, #48	; 0x30
 8005aa2:	d0f9      	beq.n	8005a98 <_strtod_l+0x2a8>
 8005aa4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005aa8:	2908      	cmp	r1, #8
 8005aaa:	f63f af79 	bhi.w	80059a0 <_strtod_l+0x1b0>
 8005aae:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005ab2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005ab4:	9206      	str	r2, [sp, #24]
 8005ab6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005ab8:	1c51      	adds	r1, r2, #1
 8005aba:	9117      	str	r1, [sp, #92]	; 0x5c
 8005abc:	7852      	ldrb	r2, [r2, #1]
 8005abe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8005ac2:	2e09      	cmp	r6, #9
 8005ac4:	d937      	bls.n	8005b36 <_strtod_l+0x346>
 8005ac6:	9e06      	ldr	r6, [sp, #24]
 8005ac8:	1b89      	subs	r1, r1, r6
 8005aca:	2908      	cmp	r1, #8
 8005acc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005ad0:	dc02      	bgt.n	8005ad8 <_strtod_l+0x2e8>
 8005ad2:	4576      	cmp	r6, lr
 8005ad4:	bfa8      	it	ge
 8005ad6:	4676      	movge	r6, lr
 8005ad8:	f1bc 0f00 	cmp.w	ip, #0
 8005adc:	d000      	beq.n	8005ae0 <_strtod_l+0x2f0>
 8005ade:	4276      	negs	r6, r6
 8005ae0:	2d00      	cmp	r5, #0
 8005ae2:	d14d      	bne.n	8005b80 <_strtod_l+0x390>
 8005ae4:	9904      	ldr	r1, [sp, #16]
 8005ae6:	4301      	orrs	r1, r0
 8005ae8:	f47f aec6 	bne.w	8005878 <_strtod_l+0x88>
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f47f aee1 	bne.w	80058b4 <_strtod_l+0xc4>
 8005af2:	2a69      	cmp	r2, #105	; 0x69
 8005af4:	d027      	beq.n	8005b46 <_strtod_l+0x356>
 8005af6:	dc24      	bgt.n	8005b42 <_strtod_l+0x352>
 8005af8:	2a49      	cmp	r2, #73	; 0x49
 8005afa:	d024      	beq.n	8005b46 <_strtod_l+0x356>
 8005afc:	2a4e      	cmp	r2, #78	; 0x4e
 8005afe:	f47f aed9 	bne.w	80058b4 <_strtod_l+0xc4>
 8005b02:	499f      	ldr	r1, [pc, #636]	; (8005d80 <_strtod_l+0x590>)
 8005b04:	a817      	add	r0, sp, #92	; 0x5c
 8005b06:	f000 ff45 	bl	8006994 <__match>
 8005b0a:	2800      	cmp	r0, #0
 8005b0c:	f43f aed2 	beq.w	80058b4 <_strtod_l+0xc4>
 8005b10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	2b28      	cmp	r3, #40	; 0x28
 8005b16:	d12d      	bne.n	8005b74 <_strtod_l+0x384>
 8005b18:	499a      	ldr	r1, [pc, #616]	; (8005d84 <_strtod_l+0x594>)
 8005b1a:	aa1a      	add	r2, sp, #104	; 0x68
 8005b1c:	a817      	add	r0, sp, #92	; 0x5c
 8005b1e:	f000 ff4d 	bl	80069bc <__hexnan>
 8005b22:	2805      	cmp	r0, #5
 8005b24:	d126      	bne.n	8005b74 <_strtod_l+0x384>
 8005b26:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b28:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8005b2c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005b30:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005b34:	e6a0      	b.n	8005878 <_strtod_l+0x88>
 8005b36:	210a      	movs	r1, #10
 8005b38:	fb01 2e0e 	mla	lr, r1, lr, r2
 8005b3c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005b40:	e7b9      	b.n	8005ab6 <_strtod_l+0x2c6>
 8005b42:	2a6e      	cmp	r2, #110	; 0x6e
 8005b44:	e7db      	b.n	8005afe <_strtod_l+0x30e>
 8005b46:	4990      	ldr	r1, [pc, #576]	; (8005d88 <_strtod_l+0x598>)
 8005b48:	a817      	add	r0, sp, #92	; 0x5c
 8005b4a:	f000 ff23 	bl	8006994 <__match>
 8005b4e:	2800      	cmp	r0, #0
 8005b50:	f43f aeb0 	beq.w	80058b4 <_strtod_l+0xc4>
 8005b54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005b56:	498d      	ldr	r1, [pc, #564]	; (8005d8c <_strtod_l+0x59c>)
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	a817      	add	r0, sp, #92	; 0x5c
 8005b5c:	9317      	str	r3, [sp, #92]	; 0x5c
 8005b5e:	f000 ff19 	bl	8006994 <__match>
 8005b62:	b910      	cbnz	r0, 8005b6a <_strtod_l+0x37a>
 8005b64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005b66:	3301      	adds	r3, #1
 8005b68:	9317      	str	r3, [sp, #92]	; 0x5c
 8005b6a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8005d9c <_strtod_l+0x5ac>
 8005b6e:	f04f 0a00 	mov.w	sl, #0
 8005b72:	e681      	b.n	8005878 <_strtod_l+0x88>
 8005b74:	4886      	ldr	r0, [pc, #536]	; (8005d90 <_strtod_l+0x5a0>)
 8005b76:	f001 fd4b 	bl	8007610 <nan>
 8005b7a:	ec5b ab10 	vmov	sl, fp, d0
 8005b7e:	e67b      	b.n	8005878 <_strtod_l+0x88>
 8005b80:	9b05      	ldr	r3, [sp, #20]
 8005b82:	9807      	ldr	r0, [sp, #28]
 8005b84:	1af3      	subs	r3, r6, r3
 8005b86:	2f00      	cmp	r7, #0
 8005b88:	bf08      	it	eq
 8005b8a:	462f      	moveq	r7, r5
 8005b8c:	2d10      	cmp	r5, #16
 8005b8e:	9306      	str	r3, [sp, #24]
 8005b90:	46a8      	mov	r8, r5
 8005b92:	bfa8      	it	ge
 8005b94:	f04f 0810 	movge.w	r8, #16
 8005b98:	f7fa fcd4 	bl	8000544 <__aeabi_ui2d>
 8005b9c:	2d09      	cmp	r5, #9
 8005b9e:	4682      	mov	sl, r0
 8005ba0:	468b      	mov	fp, r1
 8005ba2:	dd13      	ble.n	8005bcc <_strtod_l+0x3dc>
 8005ba4:	4b7b      	ldr	r3, [pc, #492]	; (8005d94 <_strtod_l+0x5a4>)
 8005ba6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005baa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005bae:	f7fa fd43 	bl	8000638 <__aeabi_dmul>
 8005bb2:	4682      	mov	sl, r0
 8005bb4:	4648      	mov	r0, r9
 8005bb6:	468b      	mov	fp, r1
 8005bb8:	f7fa fcc4 	bl	8000544 <__aeabi_ui2d>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	4650      	mov	r0, sl
 8005bc2:	4659      	mov	r1, fp
 8005bc4:	f7fa fb82 	bl	80002cc <__adddf3>
 8005bc8:	4682      	mov	sl, r0
 8005bca:	468b      	mov	fp, r1
 8005bcc:	2d0f      	cmp	r5, #15
 8005bce:	dc38      	bgt.n	8005c42 <_strtod_l+0x452>
 8005bd0:	9b06      	ldr	r3, [sp, #24]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f43f ae50 	beq.w	8005878 <_strtod_l+0x88>
 8005bd8:	dd24      	ble.n	8005c24 <_strtod_l+0x434>
 8005bda:	2b16      	cmp	r3, #22
 8005bdc:	dc0b      	bgt.n	8005bf6 <_strtod_l+0x406>
 8005bde:	496d      	ldr	r1, [pc, #436]	; (8005d94 <_strtod_l+0x5a4>)
 8005be0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005be4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005be8:	4652      	mov	r2, sl
 8005bea:	465b      	mov	r3, fp
 8005bec:	f7fa fd24 	bl	8000638 <__aeabi_dmul>
 8005bf0:	4682      	mov	sl, r0
 8005bf2:	468b      	mov	fp, r1
 8005bf4:	e640      	b.n	8005878 <_strtod_l+0x88>
 8005bf6:	9a06      	ldr	r2, [sp, #24]
 8005bf8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	db20      	blt.n	8005c42 <_strtod_l+0x452>
 8005c00:	4c64      	ldr	r4, [pc, #400]	; (8005d94 <_strtod_l+0x5a4>)
 8005c02:	f1c5 050f 	rsb	r5, r5, #15
 8005c06:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005c0a:	4652      	mov	r2, sl
 8005c0c:	465b      	mov	r3, fp
 8005c0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c12:	f7fa fd11 	bl	8000638 <__aeabi_dmul>
 8005c16:	9b06      	ldr	r3, [sp, #24]
 8005c18:	1b5d      	subs	r5, r3, r5
 8005c1a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005c1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005c22:	e7e3      	b.n	8005bec <_strtod_l+0x3fc>
 8005c24:	9b06      	ldr	r3, [sp, #24]
 8005c26:	3316      	adds	r3, #22
 8005c28:	db0b      	blt.n	8005c42 <_strtod_l+0x452>
 8005c2a:	9b05      	ldr	r3, [sp, #20]
 8005c2c:	1b9e      	subs	r6, r3, r6
 8005c2e:	4b59      	ldr	r3, [pc, #356]	; (8005d94 <_strtod_l+0x5a4>)
 8005c30:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005c34:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005c38:	4650      	mov	r0, sl
 8005c3a:	4659      	mov	r1, fp
 8005c3c:	f7fa fe26 	bl	800088c <__aeabi_ddiv>
 8005c40:	e7d6      	b.n	8005bf0 <_strtod_l+0x400>
 8005c42:	9b06      	ldr	r3, [sp, #24]
 8005c44:	eba5 0808 	sub.w	r8, r5, r8
 8005c48:	4498      	add	r8, r3
 8005c4a:	f1b8 0f00 	cmp.w	r8, #0
 8005c4e:	dd74      	ble.n	8005d3a <_strtod_l+0x54a>
 8005c50:	f018 030f 	ands.w	r3, r8, #15
 8005c54:	d00a      	beq.n	8005c6c <_strtod_l+0x47c>
 8005c56:	494f      	ldr	r1, [pc, #316]	; (8005d94 <_strtod_l+0x5a4>)
 8005c58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005c5c:	4652      	mov	r2, sl
 8005c5e:	465b      	mov	r3, fp
 8005c60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c64:	f7fa fce8 	bl	8000638 <__aeabi_dmul>
 8005c68:	4682      	mov	sl, r0
 8005c6a:	468b      	mov	fp, r1
 8005c6c:	f038 080f 	bics.w	r8, r8, #15
 8005c70:	d04f      	beq.n	8005d12 <_strtod_l+0x522>
 8005c72:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005c76:	dd22      	ble.n	8005cbe <_strtod_l+0x4ce>
 8005c78:	2500      	movs	r5, #0
 8005c7a:	462e      	mov	r6, r5
 8005c7c:	9507      	str	r5, [sp, #28]
 8005c7e:	9505      	str	r5, [sp, #20]
 8005c80:	2322      	movs	r3, #34	; 0x22
 8005c82:	f8df b118 	ldr.w	fp, [pc, #280]	; 8005d9c <_strtod_l+0x5ac>
 8005c86:	6023      	str	r3, [r4, #0]
 8005c88:	f04f 0a00 	mov.w	sl, #0
 8005c8c:	9b07      	ldr	r3, [sp, #28]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	f43f adf2 	beq.w	8005878 <_strtod_l+0x88>
 8005c94:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005c96:	4620      	mov	r0, r4
 8005c98:	f000 ff8c 	bl	8006bb4 <_Bfree>
 8005c9c:	9905      	ldr	r1, [sp, #20]
 8005c9e:	4620      	mov	r0, r4
 8005ca0:	f000 ff88 	bl	8006bb4 <_Bfree>
 8005ca4:	4631      	mov	r1, r6
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	f000 ff84 	bl	8006bb4 <_Bfree>
 8005cac:	9907      	ldr	r1, [sp, #28]
 8005cae:	4620      	mov	r0, r4
 8005cb0:	f000 ff80 	bl	8006bb4 <_Bfree>
 8005cb4:	4629      	mov	r1, r5
 8005cb6:	4620      	mov	r0, r4
 8005cb8:	f000 ff7c 	bl	8006bb4 <_Bfree>
 8005cbc:	e5dc      	b.n	8005878 <_strtod_l+0x88>
 8005cbe:	4b36      	ldr	r3, [pc, #216]	; (8005d98 <_strtod_l+0x5a8>)
 8005cc0:	9304      	str	r3, [sp, #16]
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005cc8:	4650      	mov	r0, sl
 8005cca:	4659      	mov	r1, fp
 8005ccc:	4699      	mov	r9, r3
 8005cce:	f1b8 0f01 	cmp.w	r8, #1
 8005cd2:	dc21      	bgt.n	8005d18 <_strtod_l+0x528>
 8005cd4:	b10b      	cbz	r3, 8005cda <_strtod_l+0x4ea>
 8005cd6:	4682      	mov	sl, r0
 8005cd8:	468b      	mov	fp, r1
 8005cda:	4b2f      	ldr	r3, [pc, #188]	; (8005d98 <_strtod_l+0x5a8>)
 8005cdc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005ce0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005ce4:	4652      	mov	r2, sl
 8005ce6:	465b      	mov	r3, fp
 8005ce8:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005cec:	f7fa fca4 	bl	8000638 <__aeabi_dmul>
 8005cf0:	4b2a      	ldr	r3, [pc, #168]	; (8005d9c <_strtod_l+0x5ac>)
 8005cf2:	460a      	mov	r2, r1
 8005cf4:	400b      	ands	r3, r1
 8005cf6:	492a      	ldr	r1, [pc, #168]	; (8005da0 <_strtod_l+0x5b0>)
 8005cf8:	428b      	cmp	r3, r1
 8005cfa:	4682      	mov	sl, r0
 8005cfc:	d8bc      	bhi.n	8005c78 <_strtod_l+0x488>
 8005cfe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005d02:	428b      	cmp	r3, r1
 8005d04:	bf86      	itte	hi
 8005d06:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8005da4 <_strtod_l+0x5b4>
 8005d0a:	f04f 3aff 	movhi.w	sl, #4294967295
 8005d0e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005d12:	2300      	movs	r3, #0
 8005d14:	9304      	str	r3, [sp, #16]
 8005d16:	e084      	b.n	8005e22 <_strtod_l+0x632>
 8005d18:	f018 0f01 	tst.w	r8, #1
 8005d1c:	d005      	beq.n	8005d2a <_strtod_l+0x53a>
 8005d1e:	9b04      	ldr	r3, [sp, #16]
 8005d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d24:	f7fa fc88 	bl	8000638 <__aeabi_dmul>
 8005d28:	2301      	movs	r3, #1
 8005d2a:	9a04      	ldr	r2, [sp, #16]
 8005d2c:	3208      	adds	r2, #8
 8005d2e:	f109 0901 	add.w	r9, r9, #1
 8005d32:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005d36:	9204      	str	r2, [sp, #16]
 8005d38:	e7c9      	b.n	8005cce <_strtod_l+0x4de>
 8005d3a:	d0ea      	beq.n	8005d12 <_strtod_l+0x522>
 8005d3c:	f1c8 0800 	rsb	r8, r8, #0
 8005d40:	f018 020f 	ands.w	r2, r8, #15
 8005d44:	d00a      	beq.n	8005d5c <_strtod_l+0x56c>
 8005d46:	4b13      	ldr	r3, [pc, #76]	; (8005d94 <_strtod_l+0x5a4>)
 8005d48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d4c:	4650      	mov	r0, sl
 8005d4e:	4659      	mov	r1, fp
 8005d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d54:	f7fa fd9a 	bl	800088c <__aeabi_ddiv>
 8005d58:	4682      	mov	sl, r0
 8005d5a:	468b      	mov	fp, r1
 8005d5c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005d60:	d0d7      	beq.n	8005d12 <_strtod_l+0x522>
 8005d62:	f1b8 0f1f 	cmp.w	r8, #31
 8005d66:	dd1f      	ble.n	8005da8 <_strtod_l+0x5b8>
 8005d68:	2500      	movs	r5, #0
 8005d6a:	462e      	mov	r6, r5
 8005d6c:	9507      	str	r5, [sp, #28]
 8005d6e:	9505      	str	r5, [sp, #20]
 8005d70:	2322      	movs	r3, #34	; 0x22
 8005d72:	f04f 0a00 	mov.w	sl, #0
 8005d76:	f04f 0b00 	mov.w	fp, #0
 8005d7a:	6023      	str	r3, [r4, #0]
 8005d7c:	e786      	b.n	8005c8c <_strtod_l+0x49c>
 8005d7e:	bf00      	nop
 8005d80:	0800856d 	.word	0x0800856d
 8005d84:	08008584 	.word	0x08008584
 8005d88:	08008564 	.word	0x08008564
 8005d8c:	08008567 	.word	0x08008567
 8005d90:	080087f7 	.word	0x080087f7
 8005d94:	080086e8 	.word	0x080086e8
 8005d98:	080086c0 	.word	0x080086c0
 8005d9c:	7ff00000 	.word	0x7ff00000
 8005da0:	7ca00000 	.word	0x7ca00000
 8005da4:	7fefffff 	.word	0x7fefffff
 8005da8:	f018 0310 	ands.w	r3, r8, #16
 8005dac:	bf18      	it	ne
 8005dae:	236a      	movne	r3, #106	; 0x6a
 8005db0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006160 <_strtod_l+0x970>
 8005db4:	9304      	str	r3, [sp, #16]
 8005db6:	4650      	mov	r0, sl
 8005db8:	4659      	mov	r1, fp
 8005dba:	2300      	movs	r3, #0
 8005dbc:	f018 0f01 	tst.w	r8, #1
 8005dc0:	d004      	beq.n	8005dcc <_strtod_l+0x5dc>
 8005dc2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005dc6:	f7fa fc37 	bl	8000638 <__aeabi_dmul>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005dd0:	f109 0908 	add.w	r9, r9, #8
 8005dd4:	d1f2      	bne.n	8005dbc <_strtod_l+0x5cc>
 8005dd6:	b10b      	cbz	r3, 8005ddc <_strtod_l+0x5ec>
 8005dd8:	4682      	mov	sl, r0
 8005dda:	468b      	mov	fp, r1
 8005ddc:	9b04      	ldr	r3, [sp, #16]
 8005dde:	b1c3      	cbz	r3, 8005e12 <_strtod_l+0x622>
 8005de0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005de4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	4659      	mov	r1, fp
 8005dec:	dd11      	ble.n	8005e12 <_strtod_l+0x622>
 8005dee:	2b1f      	cmp	r3, #31
 8005df0:	f340 8124 	ble.w	800603c <_strtod_l+0x84c>
 8005df4:	2b34      	cmp	r3, #52	; 0x34
 8005df6:	bfde      	ittt	le
 8005df8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005dfc:	f04f 33ff 	movle.w	r3, #4294967295
 8005e00:	fa03 f202 	lslle.w	r2, r3, r2
 8005e04:	f04f 0a00 	mov.w	sl, #0
 8005e08:	bfcc      	ite	gt
 8005e0a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005e0e:	ea02 0b01 	andle.w	fp, r2, r1
 8005e12:	2200      	movs	r2, #0
 8005e14:	2300      	movs	r3, #0
 8005e16:	4650      	mov	r0, sl
 8005e18:	4659      	mov	r1, fp
 8005e1a:	f7fa fe75 	bl	8000b08 <__aeabi_dcmpeq>
 8005e1e:	2800      	cmp	r0, #0
 8005e20:	d1a2      	bne.n	8005d68 <_strtod_l+0x578>
 8005e22:	9b07      	ldr	r3, [sp, #28]
 8005e24:	9300      	str	r3, [sp, #0]
 8005e26:	9908      	ldr	r1, [sp, #32]
 8005e28:	462b      	mov	r3, r5
 8005e2a:	463a      	mov	r2, r7
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	f000 ff29 	bl	8006c84 <__s2b>
 8005e32:	9007      	str	r0, [sp, #28]
 8005e34:	2800      	cmp	r0, #0
 8005e36:	f43f af1f 	beq.w	8005c78 <_strtod_l+0x488>
 8005e3a:	9b05      	ldr	r3, [sp, #20]
 8005e3c:	1b9e      	subs	r6, r3, r6
 8005e3e:	9b06      	ldr	r3, [sp, #24]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	bfb4      	ite	lt
 8005e44:	4633      	movlt	r3, r6
 8005e46:	2300      	movge	r3, #0
 8005e48:	930c      	str	r3, [sp, #48]	; 0x30
 8005e4a:	9b06      	ldr	r3, [sp, #24]
 8005e4c:	2500      	movs	r5, #0
 8005e4e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005e52:	9312      	str	r3, [sp, #72]	; 0x48
 8005e54:	462e      	mov	r6, r5
 8005e56:	9b07      	ldr	r3, [sp, #28]
 8005e58:	4620      	mov	r0, r4
 8005e5a:	6859      	ldr	r1, [r3, #4]
 8005e5c:	f000 fe6a 	bl	8006b34 <_Balloc>
 8005e60:	9005      	str	r0, [sp, #20]
 8005e62:	2800      	cmp	r0, #0
 8005e64:	f43f af0c 	beq.w	8005c80 <_strtod_l+0x490>
 8005e68:	9b07      	ldr	r3, [sp, #28]
 8005e6a:	691a      	ldr	r2, [r3, #16]
 8005e6c:	3202      	adds	r2, #2
 8005e6e:	f103 010c 	add.w	r1, r3, #12
 8005e72:	0092      	lsls	r2, r2, #2
 8005e74:	300c      	adds	r0, #12
 8005e76:	f000 fe4f 	bl	8006b18 <memcpy>
 8005e7a:	ec4b ab10 	vmov	d0, sl, fp
 8005e7e:	aa1a      	add	r2, sp, #104	; 0x68
 8005e80:	a919      	add	r1, sp, #100	; 0x64
 8005e82:	4620      	mov	r0, r4
 8005e84:	f001 fa44 	bl	8007310 <__d2b>
 8005e88:	ec4b ab18 	vmov	d8, sl, fp
 8005e8c:	9018      	str	r0, [sp, #96]	; 0x60
 8005e8e:	2800      	cmp	r0, #0
 8005e90:	f43f aef6 	beq.w	8005c80 <_strtod_l+0x490>
 8005e94:	2101      	movs	r1, #1
 8005e96:	4620      	mov	r0, r4
 8005e98:	f000 ff8e 	bl	8006db8 <__i2b>
 8005e9c:	4606      	mov	r6, r0
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	f43f aeee 	beq.w	8005c80 <_strtod_l+0x490>
 8005ea4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005ea6:	9904      	ldr	r1, [sp, #16]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	bfab      	itete	ge
 8005eac:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8005eae:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8005eb0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8005eb2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8005eb6:	bfac      	ite	ge
 8005eb8:	eb03 0902 	addge.w	r9, r3, r2
 8005ebc:	1ad7      	sublt	r7, r2, r3
 8005ebe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005ec0:	eba3 0801 	sub.w	r8, r3, r1
 8005ec4:	4490      	add	r8, r2
 8005ec6:	4ba1      	ldr	r3, [pc, #644]	; (800614c <_strtod_l+0x95c>)
 8005ec8:	f108 38ff 	add.w	r8, r8, #4294967295
 8005ecc:	4598      	cmp	r8, r3
 8005ece:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005ed2:	f280 80c7 	bge.w	8006064 <_strtod_l+0x874>
 8005ed6:	eba3 0308 	sub.w	r3, r3, r8
 8005eda:	2b1f      	cmp	r3, #31
 8005edc:	eba2 0203 	sub.w	r2, r2, r3
 8005ee0:	f04f 0101 	mov.w	r1, #1
 8005ee4:	f300 80b1 	bgt.w	800604a <_strtod_l+0x85a>
 8005ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8005eec:	930d      	str	r3, [sp, #52]	; 0x34
 8005eee:	2300      	movs	r3, #0
 8005ef0:	9308      	str	r3, [sp, #32]
 8005ef2:	eb09 0802 	add.w	r8, r9, r2
 8005ef6:	9b04      	ldr	r3, [sp, #16]
 8005ef8:	45c1      	cmp	r9, r8
 8005efa:	4417      	add	r7, r2
 8005efc:	441f      	add	r7, r3
 8005efe:	464b      	mov	r3, r9
 8005f00:	bfa8      	it	ge
 8005f02:	4643      	movge	r3, r8
 8005f04:	42bb      	cmp	r3, r7
 8005f06:	bfa8      	it	ge
 8005f08:	463b      	movge	r3, r7
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	bfc2      	ittt	gt
 8005f0e:	eba8 0803 	subgt.w	r8, r8, r3
 8005f12:	1aff      	subgt	r7, r7, r3
 8005f14:	eba9 0903 	subgt.w	r9, r9, r3
 8005f18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	dd17      	ble.n	8005f4e <_strtod_l+0x75e>
 8005f1e:	4631      	mov	r1, r6
 8005f20:	461a      	mov	r2, r3
 8005f22:	4620      	mov	r0, r4
 8005f24:	f001 f808 	bl	8006f38 <__pow5mult>
 8005f28:	4606      	mov	r6, r0
 8005f2a:	2800      	cmp	r0, #0
 8005f2c:	f43f aea8 	beq.w	8005c80 <_strtod_l+0x490>
 8005f30:	4601      	mov	r1, r0
 8005f32:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005f34:	4620      	mov	r0, r4
 8005f36:	f000 ff55 	bl	8006de4 <__multiply>
 8005f3a:	900b      	str	r0, [sp, #44]	; 0x2c
 8005f3c:	2800      	cmp	r0, #0
 8005f3e:	f43f ae9f 	beq.w	8005c80 <_strtod_l+0x490>
 8005f42:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005f44:	4620      	mov	r0, r4
 8005f46:	f000 fe35 	bl	8006bb4 <_Bfree>
 8005f4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f4c:	9318      	str	r3, [sp, #96]	; 0x60
 8005f4e:	f1b8 0f00 	cmp.w	r8, #0
 8005f52:	f300 808c 	bgt.w	800606e <_strtod_l+0x87e>
 8005f56:	9b06      	ldr	r3, [sp, #24]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	dd08      	ble.n	8005f6e <_strtod_l+0x77e>
 8005f5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005f5e:	9905      	ldr	r1, [sp, #20]
 8005f60:	4620      	mov	r0, r4
 8005f62:	f000 ffe9 	bl	8006f38 <__pow5mult>
 8005f66:	9005      	str	r0, [sp, #20]
 8005f68:	2800      	cmp	r0, #0
 8005f6a:	f43f ae89 	beq.w	8005c80 <_strtod_l+0x490>
 8005f6e:	2f00      	cmp	r7, #0
 8005f70:	dd08      	ble.n	8005f84 <_strtod_l+0x794>
 8005f72:	9905      	ldr	r1, [sp, #20]
 8005f74:	463a      	mov	r2, r7
 8005f76:	4620      	mov	r0, r4
 8005f78:	f001 f838 	bl	8006fec <__lshift>
 8005f7c:	9005      	str	r0, [sp, #20]
 8005f7e:	2800      	cmp	r0, #0
 8005f80:	f43f ae7e 	beq.w	8005c80 <_strtod_l+0x490>
 8005f84:	f1b9 0f00 	cmp.w	r9, #0
 8005f88:	dd08      	ble.n	8005f9c <_strtod_l+0x7ac>
 8005f8a:	4631      	mov	r1, r6
 8005f8c:	464a      	mov	r2, r9
 8005f8e:	4620      	mov	r0, r4
 8005f90:	f001 f82c 	bl	8006fec <__lshift>
 8005f94:	4606      	mov	r6, r0
 8005f96:	2800      	cmp	r0, #0
 8005f98:	f43f ae72 	beq.w	8005c80 <_strtod_l+0x490>
 8005f9c:	9a05      	ldr	r2, [sp, #20]
 8005f9e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	f001 f8af 	bl	8007104 <__mdiff>
 8005fa6:	4605      	mov	r5, r0
 8005fa8:	2800      	cmp	r0, #0
 8005faa:	f43f ae69 	beq.w	8005c80 <_strtod_l+0x490>
 8005fae:	68c3      	ldr	r3, [r0, #12]
 8005fb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	60c3      	str	r3, [r0, #12]
 8005fb6:	4631      	mov	r1, r6
 8005fb8:	f001 f888 	bl	80070cc <__mcmp>
 8005fbc:	2800      	cmp	r0, #0
 8005fbe:	da60      	bge.n	8006082 <_strtod_l+0x892>
 8005fc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fc2:	ea53 030a 	orrs.w	r3, r3, sl
 8005fc6:	f040 8082 	bne.w	80060ce <_strtod_l+0x8de>
 8005fca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d17d      	bne.n	80060ce <_strtod_l+0x8de>
 8005fd2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005fd6:	0d1b      	lsrs	r3, r3, #20
 8005fd8:	051b      	lsls	r3, r3, #20
 8005fda:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005fde:	d976      	bls.n	80060ce <_strtod_l+0x8de>
 8005fe0:	696b      	ldr	r3, [r5, #20]
 8005fe2:	b913      	cbnz	r3, 8005fea <_strtod_l+0x7fa>
 8005fe4:	692b      	ldr	r3, [r5, #16]
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	dd71      	ble.n	80060ce <_strtod_l+0x8de>
 8005fea:	4629      	mov	r1, r5
 8005fec:	2201      	movs	r2, #1
 8005fee:	4620      	mov	r0, r4
 8005ff0:	f000 fffc 	bl	8006fec <__lshift>
 8005ff4:	4631      	mov	r1, r6
 8005ff6:	4605      	mov	r5, r0
 8005ff8:	f001 f868 	bl	80070cc <__mcmp>
 8005ffc:	2800      	cmp	r0, #0
 8005ffe:	dd66      	ble.n	80060ce <_strtod_l+0x8de>
 8006000:	9904      	ldr	r1, [sp, #16]
 8006002:	4a53      	ldr	r2, [pc, #332]	; (8006150 <_strtod_l+0x960>)
 8006004:	465b      	mov	r3, fp
 8006006:	2900      	cmp	r1, #0
 8006008:	f000 8081 	beq.w	800610e <_strtod_l+0x91e>
 800600c:	ea02 010b 	and.w	r1, r2, fp
 8006010:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006014:	dc7b      	bgt.n	800610e <_strtod_l+0x91e>
 8006016:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800601a:	f77f aea9 	ble.w	8005d70 <_strtod_l+0x580>
 800601e:	4b4d      	ldr	r3, [pc, #308]	; (8006154 <_strtod_l+0x964>)
 8006020:	4650      	mov	r0, sl
 8006022:	4659      	mov	r1, fp
 8006024:	2200      	movs	r2, #0
 8006026:	f7fa fb07 	bl	8000638 <__aeabi_dmul>
 800602a:	460b      	mov	r3, r1
 800602c:	4303      	orrs	r3, r0
 800602e:	bf08      	it	eq
 8006030:	2322      	moveq	r3, #34	; 0x22
 8006032:	4682      	mov	sl, r0
 8006034:	468b      	mov	fp, r1
 8006036:	bf08      	it	eq
 8006038:	6023      	streq	r3, [r4, #0]
 800603a:	e62b      	b.n	8005c94 <_strtod_l+0x4a4>
 800603c:	f04f 32ff 	mov.w	r2, #4294967295
 8006040:	fa02 f303 	lsl.w	r3, r2, r3
 8006044:	ea03 0a0a 	and.w	sl, r3, sl
 8006048:	e6e3      	b.n	8005e12 <_strtod_l+0x622>
 800604a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800604e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006052:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006056:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800605a:	fa01 f308 	lsl.w	r3, r1, r8
 800605e:	9308      	str	r3, [sp, #32]
 8006060:	910d      	str	r1, [sp, #52]	; 0x34
 8006062:	e746      	b.n	8005ef2 <_strtod_l+0x702>
 8006064:	2300      	movs	r3, #0
 8006066:	9308      	str	r3, [sp, #32]
 8006068:	2301      	movs	r3, #1
 800606a:	930d      	str	r3, [sp, #52]	; 0x34
 800606c:	e741      	b.n	8005ef2 <_strtod_l+0x702>
 800606e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006070:	4642      	mov	r2, r8
 8006072:	4620      	mov	r0, r4
 8006074:	f000 ffba 	bl	8006fec <__lshift>
 8006078:	9018      	str	r0, [sp, #96]	; 0x60
 800607a:	2800      	cmp	r0, #0
 800607c:	f47f af6b 	bne.w	8005f56 <_strtod_l+0x766>
 8006080:	e5fe      	b.n	8005c80 <_strtod_l+0x490>
 8006082:	465f      	mov	r7, fp
 8006084:	d16e      	bne.n	8006164 <_strtod_l+0x974>
 8006086:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006088:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800608c:	b342      	cbz	r2, 80060e0 <_strtod_l+0x8f0>
 800608e:	4a32      	ldr	r2, [pc, #200]	; (8006158 <_strtod_l+0x968>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d128      	bne.n	80060e6 <_strtod_l+0x8f6>
 8006094:	9b04      	ldr	r3, [sp, #16]
 8006096:	4651      	mov	r1, sl
 8006098:	b1eb      	cbz	r3, 80060d6 <_strtod_l+0x8e6>
 800609a:	4b2d      	ldr	r3, [pc, #180]	; (8006150 <_strtod_l+0x960>)
 800609c:	403b      	ands	r3, r7
 800609e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80060a2:	f04f 32ff 	mov.w	r2, #4294967295
 80060a6:	d819      	bhi.n	80060dc <_strtod_l+0x8ec>
 80060a8:	0d1b      	lsrs	r3, r3, #20
 80060aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80060ae:	fa02 f303 	lsl.w	r3, r2, r3
 80060b2:	4299      	cmp	r1, r3
 80060b4:	d117      	bne.n	80060e6 <_strtod_l+0x8f6>
 80060b6:	4b29      	ldr	r3, [pc, #164]	; (800615c <_strtod_l+0x96c>)
 80060b8:	429f      	cmp	r7, r3
 80060ba:	d102      	bne.n	80060c2 <_strtod_l+0x8d2>
 80060bc:	3101      	adds	r1, #1
 80060be:	f43f addf 	beq.w	8005c80 <_strtod_l+0x490>
 80060c2:	4b23      	ldr	r3, [pc, #140]	; (8006150 <_strtod_l+0x960>)
 80060c4:	403b      	ands	r3, r7
 80060c6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80060ca:	f04f 0a00 	mov.w	sl, #0
 80060ce:	9b04      	ldr	r3, [sp, #16]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1a4      	bne.n	800601e <_strtod_l+0x82e>
 80060d4:	e5de      	b.n	8005c94 <_strtod_l+0x4a4>
 80060d6:	f04f 33ff 	mov.w	r3, #4294967295
 80060da:	e7ea      	b.n	80060b2 <_strtod_l+0x8c2>
 80060dc:	4613      	mov	r3, r2
 80060de:	e7e8      	b.n	80060b2 <_strtod_l+0x8c2>
 80060e0:	ea53 030a 	orrs.w	r3, r3, sl
 80060e4:	d08c      	beq.n	8006000 <_strtod_l+0x810>
 80060e6:	9b08      	ldr	r3, [sp, #32]
 80060e8:	b1db      	cbz	r3, 8006122 <_strtod_l+0x932>
 80060ea:	423b      	tst	r3, r7
 80060ec:	d0ef      	beq.n	80060ce <_strtod_l+0x8de>
 80060ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060f0:	9a04      	ldr	r2, [sp, #16]
 80060f2:	4650      	mov	r0, sl
 80060f4:	4659      	mov	r1, fp
 80060f6:	b1c3      	cbz	r3, 800612a <_strtod_l+0x93a>
 80060f8:	f7ff fb5e 	bl	80057b8 <sulp>
 80060fc:	4602      	mov	r2, r0
 80060fe:	460b      	mov	r3, r1
 8006100:	ec51 0b18 	vmov	r0, r1, d8
 8006104:	f7fa f8e2 	bl	80002cc <__adddf3>
 8006108:	4682      	mov	sl, r0
 800610a:	468b      	mov	fp, r1
 800610c:	e7df      	b.n	80060ce <_strtod_l+0x8de>
 800610e:	4013      	ands	r3, r2
 8006110:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006114:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006118:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800611c:	f04f 3aff 	mov.w	sl, #4294967295
 8006120:	e7d5      	b.n	80060ce <_strtod_l+0x8de>
 8006122:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006124:	ea13 0f0a 	tst.w	r3, sl
 8006128:	e7e0      	b.n	80060ec <_strtod_l+0x8fc>
 800612a:	f7ff fb45 	bl	80057b8 <sulp>
 800612e:	4602      	mov	r2, r0
 8006130:	460b      	mov	r3, r1
 8006132:	ec51 0b18 	vmov	r0, r1, d8
 8006136:	f7fa f8c7 	bl	80002c8 <__aeabi_dsub>
 800613a:	2200      	movs	r2, #0
 800613c:	2300      	movs	r3, #0
 800613e:	4682      	mov	sl, r0
 8006140:	468b      	mov	fp, r1
 8006142:	f7fa fce1 	bl	8000b08 <__aeabi_dcmpeq>
 8006146:	2800      	cmp	r0, #0
 8006148:	d0c1      	beq.n	80060ce <_strtod_l+0x8de>
 800614a:	e611      	b.n	8005d70 <_strtod_l+0x580>
 800614c:	fffffc02 	.word	0xfffffc02
 8006150:	7ff00000 	.word	0x7ff00000
 8006154:	39500000 	.word	0x39500000
 8006158:	000fffff 	.word	0x000fffff
 800615c:	7fefffff 	.word	0x7fefffff
 8006160:	08008598 	.word	0x08008598
 8006164:	4631      	mov	r1, r6
 8006166:	4628      	mov	r0, r5
 8006168:	f001 f92e 	bl	80073c8 <__ratio>
 800616c:	ec59 8b10 	vmov	r8, r9, d0
 8006170:	ee10 0a10 	vmov	r0, s0
 8006174:	2200      	movs	r2, #0
 8006176:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800617a:	4649      	mov	r1, r9
 800617c:	f7fa fcd8 	bl	8000b30 <__aeabi_dcmple>
 8006180:	2800      	cmp	r0, #0
 8006182:	d07a      	beq.n	800627a <_strtod_l+0xa8a>
 8006184:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006186:	2b00      	cmp	r3, #0
 8006188:	d04a      	beq.n	8006220 <_strtod_l+0xa30>
 800618a:	4b95      	ldr	r3, [pc, #596]	; (80063e0 <_strtod_l+0xbf0>)
 800618c:	2200      	movs	r2, #0
 800618e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006192:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80063e0 <_strtod_l+0xbf0>
 8006196:	f04f 0800 	mov.w	r8, #0
 800619a:	4b92      	ldr	r3, [pc, #584]	; (80063e4 <_strtod_l+0xbf4>)
 800619c:	403b      	ands	r3, r7
 800619e:	930d      	str	r3, [sp, #52]	; 0x34
 80061a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80061a2:	4b91      	ldr	r3, [pc, #580]	; (80063e8 <_strtod_l+0xbf8>)
 80061a4:	429a      	cmp	r2, r3
 80061a6:	f040 80b0 	bne.w	800630a <_strtod_l+0xb1a>
 80061aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80061ae:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80061b2:	ec4b ab10 	vmov	d0, sl, fp
 80061b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80061ba:	f001 f82d 	bl	8007218 <__ulp>
 80061be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80061c2:	ec53 2b10 	vmov	r2, r3, d0
 80061c6:	f7fa fa37 	bl	8000638 <__aeabi_dmul>
 80061ca:	4652      	mov	r2, sl
 80061cc:	465b      	mov	r3, fp
 80061ce:	f7fa f87d 	bl	80002cc <__adddf3>
 80061d2:	460b      	mov	r3, r1
 80061d4:	4983      	ldr	r1, [pc, #524]	; (80063e4 <_strtod_l+0xbf4>)
 80061d6:	4a85      	ldr	r2, [pc, #532]	; (80063ec <_strtod_l+0xbfc>)
 80061d8:	4019      	ands	r1, r3
 80061da:	4291      	cmp	r1, r2
 80061dc:	4682      	mov	sl, r0
 80061de:	d960      	bls.n	80062a2 <_strtod_l+0xab2>
 80061e0:	ee18 3a90 	vmov	r3, s17
 80061e4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d104      	bne.n	80061f6 <_strtod_l+0xa06>
 80061ec:	ee18 3a10 	vmov	r3, s16
 80061f0:	3301      	adds	r3, #1
 80061f2:	f43f ad45 	beq.w	8005c80 <_strtod_l+0x490>
 80061f6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80063f8 <_strtod_l+0xc08>
 80061fa:	f04f 3aff 	mov.w	sl, #4294967295
 80061fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006200:	4620      	mov	r0, r4
 8006202:	f000 fcd7 	bl	8006bb4 <_Bfree>
 8006206:	9905      	ldr	r1, [sp, #20]
 8006208:	4620      	mov	r0, r4
 800620a:	f000 fcd3 	bl	8006bb4 <_Bfree>
 800620e:	4631      	mov	r1, r6
 8006210:	4620      	mov	r0, r4
 8006212:	f000 fccf 	bl	8006bb4 <_Bfree>
 8006216:	4629      	mov	r1, r5
 8006218:	4620      	mov	r0, r4
 800621a:	f000 fccb 	bl	8006bb4 <_Bfree>
 800621e:	e61a      	b.n	8005e56 <_strtod_l+0x666>
 8006220:	f1ba 0f00 	cmp.w	sl, #0
 8006224:	d11b      	bne.n	800625e <_strtod_l+0xa6e>
 8006226:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800622a:	b9f3      	cbnz	r3, 800626a <_strtod_l+0xa7a>
 800622c:	4b6c      	ldr	r3, [pc, #432]	; (80063e0 <_strtod_l+0xbf0>)
 800622e:	2200      	movs	r2, #0
 8006230:	4640      	mov	r0, r8
 8006232:	4649      	mov	r1, r9
 8006234:	f7fa fc72 	bl	8000b1c <__aeabi_dcmplt>
 8006238:	b9d0      	cbnz	r0, 8006270 <_strtod_l+0xa80>
 800623a:	4640      	mov	r0, r8
 800623c:	4649      	mov	r1, r9
 800623e:	4b6c      	ldr	r3, [pc, #432]	; (80063f0 <_strtod_l+0xc00>)
 8006240:	2200      	movs	r2, #0
 8006242:	f7fa f9f9 	bl	8000638 <__aeabi_dmul>
 8006246:	4680      	mov	r8, r0
 8006248:	4689      	mov	r9, r1
 800624a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800624e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006252:	9315      	str	r3, [sp, #84]	; 0x54
 8006254:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006258:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800625c:	e79d      	b.n	800619a <_strtod_l+0x9aa>
 800625e:	f1ba 0f01 	cmp.w	sl, #1
 8006262:	d102      	bne.n	800626a <_strtod_l+0xa7a>
 8006264:	2f00      	cmp	r7, #0
 8006266:	f43f ad83 	beq.w	8005d70 <_strtod_l+0x580>
 800626a:	4b62      	ldr	r3, [pc, #392]	; (80063f4 <_strtod_l+0xc04>)
 800626c:	2200      	movs	r2, #0
 800626e:	e78e      	b.n	800618e <_strtod_l+0x99e>
 8006270:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80063f0 <_strtod_l+0xc00>
 8006274:	f04f 0800 	mov.w	r8, #0
 8006278:	e7e7      	b.n	800624a <_strtod_l+0xa5a>
 800627a:	4b5d      	ldr	r3, [pc, #372]	; (80063f0 <_strtod_l+0xc00>)
 800627c:	4640      	mov	r0, r8
 800627e:	4649      	mov	r1, r9
 8006280:	2200      	movs	r2, #0
 8006282:	f7fa f9d9 	bl	8000638 <__aeabi_dmul>
 8006286:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006288:	4680      	mov	r8, r0
 800628a:	4689      	mov	r9, r1
 800628c:	b933      	cbnz	r3, 800629c <_strtod_l+0xaac>
 800628e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006292:	900e      	str	r0, [sp, #56]	; 0x38
 8006294:	930f      	str	r3, [sp, #60]	; 0x3c
 8006296:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800629a:	e7dd      	b.n	8006258 <_strtod_l+0xa68>
 800629c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80062a0:	e7f9      	b.n	8006296 <_strtod_l+0xaa6>
 80062a2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80062a6:	9b04      	ldr	r3, [sp, #16]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1a8      	bne.n	80061fe <_strtod_l+0xa0e>
 80062ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80062b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80062b2:	0d1b      	lsrs	r3, r3, #20
 80062b4:	051b      	lsls	r3, r3, #20
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d1a1      	bne.n	80061fe <_strtod_l+0xa0e>
 80062ba:	4640      	mov	r0, r8
 80062bc:	4649      	mov	r1, r9
 80062be:	f7fa fcdd 	bl	8000c7c <__aeabi_d2lz>
 80062c2:	f7fa f98b 	bl	80005dc <__aeabi_l2d>
 80062c6:	4602      	mov	r2, r0
 80062c8:	460b      	mov	r3, r1
 80062ca:	4640      	mov	r0, r8
 80062cc:	4649      	mov	r1, r9
 80062ce:	f7f9 fffb 	bl	80002c8 <__aeabi_dsub>
 80062d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80062d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80062d8:	ea43 030a 	orr.w	r3, r3, sl
 80062dc:	4313      	orrs	r3, r2
 80062de:	4680      	mov	r8, r0
 80062e0:	4689      	mov	r9, r1
 80062e2:	d055      	beq.n	8006390 <_strtod_l+0xba0>
 80062e4:	a336      	add	r3, pc, #216	; (adr r3, 80063c0 <_strtod_l+0xbd0>)
 80062e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ea:	f7fa fc17 	bl	8000b1c <__aeabi_dcmplt>
 80062ee:	2800      	cmp	r0, #0
 80062f0:	f47f acd0 	bne.w	8005c94 <_strtod_l+0x4a4>
 80062f4:	a334      	add	r3, pc, #208	; (adr r3, 80063c8 <_strtod_l+0xbd8>)
 80062f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fa:	4640      	mov	r0, r8
 80062fc:	4649      	mov	r1, r9
 80062fe:	f7fa fc2b 	bl	8000b58 <__aeabi_dcmpgt>
 8006302:	2800      	cmp	r0, #0
 8006304:	f43f af7b 	beq.w	80061fe <_strtod_l+0xa0e>
 8006308:	e4c4      	b.n	8005c94 <_strtod_l+0x4a4>
 800630a:	9b04      	ldr	r3, [sp, #16]
 800630c:	b333      	cbz	r3, 800635c <_strtod_l+0xb6c>
 800630e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006310:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006314:	d822      	bhi.n	800635c <_strtod_l+0xb6c>
 8006316:	a32e      	add	r3, pc, #184	; (adr r3, 80063d0 <_strtod_l+0xbe0>)
 8006318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631c:	4640      	mov	r0, r8
 800631e:	4649      	mov	r1, r9
 8006320:	f7fa fc06 	bl	8000b30 <__aeabi_dcmple>
 8006324:	b1a0      	cbz	r0, 8006350 <_strtod_l+0xb60>
 8006326:	4649      	mov	r1, r9
 8006328:	4640      	mov	r0, r8
 800632a:	f7fa fc1f 	bl	8000b6c <__aeabi_d2uiz>
 800632e:	2801      	cmp	r0, #1
 8006330:	bf38      	it	cc
 8006332:	2001      	movcc	r0, #1
 8006334:	f7fa f906 	bl	8000544 <__aeabi_ui2d>
 8006338:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800633a:	4680      	mov	r8, r0
 800633c:	4689      	mov	r9, r1
 800633e:	bb23      	cbnz	r3, 800638a <_strtod_l+0xb9a>
 8006340:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006344:	9010      	str	r0, [sp, #64]	; 0x40
 8006346:	9311      	str	r3, [sp, #68]	; 0x44
 8006348:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800634c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006352:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006354:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006358:	1a9b      	subs	r3, r3, r2
 800635a:	9309      	str	r3, [sp, #36]	; 0x24
 800635c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006360:	eeb0 0a48 	vmov.f32	s0, s16
 8006364:	eef0 0a68 	vmov.f32	s1, s17
 8006368:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800636c:	f000 ff54 	bl	8007218 <__ulp>
 8006370:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006374:	ec53 2b10 	vmov	r2, r3, d0
 8006378:	f7fa f95e 	bl	8000638 <__aeabi_dmul>
 800637c:	ec53 2b18 	vmov	r2, r3, d8
 8006380:	f7f9 ffa4 	bl	80002cc <__adddf3>
 8006384:	4682      	mov	sl, r0
 8006386:	468b      	mov	fp, r1
 8006388:	e78d      	b.n	80062a6 <_strtod_l+0xab6>
 800638a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800638e:	e7db      	b.n	8006348 <_strtod_l+0xb58>
 8006390:	a311      	add	r3, pc, #68	; (adr r3, 80063d8 <_strtod_l+0xbe8>)
 8006392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006396:	f7fa fbc1 	bl	8000b1c <__aeabi_dcmplt>
 800639a:	e7b2      	b.n	8006302 <_strtod_l+0xb12>
 800639c:	2300      	movs	r3, #0
 800639e:	930a      	str	r3, [sp, #40]	; 0x28
 80063a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80063a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80063a4:	6013      	str	r3, [r2, #0]
 80063a6:	f7ff ba6b 	b.w	8005880 <_strtod_l+0x90>
 80063aa:	2a65      	cmp	r2, #101	; 0x65
 80063ac:	f43f ab5f 	beq.w	8005a6e <_strtod_l+0x27e>
 80063b0:	2a45      	cmp	r2, #69	; 0x45
 80063b2:	f43f ab5c 	beq.w	8005a6e <_strtod_l+0x27e>
 80063b6:	2301      	movs	r3, #1
 80063b8:	f7ff bb94 	b.w	8005ae4 <_strtod_l+0x2f4>
 80063bc:	f3af 8000 	nop.w
 80063c0:	94a03595 	.word	0x94a03595
 80063c4:	3fdfffff 	.word	0x3fdfffff
 80063c8:	35afe535 	.word	0x35afe535
 80063cc:	3fe00000 	.word	0x3fe00000
 80063d0:	ffc00000 	.word	0xffc00000
 80063d4:	41dfffff 	.word	0x41dfffff
 80063d8:	94a03595 	.word	0x94a03595
 80063dc:	3fcfffff 	.word	0x3fcfffff
 80063e0:	3ff00000 	.word	0x3ff00000
 80063e4:	7ff00000 	.word	0x7ff00000
 80063e8:	7fe00000 	.word	0x7fe00000
 80063ec:	7c9fffff 	.word	0x7c9fffff
 80063f0:	3fe00000 	.word	0x3fe00000
 80063f4:	bff00000 	.word	0xbff00000
 80063f8:	7fefffff 	.word	0x7fefffff

080063fc <strtod>:
 80063fc:	460a      	mov	r2, r1
 80063fe:	4601      	mov	r1, r0
 8006400:	4802      	ldr	r0, [pc, #8]	; (800640c <strtod+0x10>)
 8006402:	4b03      	ldr	r3, [pc, #12]	; (8006410 <strtod+0x14>)
 8006404:	6800      	ldr	r0, [r0, #0]
 8006406:	f7ff b9f3 	b.w	80057f0 <_strtod_l>
 800640a:	bf00      	nop
 800640c:	2000000c 	.word	0x2000000c
 8006410:	20000074 	.word	0x20000074

08006414 <rshift>:
 8006414:	6903      	ldr	r3, [r0, #16]
 8006416:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800641a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800641e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006422:	f100 0414 	add.w	r4, r0, #20
 8006426:	dd45      	ble.n	80064b4 <rshift+0xa0>
 8006428:	f011 011f 	ands.w	r1, r1, #31
 800642c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006430:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006434:	d10c      	bne.n	8006450 <rshift+0x3c>
 8006436:	f100 0710 	add.w	r7, r0, #16
 800643a:	4629      	mov	r1, r5
 800643c:	42b1      	cmp	r1, r6
 800643e:	d334      	bcc.n	80064aa <rshift+0x96>
 8006440:	1a9b      	subs	r3, r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	1eea      	subs	r2, r5, #3
 8006446:	4296      	cmp	r6, r2
 8006448:	bf38      	it	cc
 800644a:	2300      	movcc	r3, #0
 800644c:	4423      	add	r3, r4
 800644e:	e015      	b.n	800647c <rshift+0x68>
 8006450:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006454:	f1c1 0820 	rsb	r8, r1, #32
 8006458:	40cf      	lsrs	r7, r1
 800645a:	f105 0e04 	add.w	lr, r5, #4
 800645e:	46a1      	mov	r9, r4
 8006460:	4576      	cmp	r6, lr
 8006462:	46f4      	mov	ip, lr
 8006464:	d815      	bhi.n	8006492 <rshift+0x7e>
 8006466:	1a9a      	subs	r2, r3, r2
 8006468:	0092      	lsls	r2, r2, #2
 800646a:	3a04      	subs	r2, #4
 800646c:	3501      	adds	r5, #1
 800646e:	42ae      	cmp	r6, r5
 8006470:	bf38      	it	cc
 8006472:	2200      	movcc	r2, #0
 8006474:	18a3      	adds	r3, r4, r2
 8006476:	50a7      	str	r7, [r4, r2]
 8006478:	b107      	cbz	r7, 800647c <rshift+0x68>
 800647a:	3304      	adds	r3, #4
 800647c:	1b1a      	subs	r2, r3, r4
 800647e:	42a3      	cmp	r3, r4
 8006480:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006484:	bf08      	it	eq
 8006486:	2300      	moveq	r3, #0
 8006488:	6102      	str	r2, [r0, #16]
 800648a:	bf08      	it	eq
 800648c:	6143      	streq	r3, [r0, #20]
 800648e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006492:	f8dc c000 	ldr.w	ip, [ip]
 8006496:	fa0c fc08 	lsl.w	ip, ip, r8
 800649a:	ea4c 0707 	orr.w	r7, ip, r7
 800649e:	f849 7b04 	str.w	r7, [r9], #4
 80064a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80064a6:	40cf      	lsrs	r7, r1
 80064a8:	e7da      	b.n	8006460 <rshift+0x4c>
 80064aa:	f851 cb04 	ldr.w	ip, [r1], #4
 80064ae:	f847 cf04 	str.w	ip, [r7, #4]!
 80064b2:	e7c3      	b.n	800643c <rshift+0x28>
 80064b4:	4623      	mov	r3, r4
 80064b6:	e7e1      	b.n	800647c <rshift+0x68>

080064b8 <__hexdig_fun>:
 80064b8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80064bc:	2b09      	cmp	r3, #9
 80064be:	d802      	bhi.n	80064c6 <__hexdig_fun+0xe>
 80064c0:	3820      	subs	r0, #32
 80064c2:	b2c0      	uxtb	r0, r0
 80064c4:	4770      	bx	lr
 80064c6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80064ca:	2b05      	cmp	r3, #5
 80064cc:	d801      	bhi.n	80064d2 <__hexdig_fun+0x1a>
 80064ce:	3847      	subs	r0, #71	; 0x47
 80064d0:	e7f7      	b.n	80064c2 <__hexdig_fun+0xa>
 80064d2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80064d6:	2b05      	cmp	r3, #5
 80064d8:	d801      	bhi.n	80064de <__hexdig_fun+0x26>
 80064da:	3827      	subs	r0, #39	; 0x27
 80064dc:	e7f1      	b.n	80064c2 <__hexdig_fun+0xa>
 80064de:	2000      	movs	r0, #0
 80064e0:	4770      	bx	lr
	...

080064e4 <__gethex>:
 80064e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e8:	ed2d 8b02 	vpush	{d8}
 80064ec:	b089      	sub	sp, #36	; 0x24
 80064ee:	ee08 0a10 	vmov	s16, r0
 80064f2:	9304      	str	r3, [sp, #16]
 80064f4:	4bb4      	ldr	r3, [pc, #720]	; (80067c8 <__gethex+0x2e4>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	9301      	str	r3, [sp, #4]
 80064fa:	4618      	mov	r0, r3
 80064fc:	468b      	mov	fp, r1
 80064fe:	4690      	mov	r8, r2
 8006500:	f7f9 fe86 	bl	8000210 <strlen>
 8006504:	9b01      	ldr	r3, [sp, #4]
 8006506:	f8db 2000 	ldr.w	r2, [fp]
 800650a:	4403      	add	r3, r0
 800650c:	4682      	mov	sl, r0
 800650e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006512:	9305      	str	r3, [sp, #20]
 8006514:	1c93      	adds	r3, r2, #2
 8006516:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800651a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800651e:	32fe      	adds	r2, #254	; 0xfe
 8006520:	18d1      	adds	r1, r2, r3
 8006522:	461f      	mov	r7, r3
 8006524:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006528:	9100      	str	r1, [sp, #0]
 800652a:	2830      	cmp	r0, #48	; 0x30
 800652c:	d0f8      	beq.n	8006520 <__gethex+0x3c>
 800652e:	f7ff ffc3 	bl	80064b8 <__hexdig_fun>
 8006532:	4604      	mov	r4, r0
 8006534:	2800      	cmp	r0, #0
 8006536:	d13a      	bne.n	80065ae <__gethex+0xca>
 8006538:	9901      	ldr	r1, [sp, #4]
 800653a:	4652      	mov	r2, sl
 800653c:	4638      	mov	r0, r7
 800653e:	f001 f87f 	bl	8007640 <strncmp>
 8006542:	4605      	mov	r5, r0
 8006544:	2800      	cmp	r0, #0
 8006546:	d168      	bne.n	800661a <__gethex+0x136>
 8006548:	f817 000a 	ldrb.w	r0, [r7, sl]
 800654c:	eb07 060a 	add.w	r6, r7, sl
 8006550:	f7ff ffb2 	bl	80064b8 <__hexdig_fun>
 8006554:	2800      	cmp	r0, #0
 8006556:	d062      	beq.n	800661e <__gethex+0x13a>
 8006558:	4633      	mov	r3, r6
 800655a:	7818      	ldrb	r0, [r3, #0]
 800655c:	2830      	cmp	r0, #48	; 0x30
 800655e:	461f      	mov	r7, r3
 8006560:	f103 0301 	add.w	r3, r3, #1
 8006564:	d0f9      	beq.n	800655a <__gethex+0x76>
 8006566:	f7ff ffa7 	bl	80064b8 <__hexdig_fun>
 800656a:	2301      	movs	r3, #1
 800656c:	fab0 f480 	clz	r4, r0
 8006570:	0964      	lsrs	r4, r4, #5
 8006572:	4635      	mov	r5, r6
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	463a      	mov	r2, r7
 8006578:	4616      	mov	r6, r2
 800657a:	3201      	adds	r2, #1
 800657c:	7830      	ldrb	r0, [r6, #0]
 800657e:	f7ff ff9b 	bl	80064b8 <__hexdig_fun>
 8006582:	2800      	cmp	r0, #0
 8006584:	d1f8      	bne.n	8006578 <__gethex+0x94>
 8006586:	9901      	ldr	r1, [sp, #4]
 8006588:	4652      	mov	r2, sl
 800658a:	4630      	mov	r0, r6
 800658c:	f001 f858 	bl	8007640 <strncmp>
 8006590:	b980      	cbnz	r0, 80065b4 <__gethex+0xd0>
 8006592:	b94d      	cbnz	r5, 80065a8 <__gethex+0xc4>
 8006594:	eb06 050a 	add.w	r5, r6, sl
 8006598:	462a      	mov	r2, r5
 800659a:	4616      	mov	r6, r2
 800659c:	3201      	adds	r2, #1
 800659e:	7830      	ldrb	r0, [r6, #0]
 80065a0:	f7ff ff8a 	bl	80064b8 <__hexdig_fun>
 80065a4:	2800      	cmp	r0, #0
 80065a6:	d1f8      	bne.n	800659a <__gethex+0xb6>
 80065a8:	1bad      	subs	r5, r5, r6
 80065aa:	00ad      	lsls	r5, r5, #2
 80065ac:	e004      	b.n	80065b8 <__gethex+0xd4>
 80065ae:	2400      	movs	r4, #0
 80065b0:	4625      	mov	r5, r4
 80065b2:	e7e0      	b.n	8006576 <__gethex+0x92>
 80065b4:	2d00      	cmp	r5, #0
 80065b6:	d1f7      	bne.n	80065a8 <__gethex+0xc4>
 80065b8:	7833      	ldrb	r3, [r6, #0]
 80065ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80065be:	2b50      	cmp	r3, #80	; 0x50
 80065c0:	d13b      	bne.n	800663a <__gethex+0x156>
 80065c2:	7873      	ldrb	r3, [r6, #1]
 80065c4:	2b2b      	cmp	r3, #43	; 0x2b
 80065c6:	d02c      	beq.n	8006622 <__gethex+0x13e>
 80065c8:	2b2d      	cmp	r3, #45	; 0x2d
 80065ca:	d02e      	beq.n	800662a <__gethex+0x146>
 80065cc:	1c71      	adds	r1, r6, #1
 80065ce:	f04f 0900 	mov.w	r9, #0
 80065d2:	7808      	ldrb	r0, [r1, #0]
 80065d4:	f7ff ff70 	bl	80064b8 <__hexdig_fun>
 80065d8:	1e43      	subs	r3, r0, #1
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	2b18      	cmp	r3, #24
 80065de:	d82c      	bhi.n	800663a <__gethex+0x156>
 80065e0:	f1a0 0210 	sub.w	r2, r0, #16
 80065e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80065e8:	f7ff ff66 	bl	80064b8 <__hexdig_fun>
 80065ec:	1e43      	subs	r3, r0, #1
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b18      	cmp	r3, #24
 80065f2:	d91d      	bls.n	8006630 <__gethex+0x14c>
 80065f4:	f1b9 0f00 	cmp.w	r9, #0
 80065f8:	d000      	beq.n	80065fc <__gethex+0x118>
 80065fa:	4252      	negs	r2, r2
 80065fc:	4415      	add	r5, r2
 80065fe:	f8cb 1000 	str.w	r1, [fp]
 8006602:	b1e4      	cbz	r4, 800663e <__gethex+0x15a>
 8006604:	9b00      	ldr	r3, [sp, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	bf14      	ite	ne
 800660a:	2700      	movne	r7, #0
 800660c:	2706      	moveq	r7, #6
 800660e:	4638      	mov	r0, r7
 8006610:	b009      	add	sp, #36	; 0x24
 8006612:	ecbd 8b02 	vpop	{d8}
 8006616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800661a:	463e      	mov	r6, r7
 800661c:	4625      	mov	r5, r4
 800661e:	2401      	movs	r4, #1
 8006620:	e7ca      	b.n	80065b8 <__gethex+0xd4>
 8006622:	f04f 0900 	mov.w	r9, #0
 8006626:	1cb1      	adds	r1, r6, #2
 8006628:	e7d3      	b.n	80065d2 <__gethex+0xee>
 800662a:	f04f 0901 	mov.w	r9, #1
 800662e:	e7fa      	b.n	8006626 <__gethex+0x142>
 8006630:	230a      	movs	r3, #10
 8006632:	fb03 0202 	mla	r2, r3, r2, r0
 8006636:	3a10      	subs	r2, #16
 8006638:	e7d4      	b.n	80065e4 <__gethex+0x100>
 800663a:	4631      	mov	r1, r6
 800663c:	e7df      	b.n	80065fe <__gethex+0x11a>
 800663e:	1bf3      	subs	r3, r6, r7
 8006640:	3b01      	subs	r3, #1
 8006642:	4621      	mov	r1, r4
 8006644:	2b07      	cmp	r3, #7
 8006646:	dc0b      	bgt.n	8006660 <__gethex+0x17c>
 8006648:	ee18 0a10 	vmov	r0, s16
 800664c:	f000 fa72 	bl	8006b34 <_Balloc>
 8006650:	4604      	mov	r4, r0
 8006652:	b940      	cbnz	r0, 8006666 <__gethex+0x182>
 8006654:	4b5d      	ldr	r3, [pc, #372]	; (80067cc <__gethex+0x2e8>)
 8006656:	4602      	mov	r2, r0
 8006658:	21de      	movs	r1, #222	; 0xde
 800665a:	485d      	ldr	r0, [pc, #372]	; (80067d0 <__gethex+0x2ec>)
 800665c:	f001 f812 	bl	8007684 <__assert_func>
 8006660:	3101      	adds	r1, #1
 8006662:	105b      	asrs	r3, r3, #1
 8006664:	e7ee      	b.n	8006644 <__gethex+0x160>
 8006666:	f100 0914 	add.w	r9, r0, #20
 800666a:	f04f 0b00 	mov.w	fp, #0
 800666e:	f1ca 0301 	rsb	r3, sl, #1
 8006672:	f8cd 9008 	str.w	r9, [sp, #8]
 8006676:	f8cd b000 	str.w	fp, [sp]
 800667a:	9306      	str	r3, [sp, #24]
 800667c:	42b7      	cmp	r7, r6
 800667e:	d340      	bcc.n	8006702 <__gethex+0x21e>
 8006680:	9802      	ldr	r0, [sp, #8]
 8006682:	9b00      	ldr	r3, [sp, #0]
 8006684:	f840 3b04 	str.w	r3, [r0], #4
 8006688:	eba0 0009 	sub.w	r0, r0, r9
 800668c:	1080      	asrs	r0, r0, #2
 800668e:	0146      	lsls	r6, r0, #5
 8006690:	6120      	str	r0, [r4, #16]
 8006692:	4618      	mov	r0, r3
 8006694:	f000 fb40 	bl	8006d18 <__hi0bits>
 8006698:	1a30      	subs	r0, r6, r0
 800669a:	f8d8 6000 	ldr.w	r6, [r8]
 800669e:	42b0      	cmp	r0, r6
 80066a0:	dd63      	ble.n	800676a <__gethex+0x286>
 80066a2:	1b87      	subs	r7, r0, r6
 80066a4:	4639      	mov	r1, r7
 80066a6:	4620      	mov	r0, r4
 80066a8:	f000 fee4 	bl	8007474 <__any_on>
 80066ac:	4682      	mov	sl, r0
 80066ae:	b1a8      	cbz	r0, 80066dc <__gethex+0x1f8>
 80066b0:	1e7b      	subs	r3, r7, #1
 80066b2:	1159      	asrs	r1, r3, #5
 80066b4:	f003 021f 	and.w	r2, r3, #31
 80066b8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80066bc:	f04f 0a01 	mov.w	sl, #1
 80066c0:	fa0a f202 	lsl.w	r2, sl, r2
 80066c4:	420a      	tst	r2, r1
 80066c6:	d009      	beq.n	80066dc <__gethex+0x1f8>
 80066c8:	4553      	cmp	r3, sl
 80066ca:	dd05      	ble.n	80066d8 <__gethex+0x1f4>
 80066cc:	1eb9      	subs	r1, r7, #2
 80066ce:	4620      	mov	r0, r4
 80066d0:	f000 fed0 	bl	8007474 <__any_on>
 80066d4:	2800      	cmp	r0, #0
 80066d6:	d145      	bne.n	8006764 <__gethex+0x280>
 80066d8:	f04f 0a02 	mov.w	sl, #2
 80066dc:	4639      	mov	r1, r7
 80066de:	4620      	mov	r0, r4
 80066e0:	f7ff fe98 	bl	8006414 <rshift>
 80066e4:	443d      	add	r5, r7
 80066e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80066ea:	42ab      	cmp	r3, r5
 80066ec:	da4c      	bge.n	8006788 <__gethex+0x2a4>
 80066ee:	ee18 0a10 	vmov	r0, s16
 80066f2:	4621      	mov	r1, r4
 80066f4:	f000 fa5e 	bl	8006bb4 <_Bfree>
 80066f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80066fa:	2300      	movs	r3, #0
 80066fc:	6013      	str	r3, [r2, #0]
 80066fe:	27a3      	movs	r7, #163	; 0xa3
 8006700:	e785      	b.n	800660e <__gethex+0x12a>
 8006702:	1e73      	subs	r3, r6, #1
 8006704:	9a05      	ldr	r2, [sp, #20]
 8006706:	9303      	str	r3, [sp, #12]
 8006708:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800670c:	4293      	cmp	r3, r2
 800670e:	d019      	beq.n	8006744 <__gethex+0x260>
 8006710:	f1bb 0f20 	cmp.w	fp, #32
 8006714:	d107      	bne.n	8006726 <__gethex+0x242>
 8006716:	9b02      	ldr	r3, [sp, #8]
 8006718:	9a00      	ldr	r2, [sp, #0]
 800671a:	f843 2b04 	str.w	r2, [r3], #4
 800671e:	9302      	str	r3, [sp, #8]
 8006720:	2300      	movs	r3, #0
 8006722:	9300      	str	r3, [sp, #0]
 8006724:	469b      	mov	fp, r3
 8006726:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800672a:	f7ff fec5 	bl	80064b8 <__hexdig_fun>
 800672e:	9b00      	ldr	r3, [sp, #0]
 8006730:	f000 000f 	and.w	r0, r0, #15
 8006734:	fa00 f00b 	lsl.w	r0, r0, fp
 8006738:	4303      	orrs	r3, r0
 800673a:	9300      	str	r3, [sp, #0]
 800673c:	f10b 0b04 	add.w	fp, fp, #4
 8006740:	9b03      	ldr	r3, [sp, #12]
 8006742:	e00d      	b.n	8006760 <__gethex+0x27c>
 8006744:	9b03      	ldr	r3, [sp, #12]
 8006746:	9a06      	ldr	r2, [sp, #24]
 8006748:	4413      	add	r3, r2
 800674a:	42bb      	cmp	r3, r7
 800674c:	d3e0      	bcc.n	8006710 <__gethex+0x22c>
 800674e:	4618      	mov	r0, r3
 8006750:	9901      	ldr	r1, [sp, #4]
 8006752:	9307      	str	r3, [sp, #28]
 8006754:	4652      	mov	r2, sl
 8006756:	f000 ff73 	bl	8007640 <strncmp>
 800675a:	9b07      	ldr	r3, [sp, #28]
 800675c:	2800      	cmp	r0, #0
 800675e:	d1d7      	bne.n	8006710 <__gethex+0x22c>
 8006760:	461e      	mov	r6, r3
 8006762:	e78b      	b.n	800667c <__gethex+0x198>
 8006764:	f04f 0a03 	mov.w	sl, #3
 8006768:	e7b8      	b.n	80066dc <__gethex+0x1f8>
 800676a:	da0a      	bge.n	8006782 <__gethex+0x29e>
 800676c:	1a37      	subs	r7, r6, r0
 800676e:	4621      	mov	r1, r4
 8006770:	ee18 0a10 	vmov	r0, s16
 8006774:	463a      	mov	r2, r7
 8006776:	f000 fc39 	bl	8006fec <__lshift>
 800677a:	1bed      	subs	r5, r5, r7
 800677c:	4604      	mov	r4, r0
 800677e:	f100 0914 	add.w	r9, r0, #20
 8006782:	f04f 0a00 	mov.w	sl, #0
 8006786:	e7ae      	b.n	80066e6 <__gethex+0x202>
 8006788:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800678c:	42a8      	cmp	r0, r5
 800678e:	dd72      	ble.n	8006876 <__gethex+0x392>
 8006790:	1b45      	subs	r5, r0, r5
 8006792:	42ae      	cmp	r6, r5
 8006794:	dc36      	bgt.n	8006804 <__gethex+0x320>
 8006796:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800679a:	2b02      	cmp	r3, #2
 800679c:	d02a      	beq.n	80067f4 <__gethex+0x310>
 800679e:	2b03      	cmp	r3, #3
 80067a0:	d02c      	beq.n	80067fc <__gethex+0x318>
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d11c      	bne.n	80067e0 <__gethex+0x2fc>
 80067a6:	42ae      	cmp	r6, r5
 80067a8:	d11a      	bne.n	80067e0 <__gethex+0x2fc>
 80067aa:	2e01      	cmp	r6, #1
 80067ac:	d112      	bne.n	80067d4 <__gethex+0x2f0>
 80067ae:	9a04      	ldr	r2, [sp, #16]
 80067b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80067b4:	6013      	str	r3, [r2, #0]
 80067b6:	2301      	movs	r3, #1
 80067b8:	6123      	str	r3, [r4, #16]
 80067ba:	f8c9 3000 	str.w	r3, [r9]
 80067be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80067c0:	2762      	movs	r7, #98	; 0x62
 80067c2:	601c      	str	r4, [r3, #0]
 80067c4:	e723      	b.n	800660e <__gethex+0x12a>
 80067c6:	bf00      	nop
 80067c8:	08008638 	.word	0x08008638
 80067cc:	080085c0 	.word	0x080085c0
 80067d0:	080085d1 	.word	0x080085d1
 80067d4:	1e71      	subs	r1, r6, #1
 80067d6:	4620      	mov	r0, r4
 80067d8:	f000 fe4c 	bl	8007474 <__any_on>
 80067dc:	2800      	cmp	r0, #0
 80067de:	d1e6      	bne.n	80067ae <__gethex+0x2ca>
 80067e0:	ee18 0a10 	vmov	r0, s16
 80067e4:	4621      	mov	r1, r4
 80067e6:	f000 f9e5 	bl	8006bb4 <_Bfree>
 80067ea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80067ec:	2300      	movs	r3, #0
 80067ee:	6013      	str	r3, [r2, #0]
 80067f0:	2750      	movs	r7, #80	; 0x50
 80067f2:	e70c      	b.n	800660e <__gethex+0x12a>
 80067f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1f2      	bne.n	80067e0 <__gethex+0x2fc>
 80067fa:	e7d8      	b.n	80067ae <__gethex+0x2ca>
 80067fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1d5      	bne.n	80067ae <__gethex+0x2ca>
 8006802:	e7ed      	b.n	80067e0 <__gethex+0x2fc>
 8006804:	1e6f      	subs	r7, r5, #1
 8006806:	f1ba 0f00 	cmp.w	sl, #0
 800680a:	d131      	bne.n	8006870 <__gethex+0x38c>
 800680c:	b127      	cbz	r7, 8006818 <__gethex+0x334>
 800680e:	4639      	mov	r1, r7
 8006810:	4620      	mov	r0, r4
 8006812:	f000 fe2f 	bl	8007474 <__any_on>
 8006816:	4682      	mov	sl, r0
 8006818:	117b      	asrs	r3, r7, #5
 800681a:	2101      	movs	r1, #1
 800681c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006820:	f007 071f 	and.w	r7, r7, #31
 8006824:	fa01 f707 	lsl.w	r7, r1, r7
 8006828:	421f      	tst	r7, r3
 800682a:	4629      	mov	r1, r5
 800682c:	4620      	mov	r0, r4
 800682e:	bf18      	it	ne
 8006830:	f04a 0a02 	orrne.w	sl, sl, #2
 8006834:	1b76      	subs	r6, r6, r5
 8006836:	f7ff fded 	bl	8006414 <rshift>
 800683a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800683e:	2702      	movs	r7, #2
 8006840:	f1ba 0f00 	cmp.w	sl, #0
 8006844:	d048      	beq.n	80068d8 <__gethex+0x3f4>
 8006846:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800684a:	2b02      	cmp	r3, #2
 800684c:	d015      	beq.n	800687a <__gethex+0x396>
 800684e:	2b03      	cmp	r3, #3
 8006850:	d017      	beq.n	8006882 <__gethex+0x39e>
 8006852:	2b01      	cmp	r3, #1
 8006854:	d109      	bne.n	800686a <__gethex+0x386>
 8006856:	f01a 0f02 	tst.w	sl, #2
 800685a:	d006      	beq.n	800686a <__gethex+0x386>
 800685c:	f8d9 0000 	ldr.w	r0, [r9]
 8006860:	ea4a 0a00 	orr.w	sl, sl, r0
 8006864:	f01a 0f01 	tst.w	sl, #1
 8006868:	d10e      	bne.n	8006888 <__gethex+0x3a4>
 800686a:	f047 0710 	orr.w	r7, r7, #16
 800686e:	e033      	b.n	80068d8 <__gethex+0x3f4>
 8006870:	f04f 0a01 	mov.w	sl, #1
 8006874:	e7d0      	b.n	8006818 <__gethex+0x334>
 8006876:	2701      	movs	r7, #1
 8006878:	e7e2      	b.n	8006840 <__gethex+0x35c>
 800687a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800687c:	f1c3 0301 	rsb	r3, r3, #1
 8006880:	9315      	str	r3, [sp, #84]	; 0x54
 8006882:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006884:	2b00      	cmp	r3, #0
 8006886:	d0f0      	beq.n	800686a <__gethex+0x386>
 8006888:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800688c:	f104 0314 	add.w	r3, r4, #20
 8006890:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006894:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006898:	f04f 0c00 	mov.w	ip, #0
 800689c:	4618      	mov	r0, r3
 800689e:	f853 2b04 	ldr.w	r2, [r3], #4
 80068a2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80068a6:	d01c      	beq.n	80068e2 <__gethex+0x3fe>
 80068a8:	3201      	adds	r2, #1
 80068aa:	6002      	str	r2, [r0, #0]
 80068ac:	2f02      	cmp	r7, #2
 80068ae:	f104 0314 	add.w	r3, r4, #20
 80068b2:	d13f      	bne.n	8006934 <__gethex+0x450>
 80068b4:	f8d8 2000 	ldr.w	r2, [r8]
 80068b8:	3a01      	subs	r2, #1
 80068ba:	42b2      	cmp	r2, r6
 80068bc:	d10a      	bne.n	80068d4 <__gethex+0x3f0>
 80068be:	1171      	asrs	r1, r6, #5
 80068c0:	2201      	movs	r2, #1
 80068c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80068c6:	f006 061f 	and.w	r6, r6, #31
 80068ca:	fa02 f606 	lsl.w	r6, r2, r6
 80068ce:	421e      	tst	r6, r3
 80068d0:	bf18      	it	ne
 80068d2:	4617      	movne	r7, r2
 80068d4:	f047 0720 	orr.w	r7, r7, #32
 80068d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80068da:	601c      	str	r4, [r3, #0]
 80068dc:	9b04      	ldr	r3, [sp, #16]
 80068de:	601d      	str	r5, [r3, #0]
 80068e0:	e695      	b.n	800660e <__gethex+0x12a>
 80068e2:	4299      	cmp	r1, r3
 80068e4:	f843 cc04 	str.w	ip, [r3, #-4]
 80068e8:	d8d8      	bhi.n	800689c <__gethex+0x3b8>
 80068ea:	68a3      	ldr	r3, [r4, #8]
 80068ec:	459b      	cmp	fp, r3
 80068ee:	db19      	blt.n	8006924 <__gethex+0x440>
 80068f0:	6861      	ldr	r1, [r4, #4]
 80068f2:	ee18 0a10 	vmov	r0, s16
 80068f6:	3101      	adds	r1, #1
 80068f8:	f000 f91c 	bl	8006b34 <_Balloc>
 80068fc:	4681      	mov	r9, r0
 80068fe:	b918      	cbnz	r0, 8006908 <__gethex+0x424>
 8006900:	4b1a      	ldr	r3, [pc, #104]	; (800696c <__gethex+0x488>)
 8006902:	4602      	mov	r2, r0
 8006904:	2184      	movs	r1, #132	; 0x84
 8006906:	e6a8      	b.n	800665a <__gethex+0x176>
 8006908:	6922      	ldr	r2, [r4, #16]
 800690a:	3202      	adds	r2, #2
 800690c:	f104 010c 	add.w	r1, r4, #12
 8006910:	0092      	lsls	r2, r2, #2
 8006912:	300c      	adds	r0, #12
 8006914:	f000 f900 	bl	8006b18 <memcpy>
 8006918:	4621      	mov	r1, r4
 800691a:	ee18 0a10 	vmov	r0, s16
 800691e:	f000 f949 	bl	8006bb4 <_Bfree>
 8006922:	464c      	mov	r4, r9
 8006924:	6923      	ldr	r3, [r4, #16]
 8006926:	1c5a      	adds	r2, r3, #1
 8006928:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800692c:	6122      	str	r2, [r4, #16]
 800692e:	2201      	movs	r2, #1
 8006930:	615a      	str	r2, [r3, #20]
 8006932:	e7bb      	b.n	80068ac <__gethex+0x3c8>
 8006934:	6922      	ldr	r2, [r4, #16]
 8006936:	455a      	cmp	r2, fp
 8006938:	dd0b      	ble.n	8006952 <__gethex+0x46e>
 800693a:	2101      	movs	r1, #1
 800693c:	4620      	mov	r0, r4
 800693e:	f7ff fd69 	bl	8006414 <rshift>
 8006942:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006946:	3501      	adds	r5, #1
 8006948:	42ab      	cmp	r3, r5
 800694a:	f6ff aed0 	blt.w	80066ee <__gethex+0x20a>
 800694e:	2701      	movs	r7, #1
 8006950:	e7c0      	b.n	80068d4 <__gethex+0x3f0>
 8006952:	f016 061f 	ands.w	r6, r6, #31
 8006956:	d0fa      	beq.n	800694e <__gethex+0x46a>
 8006958:	4453      	add	r3, sl
 800695a:	f1c6 0620 	rsb	r6, r6, #32
 800695e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006962:	f000 f9d9 	bl	8006d18 <__hi0bits>
 8006966:	42b0      	cmp	r0, r6
 8006968:	dbe7      	blt.n	800693a <__gethex+0x456>
 800696a:	e7f0      	b.n	800694e <__gethex+0x46a>
 800696c:	080085c0 	.word	0x080085c0

08006970 <L_shift>:
 8006970:	f1c2 0208 	rsb	r2, r2, #8
 8006974:	0092      	lsls	r2, r2, #2
 8006976:	b570      	push	{r4, r5, r6, lr}
 8006978:	f1c2 0620 	rsb	r6, r2, #32
 800697c:	6843      	ldr	r3, [r0, #4]
 800697e:	6804      	ldr	r4, [r0, #0]
 8006980:	fa03 f506 	lsl.w	r5, r3, r6
 8006984:	432c      	orrs	r4, r5
 8006986:	40d3      	lsrs	r3, r2
 8006988:	6004      	str	r4, [r0, #0]
 800698a:	f840 3f04 	str.w	r3, [r0, #4]!
 800698e:	4288      	cmp	r0, r1
 8006990:	d3f4      	bcc.n	800697c <L_shift+0xc>
 8006992:	bd70      	pop	{r4, r5, r6, pc}

08006994 <__match>:
 8006994:	b530      	push	{r4, r5, lr}
 8006996:	6803      	ldr	r3, [r0, #0]
 8006998:	3301      	adds	r3, #1
 800699a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800699e:	b914      	cbnz	r4, 80069a6 <__match+0x12>
 80069a0:	6003      	str	r3, [r0, #0]
 80069a2:	2001      	movs	r0, #1
 80069a4:	bd30      	pop	{r4, r5, pc}
 80069a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069aa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80069ae:	2d19      	cmp	r5, #25
 80069b0:	bf98      	it	ls
 80069b2:	3220      	addls	r2, #32
 80069b4:	42a2      	cmp	r2, r4
 80069b6:	d0f0      	beq.n	800699a <__match+0x6>
 80069b8:	2000      	movs	r0, #0
 80069ba:	e7f3      	b.n	80069a4 <__match+0x10>

080069bc <__hexnan>:
 80069bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069c0:	680b      	ldr	r3, [r1, #0]
 80069c2:	115e      	asrs	r6, r3, #5
 80069c4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80069c8:	f013 031f 	ands.w	r3, r3, #31
 80069cc:	b087      	sub	sp, #28
 80069ce:	bf18      	it	ne
 80069d0:	3604      	addne	r6, #4
 80069d2:	2500      	movs	r5, #0
 80069d4:	1f37      	subs	r7, r6, #4
 80069d6:	4690      	mov	r8, r2
 80069d8:	6802      	ldr	r2, [r0, #0]
 80069da:	9301      	str	r3, [sp, #4]
 80069dc:	4682      	mov	sl, r0
 80069de:	f846 5c04 	str.w	r5, [r6, #-4]
 80069e2:	46b9      	mov	r9, r7
 80069e4:	463c      	mov	r4, r7
 80069e6:	9502      	str	r5, [sp, #8]
 80069e8:	46ab      	mov	fp, r5
 80069ea:	7851      	ldrb	r1, [r2, #1]
 80069ec:	1c53      	adds	r3, r2, #1
 80069ee:	9303      	str	r3, [sp, #12]
 80069f0:	b341      	cbz	r1, 8006a44 <__hexnan+0x88>
 80069f2:	4608      	mov	r0, r1
 80069f4:	9205      	str	r2, [sp, #20]
 80069f6:	9104      	str	r1, [sp, #16]
 80069f8:	f7ff fd5e 	bl	80064b8 <__hexdig_fun>
 80069fc:	2800      	cmp	r0, #0
 80069fe:	d14f      	bne.n	8006aa0 <__hexnan+0xe4>
 8006a00:	9904      	ldr	r1, [sp, #16]
 8006a02:	9a05      	ldr	r2, [sp, #20]
 8006a04:	2920      	cmp	r1, #32
 8006a06:	d818      	bhi.n	8006a3a <__hexnan+0x7e>
 8006a08:	9b02      	ldr	r3, [sp, #8]
 8006a0a:	459b      	cmp	fp, r3
 8006a0c:	dd13      	ble.n	8006a36 <__hexnan+0x7a>
 8006a0e:	454c      	cmp	r4, r9
 8006a10:	d206      	bcs.n	8006a20 <__hexnan+0x64>
 8006a12:	2d07      	cmp	r5, #7
 8006a14:	dc04      	bgt.n	8006a20 <__hexnan+0x64>
 8006a16:	462a      	mov	r2, r5
 8006a18:	4649      	mov	r1, r9
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	f7ff ffa8 	bl	8006970 <L_shift>
 8006a20:	4544      	cmp	r4, r8
 8006a22:	d950      	bls.n	8006ac6 <__hexnan+0x10a>
 8006a24:	2300      	movs	r3, #0
 8006a26:	f1a4 0904 	sub.w	r9, r4, #4
 8006a2a:	f844 3c04 	str.w	r3, [r4, #-4]
 8006a2e:	f8cd b008 	str.w	fp, [sp, #8]
 8006a32:	464c      	mov	r4, r9
 8006a34:	461d      	mov	r5, r3
 8006a36:	9a03      	ldr	r2, [sp, #12]
 8006a38:	e7d7      	b.n	80069ea <__hexnan+0x2e>
 8006a3a:	2929      	cmp	r1, #41	; 0x29
 8006a3c:	d156      	bne.n	8006aec <__hexnan+0x130>
 8006a3e:	3202      	adds	r2, #2
 8006a40:	f8ca 2000 	str.w	r2, [sl]
 8006a44:	f1bb 0f00 	cmp.w	fp, #0
 8006a48:	d050      	beq.n	8006aec <__hexnan+0x130>
 8006a4a:	454c      	cmp	r4, r9
 8006a4c:	d206      	bcs.n	8006a5c <__hexnan+0xa0>
 8006a4e:	2d07      	cmp	r5, #7
 8006a50:	dc04      	bgt.n	8006a5c <__hexnan+0xa0>
 8006a52:	462a      	mov	r2, r5
 8006a54:	4649      	mov	r1, r9
 8006a56:	4620      	mov	r0, r4
 8006a58:	f7ff ff8a 	bl	8006970 <L_shift>
 8006a5c:	4544      	cmp	r4, r8
 8006a5e:	d934      	bls.n	8006aca <__hexnan+0x10e>
 8006a60:	f1a8 0204 	sub.w	r2, r8, #4
 8006a64:	4623      	mov	r3, r4
 8006a66:	f853 1b04 	ldr.w	r1, [r3], #4
 8006a6a:	f842 1f04 	str.w	r1, [r2, #4]!
 8006a6e:	429f      	cmp	r7, r3
 8006a70:	d2f9      	bcs.n	8006a66 <__hexnan+0xaa>
 8006a72:	1b3b      	subs	r3, r7, r4
 8006a74:	f023 0303 	bic.w	r3, r3, #3
 8006a78:	3304      	adds	r3, #4
 8006a7a:	3401      	adds	r4, #1
 8006a7c:	3e03      	subs	r6, #3
 8006a7e:	42b4      	cmp	r4, r6
 8006a80:	bf88      	it	hi
 8006a82:	2304      	movhi	r3, #4
 8006a84:	4443      	add	r3, r8
 8006a86:	2200      	movs	r2, #0
 8006a88:	f843 2b04 	str.w	r2, [r3], #4
 8006a8c:	429f      	cmp	r7, r3
 8006a8e:	d2fb      	bcs.n	8006a88 <__hexnan+0xcc>
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	b91b      	cbnz	r3, 8006a9c <__hexnan+0xe0>
 8006a94:	4547      	cmp	r7, r8
 8006a96:	d127      	bne.n	8006ae8 <__hexnan+0x12c>
 8006a98:	2301      	movs	r3, #1
 8006a9a:	603b      	str	r3, [r7, #0]
 8006a9c:	2005      	movs	r0, #5
 8006a9e:	e026      	b.n	8006aee <__hexnan+0x132>
 8006aa0:	3501      	adds	r5, #1
 8006aa2:	2d08      	cmp	r5, #8
 8006aa4:	f10b 0b01 	add.w	fp, fp, #1
 8006aa8:	dd06      	ble.n	8006ab8 <__hexnan+0xfc>
 8006aaa:	4544      	cmp	r4, r8
 8006aac:	d9c3      	bls.n	8006a36 <__hexnan+0x7a>
 8006aae:	2300      	movs	r3, #0
 8006ab0:	f844 3c04 	str.w	r3, [r4, #-4]
 8006ab4:	2501      	movs	r5, #1
 8006ab6:	3c04      	subs	r4, #4
 8006ab8:	6822      	ldr	r2, [r4, #0]
 8006aba:	f000 000f 	and.w	r0, r0, #15
 8006abe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006ac2:	6022      	str	r2, [r4, #0]
 8006ac4:	e7b7      	b.n	8006a36 <__hexnan+0x7a>
 8006ac6:	2508      	movs	r5, #8
 8006ac8:	e7b5      	b.n	8006a36 <__hexnan+0x7a>
 8006aca:	9b01      	ldr	r3, [sp, #4]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d0df      	beq.n	8006a90 <__hexnan+0xd4>
 8006ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ad4:	f1c3 0320 	rsb	r3, r3, #32
 8006ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8006adc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006ae0:	401a      	ands	r2, r3
 8006ae2:	f846 2c04 	str.w	r2, [r6, #-4]
 8006ae6:	e7d3      	b.n	8006a90 <__hexnan+0xd4>
 8006ae8:	3f04      	subs	r7, #4
 8006aea:	e7d1      	b.n	8006a90 <__hexnan+0xd4>
 8006aec:	2004      	movs	r0, #4
 8006aee:	b007      	add	sp, #28
 8006af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006af4 <__ascii_mbtowc>:
 8006af4:	b082      	sub	sp, #8
 8006af6:	b901      	cbnz	r1, 8006afa <__ascii_mbtowc+0x6>
 8006af8:	a901      	add	r1, sp, #4
 8006afa:	b142      	cbz	r2, 8006b0e <__ascii_mbtowc+0x1a>
 8006afc:	b14b      	cbz	r3, 8006b12 <__ascii_mbtowc+0x1e>
 8006afe:	7813      	ldrb	r3, [r2, #0]
 8006b00:	600b      	str	r3, [r1, #0]
 8006b02:	7812      	ldrb	r2, [r2, #0]
 8006b04:	1e10      	subs	r0, r2, #0
 8006b06:	bf18      	it	ne
 8006b08:	2001      	movne	r0, #1
 8006b0a:	b002      	add	sp, #8
 8006b0c:	4770      	bx	lr
 8006b0e:	4610      	mov	r0, r2
 8006b10:	e7fb      	b.n	8006b0a <__ascii_mbtowc+0x16>
 8006b12:	f06f 0001 	mvn.w	r0, #1
 8006b16:	e7f8      	b.n	8006b0a <__ascii_mbtowc+0x16>

08006b18 <memcpy>:
 8006b18:	440a      	add	r2, r1
 8006b1a:	4291      	cmp	r1, r2
 8006b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b20:	d100      	bne.n	8006b24 <memcpy+0xc>
 8006b22:	4770      	bx	lr
 8006b24:	b510      	push	{r4, lr}
 8006b26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b2e:	4291      	cmp	r1, r2
 8006b30:	d1f9      	bne.n	8006b26 <memcpy+0xe>
 8006b32:	bd10      	pop	{r4, pc}

08006b34 <_Balloc>:
 8006b34:	b570      	push	{r4, r5, r6, lr}
 8006b36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006b38:	4604      	mov	r4, r0
 8006b3a:	460d      	mov	r5, r1
 8006b3c:	b976      	cbnz	r6, 8006b5c <_Balloc+0x28>
 8006b3e:	2010      	movs	r0, #16
 8006b40:	f000 fdd0 	bl	80076e4 <malloc>
 8006b44:	4602      	mov	r2, r0
 8006b46:	6260      	str	r0, [r4, #36]	; 0x24
 8006b48:	b920      	cbnz	r0, 8006b54 <_Balloc+0x20>
 8006b4a:	4b18      	ldr	r3, [pc, #96]	; (8006bac <_Balloc+0x78>)
 8006b4c:	4818      	ldr	r0, [pc, #96]	; (8006bb0 <_Balloc+0x7c>)
 8006b4e:	2166      	movs	r1, #102	; 0x66
 8006b50:	f000 fd98 	bl	8007684 <__assert_func>
 8006b54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b58:	6006      	str	r6, [r0, #0]
 8006b5a:	60c6      	str	r6, [r0, #12]
 8006b5c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006b5e:	68f3      	ldr	r3, [r6, #12]
 8006b60:	b183      	cbz	r3, 8006b84 <_Balloc+0x50>
 8006b62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006b6a:	b9b8      	cbnz	r0, 8006b9c <_Balloc+0x68>
 8006b6c:	2101      	movs	r1, #1
 8006b6e:	fa01 f605 	lsl.w	r6, r1, r5
 8006b72:	1d72      	adds	r2, r6, #5
 8006b74:	0092      	lsls	r2, r2, #2
 8006b76:	4620      	mov	r0, r4
 8006b78:	f000 fc9d 	bl	80074b6 <_calloc_r>
 8006b7c:	b160      	cbz	r0, 8006b98 <_Balloc+0x64>
 8006b7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006b82:	e00e      	b.n	8006ba2 <_Balloc+0x6e>
 8006b84:	2221      	movs	r2, #33	; 0x21
 8006b86:	2104      	movs	r1, #4
 8006b88:	4620      	mov	r0, r4
 8006b8a:	f000 fc94 	bl	80074b6 <_calloc_r>
 8006b8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b90:	60f0      	str	r0, [r6, #12]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d1e4      	bne.n	8006b62 <_Balloc+0x2e>
 8006b98:	2000      	movs	r0, #0
 8006b9a:	bd70      	pop	{r4, r5, r6, pc}
 8006b9c:	6802      	ldr	r2, [r0, #0]
 8006b9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ba8:	e7f7      	b.n	8006b9a <_Balloc+0x66>
 8006baa:	bf00      	nop
 8006bac:	0800864c 	.word	0x0800864c
 8006bb0:	08008663 	.word	0x08008663

08006bb4 <_Bfree>:
 8006bb4:	b570      	push	{r4, r5, r6, lr}
 8006bb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006bb8:	4605      	mov	r5, r0
 8006bba:	460c      	mov	r4, r1
 8006bbc:	b976      	cbnz	r6, 8006bdc <_Bfree+0x28>
 8006bbe:	2010      	movs	r0, #16
 8006bc0:	f000 fd90 	bl	80076e4 <malloc>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	6268      	str	r0, [r5, #36]	; 0x24
 8006bc8:	b920      	cbnz	r0, 8006bd4 <_Bfree+0x20>
 8006bca:	4b09      	ldr	r3, [pc, #36]	; (8006bf0 <_Bfree+0x3c>)
 8006bcc:	4809      	ldr	r0, [pc, #36]	; (8006bf4 <_Bfree+0x40>)
 8006bce:	218a      	movs	r1, #138	; 0x8a
 8006bd0:	f000 fd58 	bl	8007684 <__assert_func>
 8006bd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006bd8:	6006      	str	r6, [r0, #0]
 8006bda:	60c6      	str	r6, [r0, #12]
 8006bdc:	b13c      	cbz	r4, 8006bee <_Bfree+0x3a>
 8006bde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006be0:	6862      	ldr	r2, [r4, #4]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006be8:	6021      	str	r1, [r4, #0]
 8006bea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006bee:	bd70      	pop	{r4, r5, r6, pc}
 8006bf0:	0800864c 	.word	0x0800864c
 8006bf4:	08008663 	.word	0x08008663

08006bf8 <__multadd>:
 8006bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bfc:	690d      	ldr	r5, [r1, #16]
 8006bfe:	4607      	mov	r7, r0
 8006c00:	460c      	mov	r4, r1
 8006c02:	461e      	mov	r6, r3
 8006c04:	f101 0c14 	add.w	ip, r1, #20
 8006c08:	2000      	movs	r0, #0
 8006c0a:	f8dc 3000 	ldr.w	r3, [ip]
 8006c0e:	b299      	uxth	r1, r3
 8006c10:	fb02 6101 	mla	r1, r2, r1, r6
 8006c14:	0c1e      	lsrs	r6, r3, #16
 8006c16:	0c0b      	lsrs	r3, r1, #16
 8006c18:	fb02 3306 	mla	r3, r2, r6, r3
 8006c1c:	b289      	uxth	r1, r1
 8006c1e:	3001      	adds	r0, #1
 8006c20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006c24:	4285      	cmp	r5, r0
 8006c26:	f84c 1b04 	str.w	r1, [ip], #4
 8006c2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006c2e:	dcec      	bgt.n	8006c0a <__multadd+0x12>
 8006c30:	b30e      	cbz	r6, 8006c76 <__multadd+0x7e>
 8006c32:	68a3      	ldr	r3, [r4, #8]
 8006c34:	42ab      	cmp	r3, r5
 8006c36:	dc19      	bgt.n	8006c6c <__multadd+0x74>
 8006c38:	6861      	ldr	r1, [r4, #4]
 8006c3a:	4638      	mov	r0, r7
 8006c3c:	3101      	adds	r1, #1
 8006c3e:	f7ff ff79 	bl	8006b34 <_Balloc>
 8006c42:	4680      	mov	r8, r0
 8006c44:	b928      	cbnz	r0, 8006c52 <__multadd+0x5a>
 8006c46:	4602      	mov	r2, r0
 8006c48:	4b0c      	ldr	r3, [pc, #48]	; (8006c7c <__multadd+0x84>)
 8006c4a:	480d      	ldr	r0, [pc, #52]	; (8006c80 <__multadd+0x88>)
 8006c4c:	21b5      	movs	r1, #181	; 0xb5
 8006c4e:	f000 fd19 	bl	8007684 <__assert_func>
 8006c52:	6922      	ldr	r2, [r4, #16]
 8006c54:	3202      	adds	r2, #2
 8006c56:	f104 010c 	add.w	r1, r4, #12
 8006c5a:	0092      	lsls	r2, r2, #2
 8006c5c:	300c      	adds	r0, #12
 8006c5e:	f7ff ff5b 	bl	8006b18 <memcpy>
 8006c62:	4621      	mov	r1, r4
 8006c64:	4638      	mov	r0, r7
 8006c66:	f7ff ffa5 	bl	8006bb4 <_Bfree>
 8006c6a:	4644      	mov	r4, r8
 8006c6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006c70:	3501      	adds	r5, #1
 8006c72:	615e      	str	r6, [r3, #20]
 8006c74:	6125      	str	r5, [r4, #16]
 8006c76:	4620      	mov	r0, r4
 8006c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c7c:	080085c0 	.word	0x080085c0
 8006c80:	08008663 	.word	0x08008663

08006c84 <__s2b>:
 8006c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c88:	460c      	mov	r4, r1
 8006c8a:	4615      	mov	r5, r2
 8006c8c:	461f      	mov	r7, r3
 8006c8e:	2209      	movs	r2, #9
 8006c90:	3308      	adds	r3, #8
 8006c92:	4606      	mov	r6, r0
 8006c94:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c98:	2100      	movs	r1, #0
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	db09      	blt.n	8006cb4 <__s2b+0x30>
 8006ca0:	4630      	mov	r0, r6
 8006ca2:	f7ff ff47 	bl	8006b34 <_Balloc>
 8006ca6:	b940      	cbnz	r0, 8006cba <__s2b+0x36>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	4b19      	ldr	r3, [pc, #100]	; (8006d10 <__s2b+0x8c>)
 8006cac:	4819      	ldr	r0, [pc, #100]	; (8006d14 <__s2b+0x90>)
 8006cae:	21ce      	movs	r1, #206	; 0xce
 8006cb0:	f000 fce8 	bl	8007684 <__assert_func>
 8006cb4:	0052      	lsls	r2, r2, #1
 8006cb6:	3101      	adds	r1, #1
 8006cb8:	e7f0      	b.n	8006c9c <__s2b+0x18>
 8006cba:	9b08      	ldr	r3, [sp, #32]
 8006cbc:	6143      	str	r3, [r0, #20]
 8006cbe:	2d09      	cmp	r5, #9
 8006cc0:	f04f 0301 	mov.w	r3, #1
 8006cc4:	6103      	str	r3, [r0, #16]
 8006cc6:	dd16      	ble.n	8006cf6 <__s2b+0x72>
 8006cc8:	f104 0909 	add.w	r9, r4, #9
 8006ccc:	46c8      	mov	r8, r9
 8006cce:	442c      	add	r4, r5
 8006cd0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006cd4:	4601      	mov	r1, r0
 8006cd6:	3b30      	subs	r3, #48	; 0x30
 8006cd8:	220a      	movs	r2, #10
 8006cda:	4630      	mov	r0, r6
 8006cdc:	f7ff ff8c 	bl	8006bf8 <__multadd>
 8006ce0:	45a0      	cmp	r8, r4
 8006ce2:	d1f5      	bne.n	8006cd0 <__s2b+0x4c>
 8006ce4:	f1a5 0408 	sub.w	r4, r5, #8
 8006ce8:	444c      	add	r4, r9
 8006cea:	1b2d      	subs	r5, r5, r4
 8006cec:	1963      	adds	r3, r4, r5
 8006cee:	42bb      	cmp	r3, r7
 8006cf0:	db04      	blt.n	8006cfc <__s2b+0x78>
 8006cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cf6:	340a      	adds	r4, #10
 8006cf8:	2509      	movs	r5, #9
 8006cfa:	e7f6      	b.n	8006cea <__s2b+0x66>
 8006cfc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006d00:	4601      	mov	r1, r0
 8006d02:	3b30      	subs	r3, #48	; 0x30
 8006d04:	220a      	movs	r2, #10
 8006d06:	4630      	mov	r0, r6
 8006d08:	f7ff ff76 	bl	8006bf8 <__multadd>
 8006d0c:	e7ee      	b.n	8006cec <__s2b+0x68>
 8006d0e:	bf00      	nop
 8006d10:	080085c0 	.word	0x080085c0
 8006d14:	08008663 	.word	0x08008663

08006d18 <__hi0bits>:
 8006d18:	0c03      	lsrs	r3, r0, #16
 8006d1a:	041b      	lsls	r3, r3, #16
 8006d1c:	b9d3      	cbnz	r3, 8006d54 <__hi0bits+0x3c>
 8006d1e:	0400      	lsls	r0, r0, #16
 8006d20:	2310      	movs	r3, #16
 8006d22:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006d26:	bf04      	itt	eq
 8006d28:	0200      	lsleq	r0, r0, #8
 8006d2a:	3308      	addeq	r3, #8
 8006d2c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006d30:	bf04      	itt	eq
 8006d32:	0100      	lsleq	r0, r0, #4
 8006d34:	3304      	addeq	r3, #4
 8006d36:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006d3a:	bf04      	itt	eq
 8006d3c:	0080      	lsleq	r0, r0, #2
 8006d3e:	3302      	addeq	r3, #2
 8006d40:	2800      	cmp	r0, #0
 8006d42:	db05      	blt.n	8006d50 <__hi0bits+0x38>
 8006d44:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006d48:	f103 0301 	add.w	r3, r3, #1
 8006d4c:	bf08      	it	eq
 8006d4e:	2320      	moveq	r3, #32
 8006d50:	4618      	mov	r0, r3
 8006d52:	4770      	bx	lr
 8006d54:	2300      	movs	r3, #0
 8006d56:	e7e4      	b.n	8006d22 <__hi0bits+0xa>

08006d58 <__lo0bits>:
 8006d58:	6803      	ldr	r3, [r0, #0]
 8006d5a:	f013 0207 	ands.w	r2, r3, #7
 8006d5e:	4601      	mov	r1, r0
 8006d60:	d00b      	beq.n	8006d7a <__lo0bits+0x22>
 8006d62:	07da      	lsls	r2, r3, #31
 8006d64:	d423      	bmi.n	8006dae <__lo0bits+0x56>
 8006d66:	0798      	lsls	r0, r3, #30
 8006d68:	bf49      	itett	mi
 8006d6a:	085b      	lsrmi	r3, r3, #1
 8006d6c:	089b      	lsrpl	r3, r3, #2
 8006d6e:	2001      	movmi	r0, #1
 8006d70:	600b      	strmi	r3, [r1, #0]
 8006d72:	bf5c      	itt	pl
 8006d74:	600b      	strpl	r3, [r1, #0]
 8006d76:	2002      	movpl	r0, #2
 8006d78:	4770      	bx	lr
 8006d7a:	b298      	uxth	r0, r3
 8006d7c:	b9a8      	cbnz	r0, 8006daa <__lo0bits+0x52>
 8006d7e:	0c1b      	lsrs	r3, r3, #16
 8006d80:	2010      	movs	r0, #16
 8006d82:	b2da      	uxtb	r2, r3
 8006d84:	b90a      	cbnz	r2, 8006d8a <__lo0bits+0x32>
 8006d86:	3008      	adds	r0, #8
 8006d88:	0a1b      	lsrs	r3, r3, #8
 8006d8a:	071a      	lsls	r2, r3, #28
 8006d8c:	bf04      	itt	eq
 8006d8e:	091b      	lsreq	r3, r3, #4
 8006d90:	3004      	addeq	r0, #4
 8006d92:	079a      	lsls	r2, r3, #30
 8006d94:	bf04      	itt	eq
 8006d96:	089b      	lsreq	r3, r3, #2
 8006d98:	3002      	addeq	r0, #2
 8006d9a:	07da      	lsls	r2, r3, #31
 8006d9c:	d403      	bmi.n	8006da6 <__lo0bits+0x4e>
 8006d9e:	085b      	lsrs	r3, r3, #1
 8006da0:	f100 0001 	add.w	r0, r0, #1
 8006da4:	d005      	beq.n	8006db2 <__lo0bits+0x5a>
 8006da6:	600b      	str	r3, [r1, #0]
 8006da8:	4770      	bx	lr
 8006daa:	4610      	mov	r0, r2
 8006dac:	e7e9      	b.n	8006d82 <__lo0bits+0x2a>
 8006dae:	2000      	movs	r0, #0
 8006db0:	4770      	bx	lr
 8006db2:	2020      	movs	r0, #32
 8006db4:	4770      	bx	lr
	...

08006db8 <__i2b>:
 8006db8:	b510      	push	{r4, lr}
 8006dba:	460c      	mov	r4, r1
 8006dbc:	2101      	movs	r1, #1
 8006dbe:	f7ff feb9 	bl	8006b34 <_Balloc>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	b928      	cbnz	r0, 8006dd2 <__i2b+0x1a>
 8006dc6:	4b05      	ldr	r3, [pc, #20]	; (8006ddc <__i2b+0x24>)
 8006dc8:	4805      	ldr	r0, [pc, #20]	; (8006de0 <__i2b+0x28>)
 8006dca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006dce:	f000 fc59 	bl	8007684 <__assert_func>
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	6144      	str	r4, [r0, #20]
 8006dd6:	6103      	str	r3, [r0, #16]
 8006dd8:	bd10      	pop	{r4, pc}
 8006dda:	bf00      	nop
 8006ddc:	080085c0 	.word	0x080085c0
 8006de0:	08008663 	.word	0x08008663

08006de4 <__multiply>:
 8006de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de8:	4691      	mov	r9, r2
 8006dea:	690a      	ldr	r2, [r1, #16]
 8006dec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	bfb8      	it	lt
 8006df4:	460b      	movlt	r3, r1
 8006df6:	460c      	mov	r4, r1
 8006df8:	bfbc      	itt	lt
 8006dfa:	464c      	movlt	r4, r9
 8006dfc:	4699      	movlt	r9, r3
 8006dfe:	6927      	ldr	r7, [r4, #16]
 8006e00:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006e04:	68a3      	ldr	r3, [r4, #8]
 8006e06:	6861      	ldr	r1, [r4, #4]
 8006e08:	eb07 060a 	add.w	r6, r7, sl
 8006e0c:	42b3      	cmp	r3, r6
 8006e0e:	b085      	sub	sp, #20
 8006e10:	bfb8      	it	lt
 8006e12:	3101      	addlt	r1, #1
 8006e14:	f7ff fe8e 	bl	8006b34 <_Balloc>
 8006e18:	b930      	cbnz	r0, 8006e28 <__multiply+0x44>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	4b44      	ldr	r3, [pc, #272]	; (8006f30 <__multiply+0x14c>)
 8006e1e:	4845      	ldr	r0, [pc, #276]	; (8006f34 <__multiply+0x150>)
 8006e20:	f240 115d 	movw	r1, #349	; 0x15d
 8006e24:	f000 fc2e 	bl	8007684 <__assert_func>
 8006e28:	f100 0514 	add.w	r5, r0, #20
 8006e2c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006e30:	462b      	mov	r3, r5
 8006e32:	2200      	movs	r2, #0
 8006e34:	4543      	cmp	r3, r8
 8006e36:	d321      	bcc.n	8006e7c <__multiply+0x98>
 8006e38:	f104 0314 	add.w	r3, r4, #20
 8006e3c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006e40:	f109 0314 	add.w	r3, r9, #20
 8006e44:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006e48:	9202      	str	r2, [sp, #8]
 8006e4a:	1b3a      	subs	r2, r7, r4
 8006e4c:	3a15      	subs	r2, #21
 8006e4e:	f022 0203 	bic.w	r2, r2, #3
 8006e52:	3204      	adds	r2, #4
 8006e54:	f104 0115 	add.w	r1, r4, #21
 8006e58:	428f      	cmp	r7, r1
 8006e5a:	bf38      	it	cc
 8006e5c:	2204      	movcc	r2, #4
 8006e5e:	9201      	str	r2, [sp, #4]
 8006e60:	9a02      	ldr	r2, [sp, #8]
 8006e62:	9303      	str	r3, [sp, #12]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d80c      	bhi.n	8006e82 <__multiply+0x9e>
 8006e68:	2e00      	cmp	r6, #0
 8006e6a:	dd03      	ble.n	8006e74 <__multiply+0x90>
 8006e6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d05a      	beq.n	8006f2a <__multiply+0x146>
 8006e74:	6106      	str	r6, [r0, #16]
 8006e76:	b005      	add	sp, #20
 8006e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e7c:	f843 2b04 	str.w	r2, [r3], #4
 8006e80:	e7d8      	b.n	8006e34 <__multiply+0x50>
 8006e82:	f8b3 a000 	ldrh.w	sl, [r3]
 8006e86:	f1ba 0f00 	cmp.w	sl, #0
 8006e8a:	d024      	beq.n	8006ed6 <__multiply+0xf2>
 8006e8c:	f104 0e14 	add.w	lr, r4, #20
 8006e90:	46a9      	mov	r9, r5
 8006e92:	f04f 0c00 	mov.w	ip, #0
 8006e96:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006e9a:	f8d9 1000 	ldr.w	r1, [r9]
 8006e9e:	fa1f fb82 	uxth.w	fp, r2
 8006ea2:	b289      	uxth	r1, r1
 8006ea4:	fb0a 110b 	mla	r1, sl, fp, r1
 8006ea8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006eac:	f8d9 2000 	ldr.w	r2, [r9]
 8006eb0:	4461      	add	r1, ip
 8006eb2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006eb6:	fb0a c20b 	mla	r2, sl, fp, ip
 8006eba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006ebe:	b289      	uxth	r1, r1
 8006ec0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006ec4:	4577      	cmp	r7, lr
 8006ec6:	f849 1b04 	str.w	r1, [r9], #4
 8006eca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006ece:	d8e2      	bhi.n	8006e96 <__multiply+0xb2>
 8006ed0:	9a01      	ldr	r2, [sp, #4]
 8006ed2:	f845 c002 	str.w	ip, [r5, r2]
 8006ed6:	9a03      	ldr	r2, [sp, #12]
 8006ed8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006edc:	3304      	adds	r3, #4
 8006ede:	f1b9 0f00 	cmp.w	r9, #0
 8006ee2:	d020      	beq.n	8006f26 <__multiply+0x142>
 8006ee4:	6829      	ldr	r1, [r5, #0]
 8006ee6:	f104 0c14 	add.w	ip, r4, #20
 8006eea:	46ae      	mov	lr, r5
 8006eec:	f04f 0a00 	mov.w	sl, #0
 8006ef0:	f8bc b000 	ldrh.w	fp, [ip]
 8006ef4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006ef8:	fb09 220b 	mla	r2, r9, fp, r2
 8006efc:	4492      	add	sl, r2
 8006efe:	b289      	uxth	r1, r1
 8006f00:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006f04:	f84e 1b04 	str.w	r1, [lr], #4
 8006f08:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006f0c:	f8be 1000 	ldrh.w	r1, [lr]
 8006f10:	0c12      	lsrs	r2, r2, #16
 8006f12:	fb09 1102 	mla	r1, r9, r2, r1
 8006f16:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006f1a:	4567      	cmp	r7, ip
 8006f1c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006f20:	d8e6      	bhi.n	8006ef0 <__multiply+0x10c>
 8006f22:	9a01      	ldr	r2, [sp, #4]
 8006f24:	50a9      	str	r1, [r5, r2]
 8006f26:	3504      	adds	r5, #4
 8006f28:	e79a      	b.n	8006e60 <__multiply+0x7c>
 8006f2a:	3e01      	subs	r6, #1
 8006f2c:	e79c      	b.n	8006e68 <__multiply+0x84>
 8006f2e:	bf00      	nop
 8006f30:	080085c0 	.word	0x080085c0
 8006f34:	08008663 	.word	0x08008663

08006f38 <__pow5mult>:
 8006f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f3c:	4615      	mov	r5, r2
 8006f3e:	f012 0203 	ands.w	r2, r2, #3
 8006f42:	4606      	mov	r6, r0
 8006f44:	460f      	mov	r7, r1
 8006f46:	d007      	beq.n	8006f58 <__pow5mult+0x20>
 8006f48:	4c25      	ldr	r4, [pc, #148]	; (8006fe0 <__pow5mult+0xa8>)
 8006f4a:	3a01      	subs	r2, #1
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006f52:	f7ff fe51 	bl	8006bf8 <__multadd>
 8006f56:	4607      	mov	r7, r0
 8006f58:	10ad      	asrs	r5, r5, #2
 8006f5a:	d03d      	beq.n	8006fd8 <__pow5mult+0xa0>
 8006f5c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006f5e:	b97c      	cbnz	r4, 8006f80 <__pow5mult+0x48>
 8006f60:	2010      	movs	r0, #16
 8006f62:	f000 fbbf 	bl	80076e4 <malloc>
 8006f66:	4602      	mov	r2, r0
 8006f68:	6270      	str	r0, [r6, #36]	; 0x24
 8006f6a:	b928      	cbnz	r0, 8006f78 <__pow5mult+0x40>
 8006f6c:	4b1d      	ldr	r3, [pc, #116]	; (8006fe4 <__pow5mult+0xac>)
 8006f6e:	481e      	ldr	r0, [pc, #120]	; (8006fe8 <__pow5mult+0xb0>)
 8006f70:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006f74:	f000 fb86 	bl	8007684 <__assert_func>
 8006f78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f7c:	6004      	str	r4, [r0, #0]
 8006f7e:	60c4      	str	r4, [r0, #12]
 8006f80:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006f84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f88:	b94c      	cbnz	r4, 8006f9e <__pow5mult+0x66>
 8006f8a:	f240 2171 	movw	r1, #625	; 0x271
 8006f8e:	4630      	mov	r0, r6
 8006f90:	f7ff ff12 	bl	8006db8 <__i2b>
 8006f94:	2300      	movs	r3, #0
 8006f96:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	6003      	str	r3, [r0, #0]
 8006f9e:	f04f 0900 	mov.w	r9, #0
 8006fa2:	07eb      	lsls	r3, r5, #31
 8006fa4:	d50a      	bpl.n	8006fbc <__pow5mult+0x84>
 8006fa6:	4639      	mov	r1, r7
 8006fa8:	4622      	mov	r2, r4
 8006faa:	4630      	mov	r0, r6
 8006fac:	f7ff ff1a 	bl	8006de4 <__multiply>
 8006fb0:	4639      	mov	r1, r7
 8006fb2:	4680      	mov	r8, r0
 8006fb4:	4630      	mov	r0, r6
 8006fb6:	f7ff fdfd 	bl	8006bb4 <_Bfree>
 8006fba:	4647      	mov	r7, r8
 8006fbc:	106d      	asrs	r5, r5, #1
 8006fbe:	d00b      	beq.n	8006fd8 <__pow5mult+0xa0>
 8006fc0:	6820      	ldr	r0, [r4, #0]
 8006fc2:	b938      	cbnz	r0, 8006fd4 <__pow5mult+0x9c>
 8006fc4:	4622      	mov	r2, r4
 8006fc6:	4621      	mov	r1, r4
 8006fc8:	4630      	mov	r0, r6
 8006fca:	f7ff ff0b 	bl	8006de4 <__multiply>
 8006fce:	6020      	str	r0, [r4, #0]
 8006fd0:	f8c0 9000 	str.w	r9, [r0]
 8006fd4:	4604      	mov	r4, r0
 8006fd6:	e7e4      	b.n	8006fa2 <__pow5mult+0x6a>
 8006fd8:	4638      	mov	r0, r7
 8006fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fde:	bf00      	nop
 8006fe0:	080087b0 	.word	0x080087b0
 8006fe4:	0800864c 	.word	0x0800864c
 8006fe8:	08008663 	.word	0x08008663

08006fec <__lshift>:
 8006fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ff0:	460c      	mov	r4, r1
 8006ff2:	6849      	ldr	r1, [r1, #4]
 8006ff4:	6923      	ldr	r3, [r4, #16]
 8006ff6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006ffa:	68a3      	ldr	r3, [r4, #8]
 8006ffc:	4607      	mov	r7, r0
 8006ffe:	4691      	mov	r9, r2
 8007000:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007004:	f108 0601 	add.w	r6, r8, #1
 8007008:	42b3      	cmp	r3, r6
 800700a:	db0b      	blt.n	8007024 <__lshift+0x38>
 800700c:	4638      	mov	r0, r7
 800700e:	f7ff fd91 	bl	8006b34 <_Balloc>
 8007012:	4605      	mov	r5, r0
 8007014:	b948      	cbnz	r0, 800702a <__lshift+0x3e>
 8007016:	4602      	mov	r2, r0
 8007018:	4b2a      	ldr	r3, [pc, #168]	; (80070c4 <__lshift+0xd8>)
 800701a:	482b      	ldr	r0, [pc, #172]	; (80070c8 <__lshift+0xdc>)
 800701c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007020:	f000 fb30 	bl	8007684 <__assert_func>
 8007024:	3101      	adds	r1, #1
 8007026:	005b      	lsls	r3, r3, #1
 8007028:	e7ee      	b.n	8007008 <__lshift+0x1c>
 800702a:	2300      	movs	r3, #0
 800702c:	f100 0114 	add.w	r1, r0, #20
 8007030:	f100 0210 	add.w	r2, r0, #16
 8007034:	4618      	mov	r0, r3
 8007036:	4553      	cmp	r3, sl
 8007038:	db37      	blt.n	80070aa <__lshift+0xbe>
 800703a:	6920      	ldr	r0, [r4, #16]
 800703c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007040:	f104 0314 	add.w	r3, r4, #20
 8007044:	f019 091f 	ands.w	r9, r9, #31
 8007048:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800704c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007050:	d02f      	beq.n	80070b2 <__lshift+0xc6>
 8007052:	f1c9 0e20 	rsb	lr, r9, #32
 8007056:	468a      	mov	sl, r1
 8007058:	f04f 0c00 	mov.w	ip, #0
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	fa02 f209 	lsl.w	r2, r2, r9
 8007062:	ea42 020c 	orr.w	r2, r2, ip
 8007066:	f84a 2b04 	str.w	r2, [sl], #4
 800706a:	f853 2b04 	ldr.w	r2, [r3], #4
 800706e:	4298      	cmp	r0, r3
 8007070:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007074:	d8f2      	bhi.n	800705c <__lshift+0x70>
 8007076:	1b03      	subs	r3, r0, r4
 8007078:	3b15      	subs	r3, #21
 800707a:	f023 0303 	bic.w	r3, r3, #3
 800707e:	3304      	adds	r3, #4
 8007080:	f104 0215 	add.w	r2, r4, #21
 8007084:	4290      	cmp	r0, r2
 8007086:	bf38      	it	cc
 8007088:	2304      	movcc	r3, #4
 800708a:	f841 c003 	str.w	ip, [r1, r3]
 800708e:	f1bc 0f00 	cmp.w	ip, #0
 8007092:	d001      	beq.n	8007098 <__lshift+0xac>
 8007094:	f108 0602 	add.w	r6, r8, #2
 8007098:	3e01      	subs	r6, #1
 800709a:	4638      	mov	r0, r7
 800709c:	612e      	str	r6, [r5, #16]
 800709e:	4621      	mov	r1, r4
 80070a0:	f7ff fd88 	bl	8006bb4 <_Bfree>
 80070a4:	4628      	mov	r0, r5
 80070a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80070ae:	3301      	adds	r3, #1
 80070b0:	e7c1      	b.n	8007036 <__lshift+0x4a>
 80070b2:	3904      	subs	r1, #4
 80070b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80070b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80070bc:	4298      	cmp	r0, r3
 80070be:	d8f9      	bhi.n	80070b4 <__lshift+0xc8>
 80070c0:	e7ea      	b.n	8007098 <__lshift+0xac>
 80070c2:	bf00      	nop
 80070c4:	080085c0 	.word	0x080085c0
 80070c8:	08008663 	.word	0x08008663

080070cc <__mcmp>:
 80070cc:	b530      	push	{r4, r5, lr}
 80070ce:	6902      	ldr	r2, [r0, #16]
 80070d0:	690c      	ldr	r4, [r1, #16]
 80070d2:	1b12      	subs	r2, r2, r4
 80070d4:	d10e      	bne.n	80070f4 <__mcmp+0x28>
 80070d6:	f100 0314 	add.w	r3, r0, #20
 80070da:	3114      	adds	r1, #20
 80070dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80070e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80070e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80070e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80070ec:	42a5      	cmp	r5, r4
 80070ee:	d003      	beq.n	80070f8 <__mcmp+0x2c>
 80070f0:	d305      	bcc.n	80070fe <__mcmp+0x32>
 80070f2:	2201      	movs	r2, #1
 80070f4:	4610      	mov	r0, r2
 80070f6:	bd30      	pop	{r4, r5, pc}
 80070f8:	4283      	cmp	r3, r0
 80070fa:	d3f3      	bcc.n	80070e4 <__mcmp+0x18>
 80070fc:	e7fa      	b.n	80070f4 <__mcmp+0x28>
 80070fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007102:	e7f7      	b.n	80070f4 <__mcmp+0x28>

08007104 <__mdiff>:
 8007104:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007108:	460c      	mov	r4, r1
 800710a:	4606      	mov	r6, r0
 800710c:	4611      	mov	r1, r2
 800710e:	4620      	mov	r0, r4
 8007110:	4690      	mov	r8, r2
 8007112:	f7ff ffdb 	bl	80070cc <__mcmp>
 8007116:	1e05      	subs	r5, r0, #0
 8007118:	d110      	bne.n	800713c <__mdiff+0x38>
 800711a:	4629      	mov	r1, r5
 800711c:	4630      	mov	r0, r6
 800711e:	f7ff fd09 	bl	8006b34 <_Balloc>
 8007122:	b930      	cbnz	r0, 8007132 <__mdiff+0x2e>
 8007124:	4b3a      	ldr	r3, [pc, #232]	; (8007210 <__mdiff+0x10c>)
 8007126:	4602      	mov	r2, r0
 8007128:	f240 2132 	movw	r1, #562	; 0x232
 800712c:	4839      	ldr	r0, [pc, #228]	; (8007214 <__mdiff+0x110>)
 800712e:	f000 faa9 	bl	8007684 <__assert_func>
 8007132:	2301      	movs	r3, #1
 8007134:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007138:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800713c:	bfa4      	itt	ge
 800713e:	4643      	movge	r3, r8
 8007140:	46a0      	movge	r8, r4
 8007142:	4630      	mov	r0, r6
 8007144:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007148:	bfa6      	itte	ge
 800714a:	461c      	movge	r4, r3
 800714c:	2500      	movge	r5, #0
 800714e:	2501      	movlt	r5, #1
 8007150:	f7ff fcf0 	bl	8006b34 <_Balloc>
 8007154:	b920      	cbnz	r0, 8007160 <__mdiff+0x5c>
 8007156:	4b2e      	ldr	r3, [pc, #184]	; (8007210 <__mdiff+0x10c>)
 8007158:	4602      	mov	r2, r0
 800715a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800715e:	e7e5      	b.n	800712c <__mdiff+0x28>
 8007160:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007164:	6926      	ldr	r6, [r4, #16]
 8007166:	60c5      	str	r5, [r0, #12]
 8007168:	f104 0914 	add.w	r9, r4, #20
 800716c:	f108 0514 	add.w	r5, r8, #20
 8007170:	f100 0e14 	add.w	lr, r0, #20
 8007174:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007178:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800717c:	f108 0210 	add.w	r2, r8, #16
 8007180:	46f2      	mov	sl, lr
 8007182:	2100      	movs	r1, #0
 8007184:	f859 3b04 	ldr.w	r3, [r9], #4
 8007188:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800718c:	fa1f f883 	uxth.w	r8, r3
 8007190:	fa11 f18b 	uxtah	r1, r1, fp
 8007194:	0c1b      	lsrs	r3, r3, #16
 8007196:	eba1 0808 	sub.w	r8, r1, r8
 800719a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800719e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80071a2:	fa1f f888 	uxth.w	r8, r8
 80071a6:	1419      	asrs	r1, r3, #16
 80071a8:	454e      	cmp	r6, r9
 80071aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80071ae:	f84a 3b04 	str.w	r3, [sl], #4
 80071b2:	d8e7      	bhi.n	8007184 <__mdiff+0x80>
 80071b4:	1b33      	subs	r3, r6, r4
 80071b6:	3b15      	subs	r3, #21
 80071b8:	f023 0303 	bic.w	r3, r3, #3
 80071bc:	3304      	adds	r3, #4
 80071be:	3415      	adds	r4, #21
 80071c0:	42a6      	cmp	r6, r4
 80071c2:	bf38      	it	cc
 80071c4:	2304      	movcc	r3, #4
 80071c6:	441d      	add	r5, r3
 80071c8:	4473      	add	r3, lr
 80071ca:	469e      	mov	lr, r3
 80071cc:	462e      	mov	r6, r5
 80071ce:	4566      	cmp	r6, ip
 80071d0:	d30e      	bcc.n	80071f0 <__mdiff+0xec>
 80071d2:	f10c 0203 	add.w	r2, ip, #3
 80071d6:	1b52      	subs	r2, r2, r5
 80071d8:	f022 0203 	bic.w	r2, r2, #3
 80071dc:	3d03      	subs	r5, #3
 80071de:	45ac      	cmp	ip, r5
 80071e0:	bf38      	it	cc
 80071e2:	2200      	movcc	r2, #0
 80071e4:	441a      	add	r2, r3
 80071e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80071ea:	b17b      	cbz	r3, 800720c <__mdiff+0x108>
 80071ec:	6107      	str	r7, [r0, #16]
 80071ee:	e7a3      	b.n	8007138 <__mdiff+0x34>
 80071f0:	f856 8b04 	ldr.w	r8, [r6], #4
 80071f4:	fa11 f288 	uxtah	r2, r1, r8
 80071f8:	1414      	asrs	r4, r2, #16
 80071fa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80071fe:	b292      	uxth	r2, r2
 8007200:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007204:	f84e 2b04 	str.w	r2, [lr], #4
 8007208:	1421      	asrs	r1, r4, #16
 800720a:	e7e0      	b.n	80071ce <__mdiff+0xca>
 800720c:	3f01      	subs	r7, #1
 800720e:	e7ea      	b.n	80071e6 <__mdiff+0xe2>
 8007210:	080085c0 	.word	0x080085c0
 8007214:	08008663 	.word	0x08008663

08007218 <__ulp>:
 8007218:	b082      	sub	sp, #8
 800721a:	ed8d 0b00 	vstr	d0, [sp]
 800721e:	9b01      	ldr	r3, [sp, #4]
 8007220:	4912      	ldr	r1, [pc, #72]	; (800726c <__ulp+0x54>)
 8007222:	4019      	ands	r1, r3
 8007224:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007228:	2900      	cmp	r1, #0
 800722a:	dd05      	ble.n	8007238 <__ulp+0x20>
 800722c:	2200      	movs	r2, #0
 800722e:	460b      	mov	r3, r1
 8007230:	ec43 2b10 	vmov	d0, r2, r3
 8007234:	b002      	add	sp, #8
 8007236:	4770      	bx	lr
 8007238:	4249      	negs	r1, r1
 800723a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800723e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007242:	f04f 0200 	mov.w	r2, #0
 8007246:	f04f 0300 	mov.w	r3, #0
 800724a:	da04      	bge.n	8007256 <__ulp+0x3e>
 800724c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007250:	fa41 f300 	asr.w	r3, r1, r0
 8007254:	e7ec      	b.n	8007230 <__ulp+0x18>
 8007256:	f1a0 0114 	sub.w	r1, r0, #20
 800725a:	291e      	cmp	r1, #30
 800725c:	bfda      	itte	le
 800725e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007262:	fa20 f101 	lsrle.w	r1, r0, r1
 8007266:	2101      	movgt	r1, #1
 8007268:	460a      	mov	r2, r1
 800726a:	e7e1      	b.n	8007230 <__ulp+0x18>
 800726c:	7ff00000 	.word	0x7ff00000

08007270 <__b2d>:
 8007270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007272:	6905      	ldr	r5, [r0, #16]
 8007274:	f100 0714 	add.w	r7, r0, #20
 8007278:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800727c:	1f2e      	subs	r6, r5, #4
 800727e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007282:	4620      	mov	r0, r4
 8007284:	f7ff fd48 	bl	8006d18 <__hi0bits>
 8007288:	f1c0 0320 	rsb	r3, r0, #32
 800728c:	280a      	cmp	r0, #10
 800728e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800730c <__b2d+0x9c>
 8007292:	600b      	str	r3, [r1, #0]
 8007294:	dc14      	bgt.n	80072c0 <__b2d+0x50>
 8007296:	f1c0 0e0b 	rsb	lr, r0, #11
 800729a:	fa24 f10e 	lsr.w	r1, r4, lr
 800729e:	42b7      	cmp	r7, r6
 80072a0:	ea41 030c 	orr.w	r3, r1, ip
 80072a4:	bf34      	ite	cc
 80072a6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80072aa:	2100      	movcs	r1, #0
 80072ac:	3015      	adds	r0, #21
 80072ae:	fa04 f000 	lsl.w	r0, r4, r0
 80072b2:	fa21 f10e 	lsr.w	r1, r1, lr
 80072b6:	ea40 0201 	orr.w	r2, r0, r1
 80072ba:	ec43 2b10 	vmov	d0, r2, r3
 80072be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072c0:	42b7      	cmp	r7, r6
 80072c2:	bf3a      	itte	cc
 80072c4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80072c8:	f1a5 0608 	subcc.w	r6, r5, #8
 80072cc:	2100      	movcs	r1, #0
 80072ce:	380b      	subs	r0, #11
 80072d0:	d017      	beq.n	8007302 <__b2d+0x92>
 80072d2:	f1c0 0c20 	rsb	ip, r0, #32
 80072d6:	fa04 f500 	lsl.w	r5, r4, r0
 80072da:	42be      	cmp	r6, r7
 80072dc:	fa21 f40c 	lsr.w	r4, r1, ip
 80072e0:	ea45 0504 	orr.w	r5, r5, r4
 80072e4:	bf8c      	ite	hi
 80072e6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80072ea:	2400      	movls	r4, #0
 80072ec:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80072f0:	fa01 f000 	lsl.w	r0, r1, r0
 80072f4:	fa24 f40c 	lsr.w	r4, r4, ip
 80072f8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80072fc:	ea40 0204 	orr.w	r2, r0, r4
 8007300:	e7db      	b.n	80072ba <__b2d+0x4a>
 8007302:	ea44 030c 	orr.w	r3, r4, ip
 8007306:	460a      	mov	r2, r1
 8007308:	e7d7      	b.n	80072ba <__b2d+0x4a>
 800730a:	bf00      	nop
 800730c:	3ff00000 	.word	0x3ff00000

08007310 <__d2b>:
 8007310:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007314:	4689      	mov	r9, r1
 8007316:	2101      	movs	r1, #1
 8007318:	ec57 6b10 	vmov	r6, r7, d0
 800731c:	4690      	mov	r8, r2
 800731e:	f7ff fc09 	bl	8006b34 <_Balloc>
 8007322:	4604      	mov	r4, r0
 8007324:	b930      	cbnz	r0, 8007334 <__d2b+0x24>
 8007326:	4602      	mov	r2, r0
 8007328:	4b25      	ldr	r3, [pc, #148]	; (80073c0 <__d2b+0xb0>)
 800732a:	4826      	ldr	r0, [pc, #152]	; (80073c4 <__d2b+0xb4>)
 800732c:	f240 310a 	movw	r1, #778	; 0x30a
 8007330:	f000 f9a8 	bl	8007684 <__assert_func>
 8007334:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007338:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800733c:	bb35      	cbnz	r5, 800738c <__d2b+0x7c>
 800733e:	2e00      	cmp	r6, #0
 8007340:	9301      	str	r3, [sp, #4]
 8007342:	d028      	beq.n	8007396 <__d2b+0x86>
 8007344:	4668      	mov	r0, sp
 8007346:	9600      	str	r6, [sp, #0]
 8007348:	f7ff fd06 	bl	8006d58 <__lo0bits>
 800734c:	9900      	ldr	r1, [sp, #0]
 800734e:	b300      	cbz	r0, 8007392 <__d2b+0x82>
 8007350:	9a01      	ldr	r2, [sp, #4]
 8007352:	f1c0 0320 	rsb	r3, r0, #32
 8007356:	fa02 f303 	lsl.w	r3, r2, r3
 800735a:	430b      	orrs	r3, r1
 800735c:	40c2      	lsrs	r2, r0
 800735e:	6163      	str	r3, [r4, #20]
 8007360:	9201      	str	r2, [sp, #4]
 8007362:	9b01      	ldr	r3, [sp, #4]
 8007364:	61a3      	str	r3, [r4, #24]
 8007366:	2b00      	cmp	r3, #0
 8007368:	bf14      	ite	ne
 800736a:	2202      	movne	r2, #2
 800736c:	2201      	moveq	r2, #1
 800736e:	6122      	str	r2, [r4, #16]
 8007370:	b1d5      	cbz	r5, 80073a8 <__d2b+0x98>
 8007372:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007376:	4405      	add	r5, r0
 8007378:	f8c9 5000 	str.w	r5, [r9]
 800737c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007380:	f8c8 0000 	str.w	r0, [r8]
 8007384:	4620      	mov	r0, r4
 8007386:	b003      	add	sp, #12
 8007388:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800738c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007390:	e7d5      	b.n	800733e <__d2b+0x2e>
 8007392:	6161      	str	r1, [r4, #20]
 8007394:	e7e5      	b.n	8007362 <__d2b+0x52>
 8007396:	a801      	add	r0, sp, #4
 8007398:	f7ff fcde 	bl	8006d58 <__lo0bits>
 800739c:	9b01      	ldr	r3, [sp, #4]
 800739e:	6163      	str	r3, [r4, #20]
 80073a0:	2201      	movs	r2, #1
 80073a2:	6122      	str	r2, [r4, #16]
 80073a4:	3020      	adds	r0, #32
 80073a6:	e7e3      	b.n	8007370 <__d2b+0x60>
 80073a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80073ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80073b0:	f8c9 0000 	str.w	r0, [r9]
 80073b4:	6918      	ldr	r0, [r3, #16]
 80073b6:	f7ff fcaf 	bl	8006d18 <__hi0bits>
 80073ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80073be:	e7df      	b.n	8007380 <__d2b+0x70>
 80073c0:	080085c0 	.word	0x080085c0
 80073c4:	08008663 	.word	0x08008663

080073c8 <__ratio>:
 80073c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073cc:	4688      	mov	r8, r1
 80073ce:	4669      	mov	r1, sp
 80073d0:	4681      	mov	r9, r0
 80073d2:	f7ff ff4d 	bl	8007270 <__b2d>
 80073d6:	a901      	add	r1, sp, #4
 80073d8:	4640      	mov	r0, r8
 80073da:	ec55 4b10 	vmov	r4, r5, d0
 80073de:	f7ff ff47 	bl	8007270 <__b2d>
 80073e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80073e6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80073ea:	eba3 0c02 	sub.w	ip, r3, r2
 80073ee:	e9dd 3200 	ldrd	r3, r2, [sp]
 80073f2:	1a9b      	subs	r3, r3, r2
 80073f4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80073f8:	ec51 0b10 	vmov	r0, r1, d0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	bfd6      	itet	le
 8007400:	460a      	movle	r2, r1
 8007402:	462a      	movgt	r2, r5
 8007404:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007408:	468b      	mov	fp, r1
 800740a:	462f      	mov	r7, r5
 800740c:	bfd4      	ite	le
 800740e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007412:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007416:	4620      	mov	r0, r4
 8007418:	ee10 2a10 	vmov	r2, s0
 800741c:	465b      	mov	r3, fp
 800741e:	4639      	mov	r1, r7
 8007420:	f7f9 fa34 	bl	800088c <__aeabi_ddiv>
 8007424:	ec41 0b10 	vmov	d0, r0, r1
 8007428:	b003      	add	sp, #12
 800742a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800742e <__copybits>:
 800742e:	3901      	subs	r1, #1
 8007430:	b570      	push	{r4, r5, r6, lr}
 8007432:	1149      	asrs	r1, r1, #5
 8007434:	6914      	ldr	r4, [r2, #16]
 8007436:	3101      	adds	r1, #1
 8007438:	f102 0314 	add.w	r3, r2, #20
 800743c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007440:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007444:	1f05      	subs	r5, r0, #4
 8007446:	42a3      	cmp	r3, r4
 8007448:	d30c      	bcc.n	8007464 <__copybits+0x36>
 800744a:	1aa3      	subs	r3, r4, r2
 800744c:	3b11      	subs	r3, #17
 800744e:	f023 0303 	bic.w	r3, r3, #3
 8007452:	3211      	adds	r2, #17
 8007454:	42a2      	cmp	r2, r4
 8007456:	bf88      	it	hi
 8007458:	2300      	movhi	r3, #0
 800745a:	4418      	add	r0, r3
 800745c:	2300      	movs	r3, #0
 800745e:	4288      	cmp	r0, r1
 8007460:	d305      	bcc.n	800746e <__copybits+0x40>
 8007462:	bd70      	pop	{r4, r5, r6, pc}
 8007464:	f853 6b04 	ldr.w	r6, [r3], #4
 8007468:	f845 6f04 	str.w	r6, [r5, #4]!
 800746c:	e7eb      	b.n	8007446 <__copybits+0x18>
 800746e:	f840 3b04 	str.w	r3, [r0], #4
 8007472:	e7f4      	b.n	800745e <__copybits+0x30>

08007474 <__any_on>:
 8007474:	f100 0214 	add.w	r2, r0, #20
 8007478:	6900      	ldr	r0, [r0, #16]
 800747a:	114b      	asrs	r3, r1, #5
 800747c:	4298      	cmp	r0, r3
 800747e:	b510      	push	{r4, lr}
 8007480:	db11      	blt.n	80074a6 <__any_on+0x32>
 8007482:	dd0a      	ble.n	800749a <__any_on+0x26>
 8007484:	f011 011f 	ands.w	r1, r1, #31
 8007488:	d007      	beq.n	800749a <__any_on+0x26>
 800748a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800748e:	fa24 f001 	lsr.w	r0, r4, r1
 8007492:	fa00 f101 	lsl.w	r1, r0, r1
 8007496:	428c      	cmp	r4, r1
 8007498:	d10b      	bne.n	80074b2 <__any_on+0x3e>
 800749a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800749e:	4293      	cmp	r3, r2
 80074a0:	d803      	bhi.n	80074aa <__any_on+0x36>
 80074a2:	2000      	movs	r0, #0
 80074a4:	bd10      	pop	{r4, pc}
 80074a6:	4603      	mov	r3, r0
 80074a8:	e7f7      	b.n	800749a <__any_on+0x26>
 80074aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80074ae:	2900      	cmp	r1, #0
 80074b0:	d0f5      	beq.n	800749e <__any_on+0x2a>
 80074b2:	2001      	movs	r0, #1
 80074b4:	e7f6      	b.n	80074a4 <__any_on+0x30>

080074b6 <_calloc_r>:
 80074b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074b8:	fba1 2402 	umull	r2, r4, r1, r2
 80074bc:	b94c      	cbnz	r4, 80074d2 <_calloc_r+0x1c>
 80074be:	4611      	mov	r1, r2
 80074c0:	9201      	str	r2, [sp, #4]
 80074c2:	f000 f82f 	bl	8007524 <_malloc_r>
 80074c6:	9a01      	ldr	r2, [sp, #4]
 80074c8:	4605      	mov	r5, r0
 80074ca:	b930      	cbnz	r0, 80074da <_calloc_r+0x24>
 80074cc:	4628      	mov	r0, r5
 80074ce:	b003      	add	sp, #12
 80074d0:	bd30      	pop	{r4, r5, pc}
 80074d2:	220c      	movs	r2, #12
 80074d4:	6002      	str	r2, [r0, #0]
 80074d6:	2500      	movs	r5, #0
 80074d8:	e7f8      	b.n	80074cc <_calloc_r+0x16>
 80074da:	4621      	mov	r1, r4
 80074dc:	f7fe f95c 	bl	8005798 <memset>
 80074e0:	e7f4      	b.n	80074cc <_calloc_r+0x16>
	...

080074e4 <sbrk_aligned>:
 80074e4:	b570      	push	{r4, r5, r6, lr}
 80074e6:	4e0e      	ldr	r6, [pc, #56]	; (8007520 <sbrk_aligned+0x3c>)
 80074e8:	460c      	mov	r4, r1
 80074ea:	6831      	ldr	r1, [r6, #0]
 80074ec:	4605      	mov	r5, r0
 80074ee:	b911      	cbnz	r1, 80074f6 <sbrk_aligned+0x12>
 80074f0:	f000 f896 	bl	8007620 <_sbrk_r>
 80074f4:	6030      	str	r0, [r6, #0]
 80074f6:	4621      	mov	r1, r4
 80074f8:	4628      	mov	r0, r5
 80074fa:	f000 f891 	bl	8007620 <_sbrk_r>
 80074fe:	1c43      	adds	r3, r0, #1
 8007500:	d00a      	beq.n	8007518 <sbrk_aligned+0x34>
 8007502:	1cc4      	adds	r4, r0, #3
 8007504:	f024 0403 	bic.w	r4, r4, #3
 8007508:	42a0      	cmp	r0, r4
 800750a:	d007      	beq.n	800751c <sbrk_aligned+0x38>
 800750c:	1a21      	subs	r1, r4, r0
 800750e:	4628      	mov	r0, r5
 8007510:	f000 f886 	bl	8007620 <_sbrk_r>
 8007514:	3001      	adds	r0, #1
 8007516:	d101      	bne.n	800751c <sbrk_aligned+0x38>
 8007518:	f04f 34ff 	mov.w	r4, #4294967295
 800751c:	4620      	mov	r0, r4
 800751e:	bd70      	pop	{r4, r5, r6, pc}
 8007520:	20000340 	.word	0x20000340

08007524 <_malloc_r>:
 8007524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007528:	1ccd      	adds	r5, r1, #3
 800752a:	f025 0503 	bic.w	r5, r5, #3
 800752e:	3508      	adds	r5, #8
 8007530:	2d0c      	cmp	r5, #12
 8007532:	bf38      	it	cc
 8007534:	250c      	movcc	r5, #12
 8007536:	2d00      	cmp	r5, #0
 8007538:	4607      	mov	r7, r0
 800753a:	db01      	blt.n	8007540 <_malloc_r+0x1c>
 800753c:	42a9      	cmp	r1, r5
 800753e:	d905      	bls.n	800754c <_malloc_r+0x28>
 8007540:	230c      	movs	r3, #12
 8007542:	603b      	str	r3, [r7, #0]
 8007544:	2600      	movs	r6, #0
 8007546:	4630      	mov	r0, r6
 8007548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800754c:	4e2e      	ldr	r6, [pc, #184]	; (8007608 <_malloc_r+0xe4>)
 800754e:	f000 f8d1 	bl	80076f4 <__malloc_lock>
 8007552:	6833      	ldr	r3, [r6, #0]
 8007554:	461c      	mov	r4, r3
 8007556:	bb34      	cbnz	r4, 80075a6 <_malloc_r+0x82>
 8007558:	4629      	mov	r1, r5
 800755a:	4638      	mov	r0, r7
 800755c:	f7ff ffc2 	bl	80074e4 <sbrk_aligned>
 8007560:	1c43      	adds	r3, r0, #1
 8007562:	4604      	mov	r4, r0
 8007564:	d14d      	bne.n	8007602 <_malloc_r+0xde>
 8007566:	6834      	ldr	r4, [r6, #0]
 8007568:	4626      	mov	r6, r4
 800756a:	2e00      	cmp	r6, #0
 800756c:	d140      	bne.n	80075f0 <_malloc_r+0xcc>
 800756e:	6823      	ldr	r3, [r4, #0]
 8007570:	4631      	mov	r1, r6
 8007572:	4638      	mov	r0, r7
 8007574:	eb04 0803 	add.w	r8, r4, r3
 8007578:	f000 f852 	bl	8007620 <_sbrk_r>
 800757c:	4580      	cmp	r8, r0
 800757e:	d13a      	bne.n	80075f6 <_malloc_r+0xd2>
 8007580:	6821      	ldr	r1, [r4, #0]
 8007582:	3503      	adds	r5, #3
 8007584:	1a6d      	subs	r5, r5, r1
 8007586:	f025 0503 	bic.w	r5, r5, #3
 800758a:	3508      	adds	r5, #8
 800758c:	2d0c      	cmp	r5, #12
 800758e:	bf38      	it	cc
 8007590:	250c      	movcc	r5, #12
 8007592:	4629      	mov	r1, r5
 8007594:	4638      	mov	r0, r7
 8007596:	f7ff ffa5 	bl	80074e4 <sbrk_aligned>
 800759a:	3001      	adds	r0, #1
 800759c:	d02b      	beq.n	80075f6 <_malloc_r+0xd2>
 800759e:	6823      	ldr	r3, [r4, #0]
 80075a0:	442b      	add	r3, r5
 80075a2:	6023      	str	r3, [r4, #0]
 80075a4:	e00e      	b.n	80075c4 <_malloc_r+0xa0>
 80075a6:	6822      	ldr	r2, [r4, #0]
 80075a8:	1b52      	subs	r2, r2, r5
 80075aa:	d41e      	bmi.n	80075ea <_malloc_r+0xc6>
 80075ac:	2a0b      	cmp	r2, #11
 80075ae:	d916      	bls.n	80075de <_malloc_r+0xba>
 80075b0:	1961      	adds	r1, r4, r5
 80075b2:	42a3      	cmp	r3, r4
 80075b4:	6025      	str	r5, [r4, #0]
 80075b6:	bf18      	it	ne
 80075b8:	6059      	strne	r1, [r3, #4]
 80075ba:	6863      	ldr	r3, [r4, #4]
 80075bc:	bf08      	it	eq
 80075be:	6031      	streq	r1, [r6, #0]
 80075c0:	5162      	str	r2, [r4, r5]
 80075c2:	604b      	str	r3, [r1, #4]
 80075c4:	4638      	mov	r0, r7
 80075c6:	f104 060b 	add.w	r6, r4, #11
 80075ca:	f000 f899 	bl	8007700 <__malloc_unlock>
 80075ce:	f026 0607 	bic.w	r6, r6, #7
 80075d2:	1d23      	adds	r3, r4, #4
 80075d4:	1af2      	subs	r2, r6, r3
 80075d6:	d0b6      	beq.n	8007546 <_malloc_r+0x22>
 80075d8:	1b9b      	subs	r3, r3, r6
 80075da:	50a3      	str	r3, [r4, r2]
 80075dc:	e7b3      	b.n	8007546 <_malloc_r+0x22>
 80075de:	6862      	ldr	r2, [r4, #4]
 80075e0:	42a3      	cmp	r3, r4
 80075e2:	bf0c      	ite	eq
 80075e4:	6032      	streq	r2, [r6, #0]
 80075e6:	605a      	strne	r2, [r3, #4]
 80075e8:	e7ec      	b.n	80075c4 <_malloc_r+0xa0>
 80075ea:	4623      	mov	r3, r4
 80075ec:	6864      	ldr	r4, [r4, #4]
 80075ee:	e7b2      	b.n	8007556 <_malloc_r+0x32>
 80075f0:	4634      	mov	r4, r6
 80075f2:	6876      	ldr	r6, [r6, #4]
 80075f4:	e7b9      	b.n	800756a <_malloc_r+0x46>
 80075f6:	230c      	movs	r3, #12
 80075f8:	603b      	str	r3, [r7, #0]
 80075fa:	4638      	mov	r0, r7
 80075fc:	f000 f880 	bl	8007700 <__malloc_unlock>
 8007600:	e7a1      	b.n	8007546 <_malloc_r+0x22>
 8007602:	6025      	str	r5, [r4, #0]
 8007604:	e7de      	b.n	80075c4 <_malloc_r+0xa0>
 8007606:	bf00      	nop
 8007608:	2000033c 	.word	0x2000033c
 800760c:	00000000 	.word	0x00000000

08007610 <nan>:
 8007610:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007618 <nan+0x8>
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	00000000 	.word	0x00000000
 800761c:	7ff80000 	.word	0x7ff80000

08007620 <_sbrk_r>:
 8007620:	b538      	push	{r3, r4, r5, lr}
 8007622:	4d06      	ldr	r5, [pc, #24]	; (800763c <_sbrk_r+0x1c>)
 8007624:	2300      	movs	r3, #0
 8007626:	4604      	mov	r4, r0
 8007628:	4608      	mov	r0, r1
 800762a:	602b      	str	r3, [r5, #0]
 800762c:	f7fa fa22 	bl	8001a74 <_sbrk>
 8007630:	1c43      	adds	r3, r0, #1
 8007632:	d102      	bne.n	800763a <_sbrk_r+0x1a>
 8007634:	682b      	ldr	r3, [r5, #0]
 8007636:	b103      	cbz	r3, 800763a <_sbrk_r+0x1a>
 8007638:	6023      	str	r3, [r4, #0]
 800763a:	bd38      	pop	{r3, r4, r5, pc}
 800763c:	20000344 	.word	0x20000344

08007640 <strncmp>:
 8007640:	b510      	push	{r4, lr}
 8007642:	b17a      	cbz	r2, 8007664 <strncmp+0x24>
 8007644:	4603      	mov	r3, r0
 8007646:	3901      	subs	r1, #1
 8007648:	1884      	adds	r4, r0, r2
 800764a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800764e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007652:	4290      	cmp	r0, r2
 8007654:	d101      	bne.n	800765a <strncmp+0x1a>
 8007656:	42a3      	cmp	r3, r4
 8007658:	d101      	bne.n	800765e <strncmp+0x1e>
 800765a:	1a80      	subs	r0, r0, r2
 800765c:	bd10      	pop	{r4, pc}
 800765e:	2800      	cmp	r0, #0
 8007660:	d1f3      	bne.n	800764a <strncmp+0xa>
 8007662:	e7fa      	b.n	800765a <strncmp+0x1a>
 8007664:	4610      	mov	r0, r2
 8007666:	e7f9      	b.n	800765c <strncmp+0x1c>

08007668 <__ascii_wctomb>:
 8007668:	b149      	cbz	r1, 800767e <__ascii_wctomb+0x16>
 800766a:	2aff      	cmp	r2, #255	; 0xff
 800766c:	bf85      	ittet	hi
 800766e:	238a      	movhi	r3, #138	; 0x8a
 8007670:	6003      	strhi	r3, [r0, #0]
 8007672:	700a      	strbls	r2, [r1, #0]
 8007674:	f04f 30ff 	movhi.w	r0, #4294967295
 8007678:	bf98      	it	ls
 800767a:	2001      	movls	r0, #1
 800767c:	4770      	bx	lr
 800767e:	4608      	mov	r0, r1
 8007680:	4770      	bx	lr
	...

08007684 <__assert_func>:
 8007684:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007686:	4614      	mov	r4, r2
 8007688:	461a      	mov	r2, r3
 800768a:	4b09      	ldr	r3, [pc, #36]	; (80076b0 <__assert_func+0x2c>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4605      	mov	r5, r0
 8007690:	68d8      	ldr	r0, [r3, #12]
 8007692:	b14c      	cbz	r4, 80076a8 <__assert_func+0x24>
 8007694:	4b07      	ldr	r3, [pc, #28]	; (80076b4 <__assert_func+0x30>)
 8007696:	9100      	str	r1, [sp, #0]
 8007698:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800769c:	4906      	ldr	r1, [pc, #24]	; (80076b8 <__assert_func+0x34>)
 800769e:	462b      	mov	r3, r5
 80076a0:	f000 f80e 	bl	80076c0 <fiprintf>
 80076a4:	f000 fc2c 	bl	8007f00 <abort>
 80076a8:	4b04      	ldr	r3, [pc, #16]	; (80076bc <__assert_func+0x38>)
 80076aa:	461c      	mov	r4, r3
 80076ac:	e7f3      	b.n	8007696 <__assert_func+0x12>
 80076ae:	bf00      	nop
 80076b0:	2000000c 	.word	0x2000000c
 80076b4:	080087bc 	.word	0x080087bc
 80076b8:	080087c9 	.word	0x080087c9
 80076bc:	080087f7 	.word	0x080087f7

080076c0 <fiprintf>:
 80076c0:	b40e      	push	{r1, r2, r3}
 80076c2:	b503      	push	{r0, r1, lr}
 80076c4:	4601      	mov	r1, r0
 80076c6:	ab03      	add	r3, sp, #12
 80076c8:	4805      	ldr	r0, [pc, #20]	; (80076e0 <fiprintf+0x20>)
 80076ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80076ce:	6800      	ldr	r0, [r0, #0]
 80076d0:	9301      	str	r3, [sp, #4]
 80076d2:	f000 f891 	bl	80077f8 <_vfiprintf_r>
 80076d6:	b002      	add	sp, #8
 80076d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80076dc:	b003      	add	sp, #12
 80076de:	4770      	bx	lr
 80076e0:	2000000c 	.word	0x2000000c

080076e4 <malloc>:
 80076e4:	4b02      	ldr	r3, [pc, #8]	; (80076f0 <malloc+0xc>)
 80076e6:	4601      	mov	r1, r0
 80076e8:	6818      	ldr	r0, [r3, #0]
 80076ea:	f7ff bf1b 	b.w	8007524 <_malloc_r>
 80076ee:	bf00      	nop
 80076f0:	2000000c 	.word	0x2000000c

080076f4 <__malloc_lock>:
 80076f4:	4801      	ldr	r0, [pc, #4]	; (80076fc <__malloc_lock+0x8>)
 80076f6:	f000 bdc3 	b.w	8008280 <__retarget_lock_acquire_recursive>
 80076fa:	bf00      	nop
 80076fc:	20000348 	.word	0x20000348

08007700 <__malloc_unlock>:
 8007700:	4801      	ldr	r0, [pc, #4]	; (8007708 <__malloc_unlock+0x8>)
 8007702:	f000 bdbe 	b.w	8008282 <__retarget_lock_release_recursive>
 8007706:	bf00      	nop
 8007708:	20000348 	.word	0x20000348

0800770c <_free_r>:
 800770c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800770e:	2900      	cmp	r1, #0
 8007710:	d044      	beq.n	800779c <_free_r+0x90>
 8007712:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007716:	9001      	str	r0, [sp, #4]
 8007718:	2b00      	cmp	r3, #0
 800771a:	f1a1 0404 	sub.w	r4, r1, #4
 800771e:	bfb8      	it	lt
 8007720:	18e4      	addlt	r4, r4, r3
 8007722:	f7ff ffe7 	bl	80076f4 <__malloc_lock>
 8007726:	4a1e      	ldr	r2, [pc, #120]	; (80077a0 <_free_r+0x94>)
 8007728:	9801      	ldr	r0, [sp, #4]
 800772a:	6813      	ldr	r3, [r2, #0]
 800772c:	b933      	cbnz	r3, 800773c <_free_r+0x30>
 800772e:	6063      	str	r3, [r4, #4]
 8007730:	6014      	str	r4, [r2, #0]
 8007732:	b003      	add	sp, #12
 8007734:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007738:	f7ff bfe2 	b.w	8007700 <__malloc_unlock>
 800773c:	42a3      	cmp	r3, r4
 800773e:	d908      	bls.n	8007752 <_free_r+0x46>
 8007740:	6825      	ldr	r5, [r4, #0]
 8007742:	1961      	adds	r1, r4, r5
 8007744:	428b      	cmp	r3, r1
 8007746:	bf01      	itttt	eq
 8007748:	6819      	ldreq	r1, [r3, #0]
 800774a:	685b      	ldreq	r3, [r3, #4]
 800774c:	1949      	addeq	r1, r1, r5
 800774e:	6021      	streq	r1, [r4, #0]
 8007750:	e7ed      	b.n	800772e <_free_r+0x22>
 8007752:	461a      	mov	r2, r3
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	b10b      	cbz	r3, 800775c <_free_r+0x50>
 8007758:	42a3      	cmp	r3, r4
 800775a:	d9fa      	bls.n	8007752 <_free_r+0x46>
 800775c:	6811      	ldr	r1, [r2, #0]
 800775e:	1855      	adds	r5, r2, r1
 8007760:	42a5      	cmp	r5, r4
 8007762:	d10b      	bne.n	800777c <_free_r+0x70>
 8007764:	6824      	ldr	r4, [r4, #0]
 8007766:	4421      	add	r1, r4
 8007768:	1854      	adds	r4, r2, r1
 800776a:	42a3      	cmp	r3, r4
 800776c:	6011      	str	r1, [r2, #0]
 800776e:	d1e0      	bne.n	8007732 <_free_r+0x26>
 8007770:	681c      	ldr	r4, [r3, #0]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	6053      	str	r3, [r2, #4]
 8007776:	4421      	add	r1, r4
 8007778:	6011      	str	r1, [r2, #0]
 800777a:	e7da      	b.n	8007732 <_free_r+0x26>
 800777c:	d902      	bls.n	8007784 <_free_r+0x78>
 800777e:	230c      	movs	r3, #12
 8007780:	6003      	str	r3, [r0, #0]
 8007782:	e7d6      	b.n	8007732 <_free_r+0x26>
 8007784:	6825      	ldr	r5, [r4, #0]
 8007786:	1961      	adds	r1, r4, r5
 8007788:	428b      	cmp	r3, r1
 800778a:	bf04      	itt	eq
 800778c:	6819      	ldreq	r1, [r3, #0]
 800778e:	685b      	ldreq	r3, [r3, #4]
 8007790:	6063      	str	r3, [r4, #4]
 8007792:	bf04      	itt	eq
 8007794:	1949      	addeq	r1, r1, r5
 8007796:	6021      	streq	r1, [r4, #0]
 8007798:	6054      	str	r4, [r2, #4]
 800779a:	e7ca      	b.n	8007732 <_free_r+0x26>
 800779c:	b003      	add	sp, #12
 800779e:	bd30      	pop	{r4, r5, pc}
 80077a0:	2000033c 	.word	0x2000033c

080077a4 <__sfputc_r>:
 80077a4:	6893      	ldr	r3, [r2, #8]
 80077a6:	3b01      	subs	r3, #1
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	b410      	push	{r4}
 80077ac:	6093      	str	r3, [r2, #8]
 80077ae:	da08      	bge.n	80077c2 <__sfputc_r+0x1e>
 80077b0:	6994      	ldr	r4, [r2, #24]
 80077b2:	42a3      	cmp	r3, r4
 80077b4:	db01      	blt.n	80077ba <__sfputc_r+0x16>
 80077b6:	290a      	cmp	r1, #10
 80077b8:	d103      	bne.n	80077c2 <__sfputc_r+0x1e>
 80077ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077be:	f000 badf 	b.w	8007d80 <__swbuf_r>
 80077c2:	6813      	ldr	r3, [r2, #0]
 80077c4:	1c58      	adds	r0, r3, #1
 80077c6:	6010      	str	r0, [r2, #0]
 80077c8:	7019      	strb	r1, [r3, #0]
 80077ca:	4608      	mov	r0, r1
 80077cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077d0:	4770      	bx	lr

080077d2 <__sfputs_r>:
 80077d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077d4:	4606      	mov	r6, r0
 80077d6:	460f      	mov	r7, r1
 80077d8:	4614      	mov	r4, r2
 80077da:	18d5      	adds	r5, r2, r3
 80077dc:	42ac      	cmp	r4, r5
 80077de:	d101      	bne.n	80077e4 <__sfputs_r+0x12>
 80077e0:	2000      	movs	r0, #0
 80077e2:	e007      	b.n	80077f4 <__sfputs_r+0x22>
 80077e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077e8:	463a      	mov	r2, r7
 80077ea:	4630      	mov	r0, r6
 80077ec:	f7ff ffda 	bl	80077a4 <__sfputc_r>
 80077f0:	1c43      	adds	r3, r0, #1
 80077f2:	d1f3      	bne.n	80077dc <__sfputs_r+0xa>
 80077f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080077f8 <_vfiprintf_r>:
 80077f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077fc:	460d      	mov	r5, r1
 80077fe:	b09d      	sub	sp, #116	; 0x74
 8007800:	4614      	mov	r4, r2
 8007802:	4698      	mov	r8, r3
 8007804:	4606      	mov	r6, r0
 8007806:	b118      	cbz	r0, 8007810 <_vfiprintf_r+0x18>
 8007808:	6983      	ldr	r3, [r0, #24]
 800780a:	b90b      	cbnz	r3, 8007810 <_vfiprintf_r+0x18>
 800780c:	f000 fc9a 	bl	8008144 <__sinit>
 8007810:	4b89      	ldr	r3, [pc, #548]	; (8007a38 <_vfiprintf_r+0x240>)
 8007812:	429d      	cmp	r5, r3
 8007814:	d11b      	bne.n	800784e <_vfiprintf_r+0x56>
 8007816:	6875      	ldr	r5, [r6, #4]
 8007818:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800781a:	07d9      	lsls	r1, r3, #31
 800781c:	d405      	bmi.n	800782a <_vfiprintf_r+0x32>
 800781e:	89ab      	ldrh	r3, [r5, #12]
 8007820:	059a      	lsls	r2, r3, #22
 8007822:	d402      	bmi.n	800782a <_vfiprintf_r+0x32>
 8007824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007826:	f000 fd2b 	bl	8008280 <__retarget_lock_acquire_recursive>
 800782a:	89ab      	ldrh	r3, [r5, #12]
 800782c:	071b      	lsls	r3, r3, #28
 800782e:	d501      	bpl.n	8007834 <_vfiprintf_r+0x3c>
 8007830:	692b      	ldr	r3, [r5, #16]
 8007832:	b9eb      	cbnz	r3, 8007870 <_vfiprintf_r+0x78>
 8007834:	4629      	mov	r1, r5
 8007836:	4630      	mov	r0, r6
 8007838:	f000 faf4 	bl	8007e24 <__swsetup_r>
 800783c:	b1c0      	cbz	r0, 8007870 <_vfiprintf_r+0x78>
 800783e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007840:	07dc      	lsls	r4, r3, #31
 8007842:	d50e      	bpl.n	8007862 <_vfiprintf_r+0x6a>
 8007844:	f04f 30ff 	mov.w	r0, #4294967295
 8007848:	b01d      	add	sp, #116	; 0x74
 800784a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800784e:	4b7b      	ldr	r3, [pc, #492]	; (8007a3c <_vfiprintf_r+0x244>)
 8007850:	429d      	cmp	r5, r3
 8007852:	d101      	bne.n	8007858 <_vfiprintf_r+0x60>
 8007854:	68b5      	ldr	r5, [r6, #8]
 8007856:	e7df      	b.n	8007818 <_vfiprintf_r+0x20>
 8007858:	4b79      	ldr	r3, [pc, #484]	; (8007a40 <_vfiprintf_r+0x248>)
 800785a:	429d      	cmp	r5, r3
 800785c:	bf08      	it	eq
 800785e:	68f5      	ldreq	r5, [r6, #12]
 8007860:	e7da      	b.n	8007818 <_vfiprintf_r+0x20>
 8007862:	89ab      	ldrh	r3, [r5, #12]
 8007864:	0598      	lsls	r0, r3, #22
 8007866:	d4ed      	bmi.n	8007844 <_vfiprintf_r+0x4c>
 8007868:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800786a:	f000 fd0a 	bl	8008282 <__retarget_lock_release_recursive>
 800786e:	e7e9      	b.n	8007844 <_vfiprintf_r+0x4c>
 8007870:	2300      	movs	r3, #0
 8007872:	9309      	str	r3, [sp, #36]	; 0x24
 8007874:	2320      	movs	r3, #32
 8007876:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800787a:	f8cd 800c 	str.w	r8, [sp, #12]
 800787e:	2330      	movs	r3, #48	; 0x30
 8007880:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007a44 <_vfiprintf_r+0x24c>
 8007884:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007888:	f04f 0901 	mov.w	r9, #1
 800788c:	4623      	mov	r3, r4
 800788e:	469a      	mov	sl, r3
 8007890:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007894:	b10a      	cbz	r2, 800789a <_vfiprintf_r+0xa2>
 8007896:	2a25      	cmp	r2, #37	; 0x25
 8007898:	d1f9      	bne.n	800788e <_vfiprintf_r+0x96>
 800789a:	ebba 0b04 	subs.w	fp, sl, r4
 800789e:	d00b      	beq.n	80078b8 <_vfiprintf_r+0xc0>
 80078a0:	465b      	mov	r3, fp
 80078a2:	4622      	mov	r2, r4
 80078a4:	4629      	mov	r1, r5
 80078a6:	4630      	mov	r0, r6
 80078a8:	f7ff ff93 	bl	80077d2 <__sfputs_r>
 80078ac:	3001      	adds	r0, #1
 80078ae:	f000 80aa 	beq.w	8007a06 <_vfiprintf_r+0x20e>
 80078b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078b4:	445a      	add	r2, fp
 80078b6:	9209      	str	r2, [sp, #36]	; 0x24
 80078b8:	f89a 3000 	ldrb.w	r3, [sl]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	f000 80a2 	beq.w	8007a06 <_vfiprintf_r+0x20e>
 80078c2:	2300      	movs	r3, #0
 80078c4:	f04f 32ff 	mov.w	r2, #4294967295
 80078c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078cc:	f10a 0a01 	add.w	sl, sl, #1
 80078d0:	9304      	str	r3, [sp, #16]
 80078d2:	9307      	str	r3, [sp, #28]
 80078d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078d8:	931a      	str	r3, [sp, #104]	; 0x68
 80078da:	4654      	mov	r4, sl
 80078dc:	2205      	movs	r2, #5
 80078de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078e2:	4858      	ldr	r0, [pc, #352]	; (8007a44 <_vfiprintf_r+0x24c>)
 80078e4:	f7f8 fc9c 	bl	8000220 <memchr>
 80078e8:	9a04      	ldr	r2, [sp, #16]
 80078ea:	b9d8      	cbnz	r0, 8007924 <_vfiprintf_r+0x12c>
 80078ec:	06d1      	lsls	r1, r2, #27
 80078ee:	bf44      	itt	mi
 80078f0:	2320      	movmi	r3, #32
 80078f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078f6:	0713      	lsls	r3, r2, #28
 80078f8:	bf44      	itt	mi
 80078fa:	232b      	movmi	r3, #43	; 0x2b
 80078fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007900:	f89a 3000 	ldrb.w	r3, [sl]
 8007904:	2b2a      	cmp	r3, #42	; 0x2a
 8007906:	d015      	beq.n	8007934 <_vfiprintf_r+0x13c>
 8007908:	9a07      	ldr	r2, [sp, #28]
 800790a:	4654      	mov	r4, sl
 800790c:	2000      	movs	r0, #0
 800790e:	f04f 0c0a 	mov.w	ip, #10
 8007912:	4621      	mov	r1, r4
 8007914:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007918:	3b30      	subs	r3, #48	; 0x30
 800791a:	2b09      	cmp	r3, #9
 800791c:	d94e      	bls.n	80079bc <_vfiprintf_r+0x1c4>
 800791e:	b1b0      	cbz	r0, 800794e <_vfiprintf_r+0x156>
 8007920:	9207      	str	r2, [sp, #28]
 8007922:	e014      	b.n	800794e <_vfiprintf_r+0x156>
 8007924:	eba0 0308 	sub.w	r3, r0, r8
 8007928:	fa09 f303 	lsl.w	r3, r9, r3
 800792c:	4313      	orrs	r3, r2
 800792e:	9304      	str	r3, [sp, #16]
 8007930:	46a2      	mov	sl, r4
 8007932:	e7d2      	b.n	80078da <_vfiprintf_r+0xe2>
 8007934:	9b03      	ldr	r3, [sp, #12]
 8007936:	1d19      	adds	r1, r3, #4
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	9103      	str	r1, [sp, #12]
 800793c:	2b00      	cmp	r3, #0
 800793e:	bfbb      	ittet	lt
 8007940:	425b      	neglt	r3, r3
 8007942:	f042 0202 	orrlt.w	r2, r2, #2
 8007946:	9307      	strge	r3, [sp, #28]
 8007948:	9307      	strlt	r3, [sp, #28]
 800794a:	bfb8      	it	lt
 800794c:	9204      	strlt	r2, [sp, #16]
 800794e:	7823      	ldrb	r3, [r4, #0]
 8007950:	2b2e      	cmp	r3, #46	; 0x2e
 8007952:	d10c      	bne.n	800796e <_vfiprintf_r+0x176>
 8007954:	7863      	ldrb	r3, [r4, #1]
 8007956:	2b2a      	cmp	r3, #42	; 0x2a
 8007958:	d135      	bne.n	80079c6 <_vfiprintf_r+0x1ce>
 800795a:	9b03      	ldr	r3, [sp, #12]
 800795c:	1d1a      	adds	r2, r3, #4
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	9203      	str	r2, [sp, #12]
 8007962:	2b00      	cmp	r3, #0
 8007964:	bfb8      	it	lt
 8007966:	f04f 33ff 	movlt.w	r3, #4294967295
 800796a:	3402      	adds	r4, #2
 800796c:	9305      	str	r3, [sp, #20]
 800796e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007a54 <_vfiprintf_r+0x25c>
 8007972:	7821      	ldrb	r1, [r4, #0]
 8007974:	2203      	movs	r2, #3
 8007976:	4650      	mov	r0, sl
 8007978:	f7f8 fc52 	bl	8000220 <memchr>
 800797c:	b140      	cbz	r0, 8007990 <_vfiprintf_r+0x198>
 800797e:	2340      	movs	r3, #64	; 0x40
 8007980:	eba0 000a 	sub.w	r0, r0, sl
 8007984:	fa03 f000 	lsl.w	r0, r3, r0
 8007988:	9b04      	ldr	r3, [sp, #16]
 800798a:	4303      	orrs	r3, r0
 800798c:	3401      	adds	r4, #1
 800798e:	9304      	str	r3, [sp, #16]
 8007990:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007994:	482c      	ldr	r0, [pc, #176]	; (8007a48 <_vfiprintf_r+0x250>)
 8007996:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800799a:	2206      	movs	r2, #6
 800799c:	f7f8 fc40 	bl	8000220 <memchr>
 80079a0:	2800      	cmp	r0, #0
 80079a2:	d03f      	beq.n	8007a24 <_vfiprintf_r+0x22c>
 80079a4:	4b29      	ldr	r3, [pc, #164]	; (8007a4c <_vfiprintf_r+0x254>)
 80079a6:	bb1b      	cbnz	r3, 80079f0 <_vfiprintf_r+0x1f8>
 80079a8:	9b03      	ldr	r3, [sp, #12]
 80079aa:	3307      	adds	r3, #7
 80079ac:	f023 0307 	bic.w	r3, r3, #7
 80079b0:	3308      	adds	r3, #8
 80079b2:	9303      	str	r3, [sp, #12]
 80079b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079b6:	443b      	add	r3, r7
 80079b8:	9309      	str	r3, [sp, #36]	; 0x24
 80079ba:	e767      	b.n	800788c <_vfiprintf_r+0x94>
 80079bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80079c0:	460c      	mov	r4, r1
 80079c2:	2001      	movs	r0, #1
 80079c4:	e7a5      	b.n	8007912 <_vfiprintf_r+0x11a>
 80079c6:	2300      	movs	r3, #0
 80079c8:	3401      	adds	r4, #1
 80079ca:	9305      	str	r3, [sp, #20]
 80079cc:	4619      	mov	r1, r3
 80079ce:	f04f 0c0a 	mov.w	ip, #10
 80079d2:	4620      	mov	r0, r4
 80079d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079d8:	3a30      	subs	r2, #48	; 0x30
 80079da:	2a09      	cmp	r2, #9
 80079dc:	d903      	bls.n	80079e6 <_vfiprintf_r+0x1ee>
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d0c5      	beq.n	800796e <_vfiprintf_r+0x176>
 80079e2:	9105      	str	r1, [sp, #20]
 80079e4:	e7c3      	b.n	800796e <_vfiprintf_r+0x176>
 80079e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80079ea:	4604      	mov	r4, r0
 80079ec:	2301      	movs	r3, #1
 80079ee:	e7f0      	b.n	80079d2 <_vfiprintf_r+0x1da>
 80079f0:	ab03      	add	r3, sp, #12
 80079f2:	9300      	str	r3, [sp, #0]
 80079f4:	462a      	mov	r2, r5
 80079f6:	4b16      	ldr	r3, [pc, #88]	; (8007a50 <_vfiprintf_r+0x258>)
 80079f8:	a904      	add	r1, sp, #16
 80079fa:	4630      	mov	r0, r6
 80079fc:	f3af 8000 	nop.w
 8007a00:	4607      	mov	r7, r0
 8007a02:	1c78      	adds	r0, r7, #1
 8007a04:	d1d6      	bne.n	80079b4 <_vfiprintf_r+0x1bc>
 8007a06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a08:	07d9      	lsls	r1, r3, #31
 8007a0a:	d405      	bmi.n	8007a18 <_vfiprintf_r+0x220>
 8007a0c:	89ab      	ldrh	r3, [r5, #12]
 8007a0e:	059a      	lsls	r2, r3, #22
 8007a10:	d402      	bmi.n	8007a18 <_vfiprintf_r+0x220>
 8007a12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a14:	f000 fc35 	bl	8008282 <__retarget_lock_release_recursive>
 8007a18:	89ab      	ldrh	r3, [r5, #12]
 8007a1a:	065b      	lsls	r3, r3, #25
 8007a1c:	f53f af12 	bmi.w	8007844 <_vfiprintf_r+0x4c>
 8007a20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a22:	e711      	b.n	8007848 <_vfiprintf_r+0x50>
 8007a24:	ab03      	add	r3, sp, #12
 8007a26:	9300      	str	r3, [sp, #0]
 8007a28:	462a      	mov	r2, r5
 8007a2a:	4b09      	ldr	r3, [pc, #36]	; (8007a50 <_vfiprintf_r+0x258>)
 8007a2c:	a904      	add	r1, sp, #16
 8007a2e:	4630      	mov	r0, r6
 8007a30:	f000 f880 	bl	8007b34 <_printf_i>
 8007a34:	e7e4      	b.n	8007a00 <_vfiprintf_r+0x208>
 8007a36:	bf00      	nop
 8007a38:	0800894c 	.word	0x0800894c
 8007a3c:	0800896c 	.word	0x0800896c
 8007a40:	0800892c 	.word	0x0800892c
 8007a44:	080088f9 	.word	0x080088f9
 8007a48:	08008903 	.word	0x08008903
 8007a4c:	00000000 	.word	0x00000000
 8007a50:	080077d3 	.word	0x080077d3
 8007a54:	080088ff 	.word	0x080088ff

08007a58 <_printf_common>:
 8007a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a5c:	4616      	mov	r6, r2
 8007a5e:	4699      	mov	r9, r3
 8007a60:	688a      	ldr	r2, [r1, #8]
 8007a62:	690b      	ldr	r3, [r1, #16]
 8007a64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	bfb8      	it	lt
 8007a6c:	4613      	movlt	r3, r2
 8007a6e:	6033      	str	r3, [r6, #0]
 8007a70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a74:	4607      	mov	r7, r0
 8007a76:	460c      	mov	r4, r1
 8007a78:	b10a      	cbz	r2, 8007a7e <_printf_common+0x26>
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	6033      	str	r3, [r6, #0]
 8007a7e:	6823      	ldr	r3, [r4, #0]
 8007a80:	0699      	lsls	r1, r3, #26
 8007a82:	bf42      	ittt	mi
 8007a84:	6833      	ldrmi	r3, [r6, #0]
 8007a86:	3302      	addmi	r3, #2
 8007a88:	6033      	strmi	r3, [r6, #0]
 8007a8a:	6825      	ldr	r5, [r4, #0]
 8007a8c:	f015 0506 	ands.w	r5, r5, #6
 8007a90:	d106      	bne.n	8007aa0 <_printf_common+0x48>
 8007a92:	f104 0a19 	add.w	sl, r4, #25
 8007a96:	68e3      	ldr	r3, [r4, #12]
 8007a98:	6832      	ldr	r2, [r6, #0]
 8007a9a:	1a9b      	subs	r3, r3, r2
 8007a9c:	42ab      	cmp	r3, r5
 8007a9e:	dc26      	bgt.n	8007aee <_printf_common+0x96>
 8007aa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007aa4:	1e13      	subs	r3, r2, #0
 8007aa6:	6822      	ldr	r2, [r4, #0]
 8007aa8:	bf18      	it	ne
 8007aaa:	2301      	movne	r3, #1
 8007aac:	0692      	lsls	r2, r2, #26
 8007aae:	d42b      	bmi.n	8007b08 <_printf_common+0xb0>
 8007ab0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ab4:	4649      	mov	r1, r9
 8007ab6:	4638      	mov	r0, r7
 8007ab8:	47c0      	blx	r8
 8007aba:	3001      	adds	r0, #1
 8007abc:	d01e      	beq.n	8007afc <_printf_common+0xa4>
 8007abe:	6823      	ldr	r3, [r4, #0]
 8007ac0:	68e5      	ldr	r5, [r4, #12]
 8007ac2:	6832      	ldr	r2, [r6, #0]
 8007ac4:	f003 0306 	and.w	r3, r3, #6
 8007ac8:	2b04      	cmp	r3, #4
 8007aca:	bf08      	it	eq
 8007acc:	1aad      	subeq	r5, r5, r2
 8007ace:	68a3      	ldr	r3, [r4, #8]
 8007ad0:	6922      	ldr	r2, [r4, #16]
 8007ad2:	bf0c      	ite	eq
 8007ad4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ad8:	2500      	movne	r5, #0
 8007ada:	4293      	cmp	r3, r2
 8007adc:	bfc4      	itt	gt
 8007ade:	1a9b      	subgt	r3, r3, r2
 8007ae0:	18ed      	addgt	r5, r5, r3
 8007ae2:	2600      	movs	r6, #0
 8007ae4:	341a      	adds	r4, #26
 8007ae6:	42b5      	cmp	r5, r6
 8007ae8:	d11a      	bne.n	8007b20 <_printf_common+0xc8>
 8007aea:	2000      	movs	r0, #0
 8007aec:	e008      	b.n	8007b00 <_printf_common+0xa8>
 8007aee:	2301      	movs	r3, #1
 8007af0:	4652      	mov	r2, sl
 8007af2:	4649      	mov	r1, r9
 8007af4:	4638      	mov	r0, r7
 8007af6:	47c0      	blx	r8
 8007af8:	3001      	adds	r0, #1
 8007afa:	d103      	bne.n	8007b04 <_printf_common+0xac>
 8007afc:	f04f 30ff 	mov.w	r0, #4294967295
 8007b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b04:	3501      	adds	r5, #1
 8007b06:	e7c6      	b.n	8007a96 <_printf_common+0x3e>
 8007b08:	18e1      	adds	r1, r4, r3
 8007b0a:	1c5a      	adds	r2, r3, #1
 8007b0c:	2030      	movs	r0, #48	; 0x30
 8007b0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b12:	4422      	add	r2, r4
 8007b14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b1c:	3302      	adds	r3, #2
 8007b1e:	e7c7      	b.n	8007ab0 <_printf_common+0x58>
 8007b20:	2301      	movs	r3, #1
 8007b22:	4622      	mov	r2, r4
 8007b24:	4649      	mov	r1, r9
 8007b26:	4638      	mov	r0, r7
 8007b28:	47c0      	blx	r8
 8007b2a:	3001      	adds	r0, #1
 8007b2c:	d0e6      	beq.n	8007afc <_printf_common+0xa4>
 8007b2e:	3601      	adds	r6, #1
 8007b30:	e7d9      	b.n	8007ae6 <_printf_common+0x8e>
	...

08007b34 <_printf_i>:
 8007b34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b38:	7e0f      	ldrb	r7, [r1, #24]
 8007b3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007b3c:	2f78      	cmp	r7, #120	; 0x78
 8007b3e:	4691      	mov	r9, r2
 8007b40:	4680      	mov	r8, r0
 8007b42:	460c      	mov	r4, r1
 8007b44:	469a      	mov	sl, r3
 8007b46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007b4a:	d807      	bhi.n	8007b5c <_printf_i+0x28>
 8007b4c:	2f62      	cmp	r7, #98	; 0x62
 8007b4e:	d80a      	bhi.n	8007b66 <_printf_i+0x32>
 8007b50:	2f00      	cmp	r7, #0
 8007b52:	f000 80d8 	beq.w	8007d06 <_printf_i+0x1d2>
 8007b56:	2f58      	cmp	r7, #88	; 0x58
 8007b58:	f000 80a3 	beq.w	8007ca2 <_printf_i+0x16e>
 8007b5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b64:	e03a      	b.n	8007bdc <_printf_i+0xa8>
 8007b66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b6a:	2b15      	cmp	r3, #21
 8007b6c:	d8f6      	bhi.n	8007b5c <_printf_i+0x28>
 8007b6e:	a101      	add	r1, pc, #4	; (adr r1, 8007b74 <_printf_i+0x40>)
 8007b70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b74:	08007bcd 	.word	0x08007bcd
 8007b78:	08007be1 	.word	0x08007be1
 8007b7c:	08007b5d 	.word	0x08007b5d
 8007b80:	08007b5d 	.word	0x08007b5d
 8007b84:	08007b5d 	.word	0x08007b5d
 8007b88:	08007b5d 	.word	0x08007b5d
 8007b8c:	08007be1 	.word	0x08007be1
 8007b90:	08007b5d 	.word	0x08007b5d
 8007b94:	08007b5d 	.word	0x08007b5d
 8007b98:	08007b5d 	.word	0x08007b5d
 8007b9c:	08007b5d 	.word	0x08007b5d
 8007ba0:	08007ced 	.word	0x08007ced
 8007ba4:	08007c11 	.word	0x08007c11
 8007ba8:	08007ccf 	.word	0x08007ccf
 8007bac:	08007b5d 	.word	0x08007b5d
 8007bb0:	08007b5d 	.word	0x08007b5d
 8007bb4:	08007d0f 	.word	0x08007d0f
 8007bb8:	08007b5d 	.word	0x08007b5d
 8007bbc:	08007c11 	.word	0x08007c11
 8007bc0:	08007b5d 	.word	0x08007b5d
 8007bc4:	08007b5d 	.word	0x08007b5d
 8007bc8:	08007cd7 	.word	0x08007cd7
 8007bcc:	682b      	ldr	r3, [r5, #0]
 8007bce:	1d1a      	adds	r2, r3, #4
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	602a      	str	r2, [r5, #0]
 8007bd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e0a3      	b.n	8007d28 <_printf_i+0x1f4>
 8007be0:	6820      	ldr	r0, [r4, #0]
 8007be2:	6829      	ldr	r1, [r5, #0]
 8007be4:	0606      	lsls	r6, r0, #24
 8007be6:	f101 0304 	add.w	r3, r1, #4
 8007bea:	d50a      	bpl.n	8007c02 <_printf_i+0xce>
 8007bec:	680e      	ldr	r6, [r1, #0]
 8007bee:	602b      	str	r3, [r5, #0]
 8007bf0:	2e00      	cmp	r6, #0
 8007bf2:	da03      	bge.n	8007bfc <_printf_i+0xc8>
 8007bf4:	232d      	movs	r3, #45	; 0x2d
 8007bf6:	4276      	negs	r6, r6
 8007bf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bfc:	485e      	ldr	r0, [pc, #376]	; (8007d78 <_printf_i+0x244>)
 8007bfe:	230a      	movs	r3, #10
 8007c00:	e019      	b.n	8007c36 <_printf_i+0x102>
 8007c02:	680e      	ldr	r6, [r1, #0]
 8007c04:	602b      	str	r3, [r5, #0]
 8007c06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007c0a:	bf18      	it	ne
 8007c0c:	b236      	sxthne	r6, r6
 8007c0e:	e7ef      	b.n	8007bf0 <_printf_i+0xbc>
 8007c10:	682b      	ldr	r3, [r5, #0]
 8007c12:	6820      	ldr	r0, [r4, #0]
 8007c14:	1d19      	adds	r1, r3, #4
 8007c16:	6029      	str	r1, [r5, #0]
 8007c18:	0601      	lsls	r1, r0, #24
 8007c1a:	d501      	bpl.n	8007c20 <_printf_i+0xec>
 8007c1c:	681e      	ldr	r6, [r3, #0]
 8007c1e:	e002      	b.n	8007c26 <_printf_i+0xf2>
 8007c20:	0646      	lsls	r6, r0, #25
 8007c22:	d5fb      	bpl.n	8007c1c <_printf_i+0xe8>
 8007c24:	881e      	ldrh	r6, [r3, #0]
 8007c26:	4854      	ldr	r0, [pc, #336]	; (8007d78 <_printf_i+0x244>)
 8007c28:	2f6f      	cmp	r7, #111	; 0x6f
 8007c2a:	bf0c      	ite	eq
 8007c2c:	2308      	moveq	r3, #8
 8007c2e:	230a      	movne	r3, #10
 8007c30:	2100      	movs	r1, #0
 8007c32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c36:	6865      	ldr	r5, [r4, #4]
 8007c38:	60a5      	str	r5, [r4, #8]
 8007c3a:	2d00      	cmp	r5, #0
 8007c3c:	bfa2      	ittt	ge
 8007c3e:	6821      	ldrge	r1, [r4, #0]
 8007c40:	f021 0104 	bicge.w	r1, r1, #4
 8007c44:	6021      	strge	r1, [r4, #0]
 8007c46:	b90e      	cbnz	r6, 8007c4c <_printf_i+0x118>
 8007c48:	2d00      	cmp	r5, #0
 8007c4a:	d04d      	beq.n	8007ce8 <_printf_i+0x1b4>
 8007c4c:	4615      	mov	r5, r2
 8007c4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007c52:	fb03 6711 	mls	r7, r3, r1, r6
 8007c56:	5dc7      	ldrb	r7, [r0, r7]
 8007c58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007c5c:	4637      	mov	r7, r6
 8007c5e:	42bb      	cmp	r3, r7
 8007c60:	460e      	mov	r6, r1
 8007c62:	d9f4      	bls.n	8007c4e <_printf_i+0x11a>
 8007c64:	2b08      	cmp	r3, #8
 8007c66:	d10b      	bne.n	8007c80 <_printf_i+0x14c>
 8007c68:	6823      	ldr	r3, [r4, #0]
 8007c6a:	07de      	lsls	r6, r3, #31
 8007c6c:	d508      	bpl.n	8007c80 <_printf_i+0x14c>
 8007c6e:	6923      	ldr	r3, [r4, #16]
 8007c70:	6861      	ldr	r1, [r4, #4]
 8007c72:	4299      	cmp	r1, r3
 8007c74:	bfde      	ittt	le
 8007c76:	2330      	movle	r3, #48	; 0x30
 8007c78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007c80:	1b52      	subs	r2, r2, r5
 8007c82:	6122      	str	r2, [r4, #16]
 8007c84:	f8cd a000 	str.w	sl, [sp]
 8007c88:	464b      	mov	r3, r9
 8007c8a:	aa03      	add	r2, sp, #12
 8007c8c:	4621      	mov	r1, r4
 8007c8e:	4640      	mov	r0, r8
 8007c90:	f7ff fee2 	bl	8007a58 <_printf_common>
 8007c94:	3001      	adds	r0, #1
 8007c96:	d14c      	bne.n	8007d32 <_printf_i+0x1fe>
 8007c98:	f04f 30ff 	mov.w	r0, #4294967295
 8007c9c:	b004      	add	sp, #16
 8007c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ca2:	4835      	ldr	r0, [pc, #212]	; (8007d78 <_printf_i+0x244>)
 8007ca4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007ca8:	6829      	ldr	r1, [r5, #0]
 8007caa:	6823      	ldr	r3, [r4, #0]
 8007cac:	f851 6b04 	ldr.w	r6, [r1], #4
 8007cb0:	6029      	str	r1, [r5, #0]
 8007cb2:	061d      	lsls	r5, r3, #24
 8007cb4:	d514      	bpl.n	8007ce0 <_printf_i+0x1ac>
 8007cb6:	07df      	lsls	r7, r3, #31
 8007cb8:	bf44      	itt	mi
 8007cba:	f043 0320 	orrmi.w	r3, r3, #32
 8007cbe:	6023      	strmi	r3, [r4, #0]
 8007cc0:	b91e      	cbnz	r6, 8007cca <_printf_i+0x196>
 8007cc2:	6823      	ldr	r3, [r4, #0]
 8007cc4:	f023 0320 	bic.w	r3, r3, #32
 8007cc8:	6023      	str	r3, [r4, #0]
 8007cca:	2310      	movs	r3, #16
 8007ccc:	e7b0      	b.n	8007c30 <_printf_i+0xfc>
 8007cce:	6823      	ldr	r3, [r4, #0]
 8007cd0:	f043 0320 	orr.w	r3, r3, #32
 8007cd4:	6023      	str	r3, [r4, #0]
 8007cd6:	2378      	movs	r3, #120	; 0x78
 8007cd8:	4828      	ldr	r0, [pc, #160]	; (8007d7c <_printf_i+0x248>)
 8007cda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007cde:	e7e3      	b.n	8007ca8 <_printf_i+0x174>
 8007ce0:	0659      	lsls	r1, r3, #25
 8007ce2:	bf48      	it	mi
 8007ce4:	b2b6      	uxthmi	r6, r6
 8007ce6:	e7e6      	b.n	8007cb6 <_printf_i+0x182>
 8007ce8:	4615      	mov	r5, r2
 8007cea:	e7bb      	b.n	8007c64 <_printf_i+0x130>
 8007cec:	682b      	ldr	r3, [r5, #0]
 8007cee:	6826      	ldr	r6, [r4, #0]
 8007cf0:	6961      	ldr	r1, [r4, #20]
 8007cf2:	1d18      	adds	r0, r3, #4
 8007cf4:	6028      	str	r0, [r5, #0]
 8007cf6:	0635      	lsls	r5, r6, #24
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	d501      	bpl.n	8007d00 <_printf_i+0x1cc>
 8007cfc:	6019      	str	r1, [r3, #0]
 8007cfe:	e002      	b.n	8007d06 <_printf_i+0x1d2>
 8007d00:	0670      	lsls	r0, r6, #25
 8007d02:	d5fb      	bpl.n	8007cfc <_printf_i+0x1c8>
 8007d04:	8019      	strh	r1, [r3, #0]
 8007d06:	2300      	movs	r3, #0
 8007d08:	6123      	str	r3, [r4, #16]
 8007d0a:	4615      	mov	r5, r2
 8007d0c:	e7ba      	b.n	8007c84 <_printf_i+0x150>
 8007d0e:	682b      	ldr	r3, [r5, #0]
 8007d10:	1d1a      	adds	r2, r3, #4
 8007d12:	602a      	str	r2, [r5, #0]
 8007d14:	681d      	ldr	r5, [r3, #0]
 8007d16:	6862      	ldr	r2, [r4, #4]
 8007d18:	2100      	movs	r1, #0
 8007d1a:	4628      	mov	r0, r5
 8007d1c:	f7f8 fa80 	bl	8000220 <memchr>
 8007d20:	b108      	cbz	r0, 8007d26 <_printf_i+0x1f2>
 8007d22:	1b40      	subs	r0, r0, r5
 8007d24:	6060      	str	r0, [r4, #4]
 8007d26:	6863      	ldr	r3, [r4, #4]
 8007d28:	6123      	str	r3, [r4, #16]
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d30:	e7a8      	b.n	8007c84 <_printf_i+0x150>
 8007d32:	6923      	ldr	r3, [r4, #16]
 8007d34:	462a      	mov	r2, r5
 8007d36:	4649      	mov	r1, r9
 8007d38:	4640      	mov	r0, r8
 8007d3a:	47d0      	blx	sl
 8007d3c:	3001      	adds	r0, #1
 8007d3e:	d0ab      	beq.n	8007c98 <_printf_i+0x164>
 8007d40:	6823      	ldr	r3, [r4, #0]
 8007d42:	079b      	lsls	r3, r3, #30
 8007d44:	d413      	bmi.n	8007d6e <_printf_i+0x23a>
 8007d46:	68e0      	ldr	r0, [r4, #12]
 8007d48:	9b03      	ldr	r3, [sp, #12]
 8007d4a:	4298      	cmp	r0, r3
 8007d4c:	bfb8      	it	lt
 8007d4e:	4618      	movlt	r0, r3
 8007d50:	e7a4      	b.n	8007c9c <_printf_i+0x168>
 8007d52:	2301      	movs	r3, #1
 8007d54:	4632      	mov	r2, r6
 8007d56:	4649      	mov	r1, r9
 8007d58:	4640      	mov	r0, r8
 8007d5a:	47d0      	blx	sl
 8007d5c:	3001      	adds	r0, #1
 8007d5e:	d09b      	beq.n	8007c98 <_printf_i+0x164>
 8007d60:	3501      	adds	r5, #1
 8007d62:	68e3      	ldr	r3, [r4, #12]
 8007d64:	9903      	ldr	r1, [sp, #12]
 8007d66:	1a5b      	subs	r3, r3, r1
 8007d68:	42ab      	cmp	r3, r5
 8007d6a:	dcf2      	bgt.n	8007d52 <_printf_i+0x21e>
 8007d6c:	e7eb      	b.n	8007d46 <_printf_i+0x212>
 8007d6e:	2500      	movs	r5, #0
 8007d70:	f104 0619 	add.w	r6, r4, #25
 8007d74:	e7f5      	b.n	8007d62 <_printf_i+0x22e>
 8007d76:	bf00      	nop
 8007d78:	0800890a 	.word	0x0800890a
 8007d7c:	0800891b 	.word	0x0800891b

08007d80 <__swbuf_r>:
 8007d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d82:	460e      	mov	r6, r1
 8007d84:	4614      	mov	r4, r2
 8007d86:	4605      	mov	r5, r0
 8007d88:	b118      	cbz	r0, 8007d92 <__swbuf_r+0x12>
 8007d8a:	6983      	ldr	r3, [r0, #24]
 8007d8c:	b90b      	cbnz	r3, 8007d92 <__swbuf_r+0x12>
 8007d8e:	f000 f9d9 	bl	8008144 <__sinit>
 8007d92:	4b21      	ldr	r3, [pc, #132]	; (8007e18 <__swbuf_r+0x98>)
 8007d94:	429c      	cmp	r4, r3
 8007d96:	d12b      	bne.n	8007df0 <__swbuf_r+0x70>
 8007d98:	686c      	ldr	r4, [r5, #4]
 8007d9a:	69a3      	ldr	r3, [r4, #24]
 8007d9c:	60a3      	str	r3, [r4, #8]
 8007d9e:	89a3      	ldrh	r3, [r4, #12]
 8007da0:	071a      	lsls	r2, r3, #28
 8007da2:	d52f      	bpl.n	8007e04 <__swbuf_r+0x84>
 8007da4:	6923      	ldr	r3, [r4, #16]
 8007da6:	b36b      	cbz	r3, 8007e04 <__swbuf_r+0x84>
 8007da8:	6923      	ldr	r3, [r4, #16]
 8007daa:	6820      	ldr	r0, [r4, #0]
 8007dac:	1ac0      	subs	r0, r0, r3
 8007dae:	6963      	ldr	r3, [r4, #20]
 8007db0:	b2f6      	uxtb	r6, r6
 8007db2:	4283      	cmp	r3, r0
 8007db4:	4637      	mov	r7, r6
 8007db6:	dc04      	bgt.n	8007dc2 <__swbuf_r+0x42>
 8007db8:	4621      	mov	r1, r4
 8007dba:	4628      	mov	r0, r5
 8007dbc:	f000 f92e 	bl	800801c <_fflush_r>
 8007dc0:	bb30      	cbnz	r0, 8007e10 <__swbuf_r+0x90>
 8007dc2:	68a3      	ldr	r3, [r4, #8]
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	60a3      	str	r3, [r4, #8]
 8007dc8:	6823      	ldr	r3, [r4, #0]
 8007dca:	1c5a      	adds	r2, r3, #1
 8007dcc:	6022      	str	r2, [r4, #0]
 8007dce:	701e      	strb	r6, [r3, #0]
 8007dd0:	6963      	ldr	r3, [r4, #20]
 8007dd2:	3001      	adds	r0, #1
 8007dd4:	4283      	cmp	r3, r0
 8007dd6:	d004      	beq.n	8007de2 <__swbuf_r+0x62>
 8007dd8:	89a3      	ldrh	r3, [r4, #12]
 8007dda:	07db      	lsls	r3, r3, #31
 8007ddc:	d506      	bpl.n	8007dec <__swbuf_r+0x6c>
 8007dde:	2e0a      	cmp	r6, #10
 8007de0:	d104      	bne.n	8007dec <__swbuf_r+0x6c>
 8007de2:	4621      	mov	r1, r4
 8007de4:	4628      	mov	r0, r5
 8007de6:	f000 f919 	bl	800801c <_fflush_r>
 8007dea:	b988      	cbnz	r0, 8007e10 <__swbuf_r+0x90>
 8007dec:	4638      	mov	r0, r7
 8007dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007df0:	4b0a      	ldr	r3, [pc, #40]	; (8007e1c <__swbuf_r+0x9c>)
 8007df2:	429c      	cmp	r4, r3
 8007df4:	d101      	bne.n	8007dfa <__swbuf_r+0x7a>
 8007df6:	68ac      	ldr	r4, [r5, #8]
 8007df8:	e7cf      	b.n	8007d9a <__swbuf_r+0x1a>
 8007dfa:	4b09      	ldr	r3, [pc, #36]	; (8007e20 <__swbuf_r+0xa0>)
 8007dfc:	429c      	cmp	r4, r3
 8007dfe:	bf08      	it	eq
 8007e00:	68ec      	ldreq	r4, [r5, #12]
 8007e02:	e7ca      	b.n	8007d9a <__swbuf_r+0x1a>
 8007e04:	4621      	mov	r1, r4
 8007e06:	4628      	mov	r0, r5
 8007e08:	f000 f80c 	bl	8007e24 <__swsetup_r>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	d0cb      	beq.n	8007da8 <__swbuf_r+0x28>
 8007e10:	f04f 37ff 	mov.w	r7, #4294967295
 8007e14:	e7ea      	b.n	8007dec <__swbuf_r+0x6c>
 8007e16:	bf00      	nop
 8007e18:	0800894c 	.word	0x0800894c
 8007e1c:	0800896c 	.word	0x0800896c
 8007e20:	0800892c 	.word	0x0800892c

08007e24 <__swsetup_r>:
 8007e24:	4b32      	ldr	r3, [pc, #200]	; (8007ef0 <__swsetup_r+0xcc>)
 8007e26:	b570      	push	{r4, r5, r6, lr}
 8007e28:	681d      	ldr	r5, [r3, #0]
 8007e2a:	4606      	mov	r6, r0
 8007e2c:	460c      	mov	r4, r1
 8007e2e:	b125      	cbz	r5, 8007e3a <__swsetup_r+0x16>
 8007e30:	69ab      	ldr	r3, [r5, #24]
 8007e32:	b913      	cbnz	r3, 8007e3a <__swsetup_r+0x16>
 8007e34:	4628      	mov	r0, r5
 8007e36:	f000 f985 	bl	8008144 <__sinit>
 8007e3a:	4b2e      	ldr	r3, [pc, #184]	; (8007ef4 <__swsetup_r+0xd0>)
 8007e3c:	429c      	cmp	r4, r3
 8007e3e:	d10f      	bne.n	8007e60 <__swsetup_r+0x3c>
 8007e40:	686c      	ldr	r4, [r5, #4]
 8007e42:	89a3      	ldrh	r3, [r4, #12]
 8007e44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e48:	0719      	lsls	r1, r3, #28
 8007e4a:	d42c      	bmi.n	8007ea6 <__swsetup_r+0x82>
 8007e4c:	06dd      	lsls	r5, r3, #27
 8007e4e:	d411      	bmi.n	8007e74 <__swsetup_r+0x50>
 8007e50:	2309      	movs	r3, #9
 8007e52:	6033      	str	r3, [r6, #0]
 8007e54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007e58:	81a3      	strh	r3, [r4, #12]
 8007e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e5e:	e03e      	b.n	8007ede <__swsetup_r+0xba>
 8007e60:	4b25      	ldr	r3, [pc, #148]	; (8007ef8 <__swsetup_r+0xd4>)
 8007e62:	429c      	cmp	r4, r3
 8007e64:	d101      	bne.n	8007e6a <__swsetup_r+0x46>
 8007e66:	68ac      	ldr	r4, [r5, #8]
 8007e68:	e7eb      	b.n	8007e42 <__swsetup_r+0x1e>
 8007e6a:	4b24      	ldr	r3, [pc, #144]	; (8007efc <__swsetup_r+0xd8>)
 8007e6c:	429c      	cmp	r4, r3
 8007e6e:	bf08      	it	eq
 8007e70:	68ec      	ldreq	r4, [r5, #12]
 8007e72:	e7e6      	b.n	8007e42 <__swsetup_r+0x1e>
 8007e74:	0758      	lsls	r0, r3, #29
 8007e76:	d512      	bpl.n	8007e9e <__swsetup_r+0x7a>
 8007e78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e7a:	b141      	cbz	r1, 8007e8e <__swsetup_r+0x6a>
 8007e7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e80:	4299      	cmp	r1, r3
 8007e82:	d002      	beq.n	8007e8a <__swsetup_r+0x66>
 8007e84:	4630      	mov	r0, r6
 8007e86:	f7ff fc41 	bl	800770c <_free_r>
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	6363      	str	r3, [r4, #52]	; 0x34
 8007e8e:	89a3      	ldrh	r3, [r4, #12]
 8007e90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007e94:	81a3      	strh	r3, [r4, #12]
 8007e96:	2300      	movs	r3, #0
 8007e98:	6063      	str	r3, [r4, #4]
 8007e9a:	6923      	ldr	r3, [r4, #16]
 8007e9c:	6023      	str	r3, [r4, #0]
 8007e9e:	89a3      	ldrh	r3, [r4, #12]
 8007ea0:	f043 0308 	orr.w	r3, r3, #8
 8007ea4:	81a3      	strh	r3, [r4, #12]
 8007ea6:	6923      	ldr	r3, [r4, #16]
 8007ea8:	b94b      	cbnz	r3, 8007ebe <__swsetup_r+0x9a>
 8007eaa:	89a3      	ldrh	r3, [r4, #12]
 8007eac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007eb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007eb4:	d003      	beq.n	8007ebe <__swsetup_r+0x9a>
 8007eb6:	4621      	mov	r1, r4
 8007eb8:	4630      	mov	r0, r6
 8007eba:	f000 fa09 	bl	80082d0 <__smakebuf_r>
 8007ebe:	89a0      	ldrh	r0, [r4, #12]
 8007ec0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ec4:	f010 0301 	ands.w	r3, r0, #1
 8007ec8:	d00a      	beq.n	8007ee0 <__swsetup_r+0xbc>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	60a3      	str	r3, [r4, #8]
 8007ece:	6963      	ldr	r3, [r4, #20]
 8007ed0:	425b      	negs	r3, r3
 8007ed2:	61a3      	str	r3, [r4, #24]
 8007ed4:	6923      	ldr	r3, [r4, #16]
 8007ed6:	b943      	cbnz	r3, 8007eea <__swsetup_r+0xc6>
 8007ed8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007edc:	d1ba      	bne.n	8007e54 <__swsetup_r+0x30>
 8007ede:	bd70      	pop	{r4, r5, r6, pc}
 8007ee0:	0781      	lsls	r1, r0, #30
 8007ee2:	bf58      	it	pl
 8007ee4:	6963      	ldrpl	r3, [r4, #20]
 8007ee6:	60a3      	str	r3, [r4, #8]
 8007ee8:	e7f4      	b.n	8007ed4 <__swsetup_r+0xb0>
 8007eea:	2000      	movs	r0, #0
 8007eec:	e7f7      	b.n	8007ede <__swsetup_r+0xba>
 8007eee:	bf00      	nop
 8007ef0:	2000000c 	.word	0x2000000c
 8007ef4:	0800894c 	.word	0x0800894c
 8007ef8:	0800896c 	.word	0x0800896c
 8007efc:	0800892c 	.word	0x0800892c

08007f00 <abort>:
 8007f00:	b508      	push	{r3, lr}
 8007f02:	2006      	movs	r0, #6
 8007f04:	f000 fa4c 	bl	80083a0 <raise>
 8007f08:	2001      	movs	r0, #1
 8007f0a:	f7f9 fd3b 	bl	8001984 <_exit>
	...

08007f10 <__sflush_r>:
 8007f10:	898a      	ldrh	r2, [r1, #12]
 8007f12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f16:	4605      	mov	r5, r0
 8007f18:	0710      	lsls	r0, r2, #28
 8007f1a:	460c      	mov	r4, r1
 8007f1c:	d458      	bmi.n	8007fd0 <__sflush_r+0xc0>
 8007f1e:	684b      	ldr	r3, [r1, #4]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	dc05      	bgt.n	8007f30 <__sflush_r+0x20>
 8007f24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	dc02      	bgt.n	8007f30 <__sflush_r+0x20>
 8007f2a:	2000      	movs	r0, #0
 8007f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f32:	2e00      	cmp	r6, #0
 8007f34:	d0f9      	beq.n	8007f2a <__sflush_r+0x1a>
 8007f36:	2300      	movs	r3, #0
 8007f38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f3c:	682f      	ldr	r7, [r5, #0]
 8007f3e:	602b      	str	r3, [r5, #0]
 8007f40:	d032      	beq.n	8007fa8 <__sflush_r+0x98>
 8007f42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f44:	89a3      	ldrh	r3, [r4, #12]
 8007f46:	075a      	lsls	r2, r3, #29
 8007f48:	d505      	bpl.n	8007f56 <__sflush_r+0x46>
 8007f4a:	6863      	ldr	r3, [r4, #4]
 8007f4c:	1ac0      	subs	r0, r0, r3
 8007f4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f50:	b10b      	cbz	r3, 8007f56 <__sflush_r+0x46>
 8007f52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f54:	1ac0      	subs	r0, r0, r3
 8007f56:	2300      	movs	r3, #0
 8007f58:	4602      	mov	r2, r0
 8007f5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f5c:	6a21      	ldr	r1, [r4, #32]
 8007f5e:	4628      	mov	r0, r5
 8007f60:	47b0      	blx	r6
 8007f62:	1c43      	adds	r3, r0, #1
 8007f64:	89a3      	ldrh	r3, [r4, #12]
 8007f66:	d106      	bne.n	8007f76 <__sflush_r+0x66>
 8007f68:	6829      	ldr	r1, [r5, #0]
 8007f6a:	291d      	cmp	r1, #29
 8007f6c:	d82c      	bhi.n	8007fc8 <__sflush_r+0xb8>
 8007f6e:	4a2a      	ldr	r2, [pc, #168]	; (8008018 <__sflush_r+0x108>)
 8007f70:	40ca      	lsrs	r2, r1
 8007f72:	07d6      	lsls	r6, r2, #31
 8007f74:	d528      	bpl.n	8007fc8 <__sflush_r+0xb8>
 8007f76:	2200      	movs	r2, #0
 8007f78:	6062      	str	r2, [r4, #4]
 8007f7a:	04d9      	lsls	r1, r3, #19
 8007f7c:	6922      	ldr	r2, [r4, #16]
 8007f7e:	6022      	str	r2, [r4, #0]
 8007f80:	d504      	bpl.n	8007f8c <__sflush_r+0x7c>
 8007f82:	1c42      	adds	r2, r0, #1
 8007f84:	d101      	bne.n	8007f8a <__sflush_r+0x7a>
 8007f86:	682b      	ldr	r3, [r5, #0]
 8007f88:	b903      	cbnz	r3, 8007f8c <__sflush_r+0x7c>
 8007f8a:	6560      	str	r0, [r4, #84]	; 0x54
 8007f8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f8e:	602f      	str	r7, [r5, #0]
 8007f90:	2900      	cmp	r1, #0
 8007f92:	d0ca      	beq.n	8007f2a <__sflush_r+0x1a>
 8007f94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f98:	4299      	cmp	r1, r3
 8007f9a:	d002      	beq.n	8007fa2 <__sflush_r+0x92>
 8007f9c:	4628      	mov	r0, r5
 8007f9e:	f7ff fbb5 	bl	800770c <_free_r>
 8007fa2:	2000      	movs	r0, #0
 8007fa4:	6360      	str	r0, [r4, #52]	; 0x34
 8007fa6:	e7c1      	b.n	8007f2c <__sflush_r+0x1c>
 8007fa8:	6a21      	ldr	r1, [r4, #32]
 8007faa:	2301      	movs	r3, #1
 8007fac:	4628      	mov	r0, r5
 8007fae:	47b0      	blx	r6
 8007fb0:	1c41      	adds	r1, r0, #1
 8007fb2:	d1c7      	bne.n	8007f44 <__sflush_r+0x34>
 8007fb4:	682b      	ldr	r3, [r5, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d0c4      	beq.n	8007f44 <__sflush_r+0x34>
 8007fba:	2b1d      	cmp	r3, #29
 8007fbc:	d001      	beq.n	8007fc2 <__sflush_r+0xb2>
 8007fbe:	2b16      	cmp	r3, #22
 8007fc0:	d101      	bne.n	8007fc6 <__sflush_r+0xb6>
 8007fc2:	602f      	str	r7, [r5, #0]
 8007fc4:	e7b1      	b.n	8007f2a <__sflush_r+0x1a>
 8007fc6:	89a3      	ldrh	r3, [r4, #12]
 8007fc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fcc:	81a3      	strh	r3, [r4, #12]
 8007fce:	e7ad      	b.n	8007f2c <__sflush_r+0x1c>
 8007fd0:	690f      	ldr	r7, [r1, #16]
 8007fd2:	2f00      	cmp	r7, #0
 8007fd4:	d0a9      	beq.n	8007f2a <__sflush_r+0x1a>
 8007fd6:	0793      	lsls	r3, r2, #30
 8007fd8:	680e      	ldr	r6, [r1, #0]
 8007fda:	bf08      	it	eq
 8007fdc:	694b      	ldreq	r3, [r1, #20]
 8007fde:	600f      	str	r7, [r1, #0]
 8007fe0:	bf18      	it	ne
 8007fe2:	2300      	movne	r3, #0
 8007fe4:	eba6 0807 	sub.w	r8, r6, r7
 8007fe8:	608b      	str	r3, [r1, #8]
 8007fea:	f1b8 0f00 	cmp.w	r8, #0
 8007fee:	dd9c      	ble.n	8007f2a <__sflush_r+0x1a>
 8007ff0:	6a21      	ldr	r1, [r4, #32]
 8007ff2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ff4:	4643      	mov	r3, r8
 8007ff6:	463a      	mov	r2, r7
 8007ff8:	4628      	mov	r0, r5
 8007ffa:	47b0      	blx	r6
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	dc06      	bgt.n	800800e <__sflush_r+0xfe>
 8008000:	89a3      	ldrh	r3, [r4, #12]
 8008002:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008006:	81a3      	strh	r3, [r4, #12]
 8008008:	f04f 30ff 	mov.w	r0, #4294967295
 800800c:	e78e      	b.n	8007f2c <__sflush_r+0x1c>
 800800e:	4407      	add	r7, r0
 8008010:	eba8 0800 	sub.w	r8, r8, r0
 8008014:	e7e9      	b.n	8007fea <__sflush_r+0xda>
 8008016:	bf00      	nop
 8008018:	20400001 	.word	0x20400001

0800801c <_fflush_r>:
 800801c:	b538      	push	{r3, r4, r5, lr}
 800801e:	690b      	ldr	r3, [r1, #16]
 8008020:	4605      	mov	r5, r0
 8008022:	460c      	mov	r4, r1
 8008024:	b913      	cbnz	r3, 800802c <_fflush_r+0x10>
 8008026:	2500      	movs	r5, #0
 8008028:	4628      	mov	r0, r5
 800802a:	bd38      	pop	{r3, r4, r5, pc}
 800802c:	b118      	cbz	r0, 8008036 <_fflush_r+0x1a>
 800802e:	6983      	ldr	r3, [r0, #24]
 8008030:	b90b      	cbnz	r3, 8008036 <_fflush_r+0x1a>
 8008032:	f000 f887 	bl	8008144 <__sinit>
 8008036:	4b14      	ldr	r3, [pc, #80]	; (8008088 <_fflush_r+0x6c>)
 8008038:	429c      	cmp	r4, r3
 800803a:	d11b      	bne.n	8008074 <_fflush_r+0x58>
 800803c:	686c      	ldr	r4, [r5, #4]
 800803e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d0ef      	beq.n	8008026 <_fflush_r+0xa>
 8008046:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008048:	07d0      	lsls	r0, r2, #31
 800804a:	d404      	bmi.n	8008056 <_fflush_r+0x3a>
 800804c:	0599      	lsls	r1, r3, #22
 800804e:	d402      	bmi.n	8008056 <_fflush_r+0x3a>
 8008050:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008052:	f000 f915 	bl	8008280 <__retarget_lock_acquire_recursive>
 8008056:	4628      	mov	r0, r5
 8008058:	4621      	mov	r1, r4
 800805a:	f7ff ff59 	bl	8007f10 <__sflush_r>
 800805e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008060:	07da      	lsls	r2, r3, #31
 8008062:	4605      	mov	r5, r0
 8008064:	d4e0      	bmi.n	8008028 <_fflush_r+0xc>
 8008066:	89a3      	ldrh	r3, [r4, #12]
 8008068:	059b      	lsls	r3, r3, #22
 800806a:	d4dd      	bmi.n	8008028 <_fflush_r+0xc>
 800806c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800806e:	f000 f908 	bl	8008282 <__retarget_lock_release_recursive>
 8008072:	e7d9      	b.n	8008028 <_fflush_r+0xc>
 8008074:	4b05      	ldr	r3, [pc, #20]	; (800808c <_fflush_r+0x70>)
 8008076:	429c      	cmp	r4, r3
 8008078:	d101      	bne.n	800807e <_fflush_r+0x62>
 800807a:	68ac      	ldr	r4, [r5, #8]
 800807c:	e7df      	b.n	800803e <_fflush_r+0x22>
 800807e:	4b04      	ldr	r3, [pc, #16]	; (8008090 <_fflush_r+0x74>)
 8008080:	429c      	cmp	r4, r3
 8008082:	bf08      	it	eq
 8008084:	68ec      	ldreq	r4, [r5, #12]
 8008086:	e7da      	b.n	800803e <_fflush_r+0x22>
 8008088:	0800894c 	.word	0x0800894c
 800808c:	0800896c 	.word	0x0800896c
 8008090:	0800892c 	.word	0x0800892c

08008094 <std>:
 8008094:	2300      	movs	r3, #0
 8008096:	b510      	push	{r4, lr}
 8008098:	4604      	mov	r4, r0
 800809a:	e9c0 3300 	strd	r3, r3, [r0]
 800809e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080a2:	6083      	str	r3, [r0, #8]
 80080a4:	8181      	strh	r1, [r0, #12]
 80080a6:	6643      	str	r3, [r0, #100]	; 0x64
 80080a8:	81c2      	strh	r2, [r0, #14]
 80080aa:	6183      	str	r3, [r0, #24]
 80080ac:	4619      	mov	r1, r3
 80080ae:	2208      	movs	r2, #8
 80080b0:	305c      	adds	r0, #92	; 0x5c
 80080b2:	f7fd fb71 	bl	8005798 <memset>
 80080b6:	4b05      	ldr	r3, [pc, #20]	; (80080cc <std+0x38>)
 80080b8:	6263      	str	r3, [r4, #36]	; 0x24
 80080ba:	4b05      	ldr	r3, [pc, #20]	; (80080d0 <std+0x3c>)
 80080bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80080be:	4b05      	ldr	r3, [pc, #20]	; (80080d4 <std+0x40>)
 80080c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80080c2:	4b05      	ldr	r3, [pc, #20]	; (80080d8 <std+0x44>)
 80080c4:	6224      	str	r4, [r4, #32]
 80080c6:	6323      	str	r3, [r4, #48]	; 0x30
 80080c8:	bd10      	pop	{r4, pc}
 80080ca:	bf00      	nop
 80080cc:	080083d9 	.word	0x080083d9
 80080d0:	080083fb 	.word	0x080083fb
 80080d4:	08008433 	.word	0x08008433
 80080d8:	08008457 	.word	0x08008457

080080dc <_cleanup_r>:
 80080dc:	4901      	ldr	r1, [pc, #4]	; (80080e4 <_cleanup_r+0x8>)
 80080de:	f000 b8af 	b.w	8008240 <_fwalk_reent>
 80080e2:	bf00      	nop
 80080e4:	0800801d 	.word	0x0800801d

080080e8 <__sfmoreglue>:
 80080e8:	b570      	push	{r4, r5, r6, lr}
 80080ea:	2268      	movs	r2, #104	; 0x68
 80080ec:	1e4d      	subs	r5, r1, #1
 80080ee:	4355      	muls	r5, r2
 80080f0:	460e      	mov	r6, r1
 80080f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80080f6:	f7ff fa15 	bl	8007524 <_malloc_r>
 80080fa:	4604      	mov	r4, r0
 80080fc:	b140      	cbz	r0, 8008110 <__sfmoreglue+0x28>
 80080fe:	2100      	movs	r1, #0
 8008100:	e9c0 1600 	strd	r1, r6, [r0]
 8008104:	300c      	adds	r0, #12
 8008106:	60a0      	str	r0, [r4, #8]
 8008108:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800810c:	f7fd fb44 	bl	8005798 <memset>
 8008110:	4620      	mov	r0, r4
 8008112:	bd70      	pop	{r4, r5, r6, pc}

08008114 <__sfp_lock_acquire>:
 8008114:	4801      	ldr	r0, [pc, #4]	; (800811c <__sfp_lock_acquire+0x8>)
 8008116:	f000 b8b3 	b.w	8008280 <__retarget_lock_acquire_recursive>
 800811a:	bf00      	nop
 800811c:	20000349 	.word	0x20000349

08008120 <__sfp_lock_release>:
 8008120:	4801      	ldr	r0, [pc, #4]	; (8008128 <__sfp_lock_release+0x8>)
 8008122:	f000 b8ae 	b.w	8008282 <__retarget_lock_release_recursive>
 8008126:	bf00      	nop
 8008128:	20000349 	.word	0x20000349

0800812c <__sinit_lock_acquire>:
 800812c:	4801      	ldr	r0, [pc, #4]	; (8008134 <__sinit_lock_acquire+0x8>)
 800812e:	f000 b8a7 	b.w	8008280 <__retarget_lock_acquire_recursive>
 8008132:	bf00      	nop
 8008134:	2000034a 	.word	0x2000034a

08008138 <__sinit_lock_release>:
 8008138:	4801      	ldr	r0, [pc, #4]	; (8008140 <__sinit_lock_release+0x8>)
 800813a:	f000 b8a2 	b.w	8008282 <__retarget_lock_release_recursive>
 800813e:	bf00      	nop
 8008140:	2000034a 	.word	0x2000034a

08008144 <__sinit>:
 8008144:	b510      	push	{r4, lr}
 8008146:	4604      	mov	r4, r0
 8008148:	f7ff fff0 	bl	800812c <__sinit_lock_acquire>
 800814c:	69a3      	ldr	r3, [r4, #24]
 800814e:	b11b      	cbz	r3, 8008158 <__sinit+0x14>
 8008150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008154:	f7ff bff0 	b.w	8008138 <__sinit_lock_release>
 8008158:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800815c:	6523      	str	r3, [r4, #80]	; 0x50
 800815e:	4b13      	ldr	r3, [pc, #76]	; (80081ac <__sinit+0x68>)
 8008160:	4a13      	ldr	r2, [pc, #76]	; (80081b0 <__sinit+0x6c>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	62a2      	str	r2, [r4, #40]	; 0x28
 8008166:	42a3      	cmp	r3, r4
 8008168:	bf04      	itt	eq
 800816a:	2301      	moveq	r3, #1
 800816c:	61a3      	streq	r3, [r4, #24]
 800816e:	4620      	mov	r0, r4
 8008170:	f000 f820 	bl	80081b4 <__sfp>
 8008174:	6060      	str	r0, [r4, #4]
 8008176:	4620      	mov	r0, r4
 8008178:	f000 f81c 	bl	80081b4 <__sfp>
 800817c:	60a0      	str	r0, [r4, #8]
 800817e:	4620      	mov	r0, r4
 8008180:	f000 f818 	bl	80081b4 <__sfp>
 8008184:	2200      	movs	r2, #0
 8008186:	60e0      	str	r0, [r4, #12]
 8008188:	2104      	movs	r1, #4
 800818a:	6860      	ldr	r0, [r4, #4]
 800818c:	f7ff ff82 	bl	8008094 <std>
 8008190:	68a0      	ldr	r0, [r4, #8]
 8008192:	2201      	movs	r2, #1
 8008194:	2109      	movs	r1, #9
 8008196:	f7ff ff7d 	bl	8008094 <std>
 800819a:	68e0      	ldr	r0, [r4, #12]
 800819c:	2202      	movs	r2, #2
 800819e:	2112      	movs	r1, #18
 80081a0:	f7ff ff78 	bl	8008094 <std>
 80081a4:	2301      	movs	r3, #1
 80081a6:	61a3      	str	r3, [r4, #24]
 80081a8:	e7d2      	b.n	8008150 <__sinit+0xc>
 80081aa:	bf00      	nop
 80081ac:	08008560 	.word	0x08008560
 80081b0:	080080dd 	.word	0x080080dd

080081b4 <__sfp>:
 80081b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081b6:	4607      	mov	r7, r0
 80081b8:	f7ff ffac 	bl	8008114 <__sfp_lock_acquire>
 80081bc:	4b1e      	ldr	r3, [pc, #120]	; (8008238 <__sfp+0x84>)
 80081be:	681e      	ldr	r6, [r3, #0]
 80081c0:	69b3      	ldr	r3, [r6, #24]
 80081c2:	b913      	cbnz	r3, 80081ca <__sfp+0x16>
 80081c4:	4630      	mov	r0, r6
 80081c6:	f7ff ffbd 	bl	8008144 <__sinit>
 80081ca:	3648      	adds	r6, #72	; 0x48
 80081cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80081d0:	3b01      	subs	r3, #1
 80081d2:	d503      	bpl.n	80081dc <__sfp+0x28>
 80081d4:	6833      	ldr	r3, [r6, #0]
 80081d6:	b30b      	cbz	r3, 800821c <__sfp+0x68>
 80081d8:	6836      	ldr	r6, [r6, #0]
 80081da:	e7f7      	b.n	80081cc <__sfp+0x18>
 80081dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80081e0:	b9d5      	cbnz	r5, 8008218 <__sfp+0x64>
 80081e2:	4b16      	ldr	r3, [pc, #88]	; (800823c <__sfp+0x88>)
 80081e4:	60e3      	str	r3, [r4, #12]
 80081e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80081ea:	6665      	str	r5, [r4, #100]	; 0x64
 80081ec:	f000 f847 	bl	800827e <__retarget_lock_init_recursive>
 80081f0:	f7ff ff96 	bl	8008120 <__sfp_lock_release>
 80081f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80081f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80081fc:	6025      	str	r5, [r4, #0]
 80081fe:	61a5      	str	r5, [r4, #24]
 8008200:	2208      	movs	r2, #8
 8008202:	4629      	mov	r1, r5
 8008204:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008208:	f7fd fac6 	bl	8005798 <memset>
 800820c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008210:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008214:	4620      	mov	r0, r4
 8008216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008218:	3468      	adds	r4, #104	; 0x68
 800821a:	e7d9      	b.n	80081d0 <__sfp+0x1c>
 800821c:	2104      	movs	r1, #4
 800821e:	4638      	mov	r0, r7
 8008220:	f7ff ff62 	bl	80080e8 <__sfmoreglue>
 8008224:	4604      	mov	r4, r0
 8008226:	6030      	str	r0, [r6, #0]
 8008228:	2800      	cmp	r0, #0
 800822a:	d1d5      	bne.n	80081d8 <__sfp+0x24>
 800822c:	f7ff ff78 	bl	8008120 <__sfp_lock_release>
 8008230:	230c      	movs	r3, #12
 8008232:	603b      	str	r3, [r7, #0]
 8008234:	e7ee      	b.n	8008214 <__sfp+0x60>
 8008236:	bf00      	nop
 8008238:	08008560 	.word	0x08008560
 800823c:	ffff0001 	.word	0xffff0001

08008240 <_fwalk_reent>:
 8008240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008244:	4606      	mov	r6, r0
 8008246:	4688      	mov	r8, r1
 8008248:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800824c:	2700      	movs	r7, #0
 800824e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008252:	f1b9 0901 	subs.w	r9, r9, #1
 8008256:	d505      	bpl.n	8008264 <_fwalk_reent+0x24>
 8008258:	6824      	ldr	r4, [r4, #0]
 800825a:	2c00      	cmp	r4, #0
 800825c:	d1f7      	bne.n	800824e <_fwalk_reent+0xe>
 800825e:	4638      	mov	r0, r7
 8008260:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008264:	89ab      	ldrh	r3, [r5, #12]
 8008266:	2b01      	cmp	r3, #1
 8008268:	d907      	bls.n	800827a <_fwalk_reent+0x3a>
 800826a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800826e:	3301      	adds	r3, #1
 8008270:	d003      	beq.n	800827a <_fwalk_reent+0x3a>
 8008272:	4629      	mov	r1, r5
 8008274:	4630      	mov	r0, r6
 8008276:	47c0      	blx	r8
 8008278:	4307      	orrs	r7, r0
 800827a:	3568      	adds	r5, #104	; 0x68
 800827c:	e7e9      	b.n	8008252 <_fwalk_reent+0x12>

0800827e <__retarget_lock_init_recursive>:
 800827e:	4770      	bx	lr

08008280 <__retarget_lock_acquire_recursive>:
 8008280:	4770      	bx	lr

08008282 <__retarget_lock_release_recursive>:
 8008282:	4770      	bx	lr

08008284 <__swhatbuf_r>:
 8008284:	b570      	push	{r4, r5, r6, lr}
 8008286:	460e      	mov	r6, r1
 8008288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800828c:	2900      	cmp	r1, #0
 800828e:	b096      	sub	sp, #88	; 0x58
 8008290:	4614      	mov	r4, r2
 8008292:	461d      	mov	r5, r3
 8008294:	da08      	bge.n	80082a8 <__swhatbuf_r+0x24>
 8008296:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800829a:	2200      	movs	r2, #0
 800829c:	602a      	str	r2, [r5, #0]
 800829e:	061a      	lsls	r2, r3, #24
 80082a0:	d410      	bmi.n	80082c4 <__swhatbuf_r+0x40>
 80082a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082a6:	e00e      	b.n	80082c6 <__swhatbuf_r+0x42>
 80082a8:	466a      	mov	r2, sp
 80082aa:	f000 f8fb 	bl	80084a4 <_fstat_r>
 80082ae:	2800      	cmp	r0, #0
 80082b0:	dbf1      	blt.n	8008296 <__swhatbuf_r+0x12>
 80082b2:	9a01      	ldr	r2, [sp, #4]
 80082b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80082b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80082bc:	425a      	negs	r2, r3
 80082be:	415a      	adcs	r2, r3
 80082c0:	602a      	str	r2, [r5, #0]
 80082c2:	e7ee      	b.n	80082a2 <__swhatbuf_r+0x1e>
 80082c4:	2340      	movs	r3, #64	; 0x40
 80082c6:	2000      	movs	r0, #0
 80082c8:	6023      	str	r3, [r4, #0]
 80082ca:	b016      	add	sp, #88	; 0x58
 80082cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080082d0 <__smakebuf_r>:
 80082d0:	898b      	ldrh	r3, [r1, #12]
 80082d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80082d4:	079d      	lsls	r5, r3, #30
 80082d6:	4606      	mov	r6, r0
 80082d8:	460c      	mov	r4, r1
 80082da:	d507      	bpl.n	80082ec <__smakebuf_r+0x1c>
 80082dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80082e0:	6023      	str	r3, [r4, #0]
 80082e2:	6123      	str	r3, [r4, #16]
 80082e4:	2301      	movs	r3, #1
 80082e6:	6163      	str	r3, [r4, #20]
 80082e8:	b002      	add	sp, #8
 80082ea:	bd70      	pop	{r4, r5, r6, pc}
 80082ec:	ab01      	add	r3, sp, #4
 80082ee:	466a      	mov	r2, sp
 80082f0:	f7ff ffc8 	bl	8008284 <__swhatbuf_r>
 80082f4:	9900      	ldr	r1, [sp, #0]
 80082f6:	4605      	mov	r5, r0
 80082f8:	4630      	mov	r0, r6
 80082fa:	f7ff f913 	bl	8007524 <_malloc_r>
 80082fe:	b948      	cbnz	r0, 8008314 <__smakebuf_r+0x44>
 8008300:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008304:	059a      	lsls	r2, r3, #22
 8008306:	d4ef      	bmi.n	80082e8 <__smakebuf_r+0x18>
 8008308:	f023 0303 	bic.w	r3, r3, #3
 800830c:	f043 0302 	orr.w	r3, r3, #2
 8008310:	81a3      	strh	r3, [r4, #12]
 8008312:	e7e3      	b.n	80082dc <__smakebuf_r+0xc>
 8008314:	4b0d      	ldr	r3, [pc, #52]	; (800834c <__smakebuf_r+0x7c>)
 8008316:	62b3      	str	r3, [r6, #40]	; 0x28
 8008318:	89a3      	ldrh	r3, [r4, #12]
 800831a:	6020      	str	r0, [r4, #0]
 800831c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008320:	81a3      	strh	r3, [r4, #12]
 8008322:	9b00      	ldr	r3, [sp, #0]
 8008324:	6163      	str	r3, [r4, #20]
 8008326:	9b01      	ldr	r3, [sp, #4]
 8008328:	6120      	str	r0, [r4, #16]
 800832a:	b15b      	cbz	r3, 8008344 <__smakebuf_r+0x74>
 800832c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008330:	4630      	mov	r0, r6
 8008332:	f000 f8c9 	bl	80084c8 <_isatty_r>
 8008336:	b128      	cbz	r0, 8008344 <__smakebuf_r+0x74>
 8008338:	89a3      	ldrh	r3, [r4, #12]
 800833a:	f023 0303 	bic.w	r3, r3, #3
 800833e:	f043 0301 	orr.w	r3, r3, #1
 8008342:	81a3      	strh	r3, [r4, #12]
 8008344:	89a0      	ldrh	r0, [r4, #12]
 8008346:	4305      	orrs	r5, r0
 8008348:	81a5      	strh	r5, [r4, #12]
 800834a:	e7cd      	b.n	80082e8 <__smakebuf_r+0x18>
 800834c:	080080dd 	.word	0x080080dd

08008350 <_raise_r>:
 8008350:	291f      	cmp	r1, #31
 8008352:	b538      	push	{r3, r4, r5, lr}
 8008354:	4604      	mov	r4, r0
 8008356:	460d      	mov	r5, r1
 8008358:	d904      	bls.n	8008364 <_raise_r+0x14>
 800835a:	2316      	movs	r3, #22
 800835c:	6003      	str	r3, [r0, #0]
 800835e:	f04f 30ff 	mov.w	r0, #4294967295
 8008362:	bd38      	pop	{r3, r4, r5, pc}
 8008364:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008366:	b112      	cbz	r2, 800836e <_raise_r+0x1e>
 8008368:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800836c:	b94b      	cbnz	r3, 8008382 <_raise_r+0x32>
 800836e:	4620      	mov	r0, r4
 8008370:	f000 f830 	bl	80083d4 <_getpid_r>
 8008374:	462a      	mov	r2, r5
 8008376:	4601      	mov	r1, r0
 8008378:	4620      	mov	r0, r4
 800837a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800837e:	f000 b817 	b.w	80083b0 <_kill_r>
 8008382:	2b01      	cmp	r3, #1
 8008384:	d00a      	beq.n	800839c <_raise_r+0x4c>
 8008386:	1c59      	adds	r1, r3, #1
 8008388:	d103      	bne.n	8008392 <_raise_r+0x42>
 800838a:	2316      	movs	r3, #22
 800838c:	6003      	str	r3, [r0, #0]
 800838e:	2001      	movs	r0, #1
 8008390:	e7e7      	b.n	8008362 <_raise_r+0x12>
 8008392:	2400      	movs	r4, #0
 8008394:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008398:	4628      	mov	r0, r5
 800839a:	4798      	blx	r3
 800839c:	2000      	movs	r0, #0
 800839e:	e7e0      	b.n	8008362 <_raise_r+0x12>

080083a0 <raise>:
 80083a0:	4b02      	ldr	r3, [pc, #8]	; (80083ac <raise+0xc>)
 80083a2:	4601      	mov	r1, r0
 80083a4:	6818      	ldr	r0, [r3, #0]
 80083a6:	f7ff bfd3 	b.w	8008350 <_raise_r>
 80083aa:	bf00      	nop
 80083ac:	2000000c 	.word	0x2000000c

080083b0 <_kill_r>:
 80083b0:	b538      	push	{r3, r4, r5, lr}
 80083b2:	4d07      	ldr	r5, [pc, #28]	; (80083d0 <_kill_r+0x20>)
 80083b4:	2300      	movs	r3, #0
 80083b6:	4604      	mov	r4, r0
 80083b8:	4608      	mov	r0, r1
 80083ba:	4611      	mov	r1, r2
 80083bc:	602b      	str	r3, [r5, #0]
 80083be:	f7f9 fad1 	bl	8001964 <_kill>
 80083c2:	1c43      	adds	r3, r0, #1
 80083c4:	d102      	bne.n	80083cc <_kill_r+0x1c>
 80083c6:	682b      	ldr	r3, [r5, #0]
 80083c8:	b103      	cbz	r3, 80083cc <_kill_r+0x1c>
 80083ca:	6023      	str	r3, [r4, #0]
 80083cc:	bd38      	pop	{r3, r4, r5, pc}
 80083ce:	bf00      	nop
 80083d0:	20000344 	.word	0x20000344

080083d4 <_getpid_r>:
 80083d4:	f7f9 babe 	b.w	8001954 <_getpid>

080083d8 <__sread>:
 80083d8:	b510      	push	{r4, lr}
 80083da:	460c      	mov	r4, r1
 80083dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083e0:	f000 f894 	bl	800850c <_read_r>
 80083e4:	2800      	cmp	r0, #0
 80083e6:	bfab      	itete	ge
 80083e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80083ea:	89a3      	ldrhlt	r3, [r4, #12]
 80083ec:	181b      	addge	r3, r3, r0
 80083ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80083f2:	bfac      	ite	ge
 80083f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80083f6:	81a3      	strhlt	r3, [r4, #12]
 80083f8:	bd10      	pop	{r4, pc}

080083fa <__swrite>:
 80083fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083fe:	461f      	mov	r7, r3
 8008400:	898b      	ldrh	r3, [r1, #12]
 8008402:	05db      	lsls	r3, r3, #23
 8008404:	4605      	mov	r5, r0
 8008406:	460c      	mov	r4, r1
 8008408:	4616      	mov	r6, r2
 800840a:	d505      	bpl.n	8008418 <__swrite+0x1e>
 800840c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008410:	2302      	movs	r3, #2
 8008412:	2200      	movs	r2, #0
 8008414:	f000 f868 	bl	80084e8 <_lseek_r>
 8008418:	89a3      	ldrh	r3, [r4, #12]
 800841a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800841e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008422:	81a3      	strh	r3, [r4, #12]
 8008424:	4632      	mov	r2, r6
 8008426:	463b      	mov	r3, r7
 8008428:	4628      	mov	r0, r5
 800842a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800842e:	f000 b817 	b.w	8008460 <_write_r>

08008432 <__sseek>:
 8008432:	b510      	push	{r4, lr}
 8008434:	460c      	mov	r4, r1
 8008436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800843a:	f000 f855 	bl	80084e8 <_lseek_r>
 800843e:	1c43      	adds	r3, r0, #1
 8008440:	89a3      	ldrh	r3, [r4, #12]
 8008442:	bf15      	itete	ne
 8008444:	6560      	strne	r0, [r4, #84]	; 0x54
 8008446:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800844a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800844e:	81a3      	strheq	r3, [r4, #12]
 8008450:	bf18      	it	ne
 8008452:	81a3      	strhne	r3, [r4, #12]
 8008454:	bd10      	pop	{r4, pc}

08008456 <__sclose>:
 8008456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800845a:	f000 b813 	b.w	8008484 <_close_r>
	...

08008460 <_write_r>:
 8008460:	b538      	push	{r3, r4, r5, lr}
 8008462:	4d07      	ldr	r5, [pc, #28]	; (8008480 <_write_r+0x20>)
 8008464:	4604      	mov	r4, r0
 8008466:	4608      	mov	r0, r1
 8008468:	4611      	mov	r1, r2
 800846a:	2200      	movs	r2, #0
 800846c:	602a      	str	r2, [r5, #0]
 800846e:	461a      	mov	r2, r3
 8008470:	f7f9 faaf 	bl	80019d2 <_write>
 8008474:	1c43      	adds	r3, r0, #1
 8008476:	d102      	bne.n	800847e <_write_r+0x1e>
 8008478:	682b      	ldr	r3, [r5, #0]
 800847a:	b103      	cbz	r3, 800847e <_write_r+0x1e>
 800847c:	6023      	str	r3, [r4, #0]
 800847e:	bd38      	pop	{r3, r4, r5, pc}
 8008480:	20000344 	.word	0x20000344

08008484 <_close_r>:
 8008484:	b538      	push	{r3, r4, r5, lr}
 8008486:	4d06      	ldr	r5, [pc, #24]	; (80084a0 <_close_r+0x1c>)
 8008488:	2300      	movs	r3, #0
 800848a:	4604      	mov	r4, r0
 800848c:	4608      	mov	r0, r1
 800848e:	602b      	str	r3, [r5, #0]
 8008490:	f7f9 fabb 	bl	8001a0a <_close>
 8008494:	1c43      	adds	r3, r0, #1
 8008496:	d102      	bne.n	800849e <_close_r+0x1a>
 8008498:	682b      	ldr	r3, [r5, #0]
 800849a:	b103      	cbz	r3, 800849e <_close_r+0x1a>
 800849c:	6023      	str	r3, [r4, #0]
 800849e:	bd38      	pop	{r3, r4, r5, pc}
 80084a0:	20000344 	.word	0x20000344

080084a4 <_fstat_r>:
 80084a4:	b538      	push	{r3, r4, r5, lr}
 80084a6:	4d07      	ldr	r5, [pc, #28]	; (80084c4 <_fstat_r+0x20>)
 80084a8:	2300      	movs	r3, #0
 80084aa:	4604      	mov	r4, r0
 80084ac:	4608      	mov	r0, r1
 80084ae:	4611      	mov	r1, r2
 80084b0:	602b      	str	r3, [r5, #0]
 80084b2:	f7f9 fab6 	bl	8001a22 <_fstat>
 80084b6:	1c43      	adds	r3, r0, #1
 80084b8:	d102      	bne.n	80084c0 <_fstat_r+0x1c>
 80084ba:	682b      	ldr	r3, [r5, #0]
 80084bc:	b103      	cbz	r3, 80084c0 <_fstat_r+0x1c>
 80084be:	6023      	str	r3, [r4, #0]
 80084c0:	bd38      	pop	{r3, r4, r5, pc}
 80084c2:	bf00      	nop
 80084c4:	20000344 	.word	0x20000344

080084c8 <_isatty_r>:
 80084c8:	b538      	push	{r3, r4, r5, lr}
 80084ca:	4d06      	ldr	r5, [pc, #24]	; (80084e4 <_isatty_r+0x1c>)
 80084cc:	2300      	movs	r3, #0
 80084ce:	4604      	mov	r4, r0
 80084d0:	4608      	mov	r0, r1
 80084d2:	602b      	str	r3, [r5, #0]
 80084d4:	f7f9 fab5 	bl	8001a42 <_isatty>
 80084d8:	1c43      	adds	r3, r0, #1
 80084da:	d102      	bne.n	80084e2 <_isatty_r+0x1a>
 80084dc:	682b      	ldr	r3, [r5, #0]
 80084de:	b103      	cbz	r3, 80084e2 <_isatty_r+0x1a>
 80084e0:	6023      	str	r3, [r4, #0]
 80084e2:	bd38      	pop	{r3, r4, r5, pc}
 80084e4:	20000344 	.word	0x20000344

080084e8 <_lseek_r>:
 80084e8:	b538      	push	{r3, r4, r5, lr}
 80084ea:	4d07      	ldr	r5, [pc, #28]	; (8008508 <_lseek_r+0x20>)
 80084ec:	4604      	mov	r4, r0
 80084ee:	4608      	mov	r0, r1
 80084f0:	4611      	mov	r1, r2
 80084f2:	2200      	movs	r2, #0
 80084f4:	602a      	str	r2, [r5, #0]
 80084f6:	461a      	mov	r2, r3
 80084f8:	f7f9 faae 	bl	8001a58 <_lseek>
 80084fc:	1c43      	adds	r3, r0, #1
 80084fe:	d102      	bne.n	8008506 <_lseek_r+0x1e>
 8008500:	682b      	ldr	r3, [r5, #0]
 8008502:	b103      	cbz	r3, 8008506 <_lseek_r+0x1e>
 8008504:	6023      	str	r3, [r4, #0]
 8008506:	bd38      	pop	{r3, r4, r5, pc}
 8008508:	20000344 	.word	0x20000344

0800850c <_read_r>:
 800850c:	b538      	push	{r3, r4, r5, lr}
 800850e:	4d07      	ldr	r5, [pc, #28]	; (800852c <_read_r+0x20>)
 8008510:	4604      	mov	r4, r0
 8008512:	4608      	mov	r0, r1
 8008514:	4611      	mov	r1, r2
 8008516:	2200      	movs	r2, #0
 8008518:	602a      	str	r2, [r5, #0]
 800851a:	461a      	mov	r2, r3
 800851c:	f7f9 fa3c 	bl	8001998 <_read>
 8008520:	1c43      	adds	r3, r0, #1
 8008522:	d102      	bne.n	800852a <_read_r+0x1e>
 8008524:	682b      	ldr	r3, [r5, #0]
 8008526:	b103      	cbz	r3, 800852a <_read_r+0x1e>
 8008528:	6023      	str	r3, [r4, #0]
 800852a:	bd38      	pop	{r3, r4, r5, pc}
 800852c:	20000344 	.word	0x20000344

08008530 <_init>:
 8008530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008532:	bf00      	nop
 8008534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008536:	bc08      	pop	{r3}
 8008538:	469e      	mov	lr, r3
 800853a:	4770      	bx	lr

0800853c <_fini>:
 800853c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800853e:	bf00      	nop
 8008540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008542:	bc08      	pop	{r3}
 8008544:	469e      	mov	lr, r3
 8008546:	4770      	bx	lr
